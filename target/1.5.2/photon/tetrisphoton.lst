
c:/Users/mligh/OneDrive/Particle/TetrisPhoton/tetrisphoton/target/1.5.2/photon/tetrisphoton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ff4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3010  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a3014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009b8  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a307c  080a307c  0002307c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a30a4  080a30a4  000230a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009fe8c  00000000  00000000  000230a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e981  00000000  00000000  000c2f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000106ff  00000000  00000000  000d18b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001da0  00000000  00000000  000e1fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002df8  00000000  00000000  000e3d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024440  00000000  00000000  000e6b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021ed4  00000000  00000000  0010af8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a40e0  00000000  00000000  0012ce60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b1c8  00000000  00000000  001d0f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fdff 	bl	80a2c30 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fe04 	bl	80a2c46 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3014 	.word	0x080a3014
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000a20 	.word	0x20000a20
 80a0058:	20000a20 	.word	0x20000a20

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f8a5 	bl	80a21ac <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2fd0 	.word	0x080a2fd0
 80a0084:	080a3004 	.word	0x080a3004

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b81a 	b.w	80a00c0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fbdf 	bl	80a0850 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b84b 	b.w	80a2130 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bf61 	b.w	80a1f60 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00ae:	b510      	push	{r4, lr}
 80a00b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80a00b2:	6800      	ldr	r0, [r0, #0]
 80a00b4:	b108      	cbz	r0, 80a00ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a00b6:	f001 ff53 	bl	80a1f60 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00ba:	4620      	mov	r0, r4
 80a00bc:	bd10      	pop	{r4, pc}
	...

080a00c0 <setup>:
int pieceSpot;
int pieceRotation;
int currentPiece;
int tetris[PIXEL_COUNT];        //Array to hold Tetris board

void setup() {
 80a00c0:	b508      	push	{r3, lr}
    pinMode(lbtn, INPUT_PULLDOWN);
 80a00c2:	2103      	movs	r1, #3
 80a00c4:	2000      	movs	r0, #0
 80a00c6:	f002 fba5 	bl	80a2814 <pinMode>
    pinMode(rbtn, INPUT_PULLDOWN);
 80a00ca:	2103      	movs	r1, #3
 80a00cc:	2001      	movs	r0, #1
 80a00ce:	f002 fba1 	bl	80a2814 <pinMode>
    pinMode(dnbtn, INPUT_PULLDOWN);
 80a00d2:	2103      	movs	r1, #3
 80a00d4:	2002      	movs	r0, #2
 80a00d6:	f002 fb9d 	bl	80a2814 <pinMode>
    pinMode(ebtn, INPUT_PULLDOWN);
 80a00da:	2103      	movs	r1, #3
 80a00dc:	4608      	mov	r0, r1
 80a00de:	f002 fb99 	bl	80a2814 <pinMode>
    pinMode(D4, INPUT_PULLDOWN);
 80a00e2:	2103      	movs	r1, #3
 80a00e4:	2004      	movs	r0, #4
 80a00e6:	f002 fb95 	bl	80a2814 <pinMode>
    strip.begin();
 80a00ea:	480c      	ldr	r0, [pc, #48]	; (80a011c <setup+0x5c>)
 80a00ec:	f000 fc70 	bl	80a09d0 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.show();
 80a00f0:	480a      	ldr	r0, [pc, #40]	; (80a011c <setup+0x5c>)
 80a00f2:	f000 fca3 	bl	80a0a3c <_ZN17Adafruit_NeoPixel4showEv>
 80a00f6:	2300      	movs	r3, #0
    for(i = 0; i < PIXEL_COUNT; i++){
        tetris[i] = 0;
 80a00f8:	4619      	mov	r1, r3
 80a00fa:	4a09      	ldr	r2, [pc, #36]	; (80a0120 <setup+0x60>)
 80a00fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    pinMode(dnbtn, INPUT_PULLDOWN);
    pinMode(ebtn, INPUT_PULLDOWN);
    pinMode(D4, INPUT_PULLDOWN);
    strip.begin();
    strip.show();
    for(i = 0; i < PIXEL_COUNT; i++){
 80a0100:	3301      	adds	r3, #1
 80a0102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80a0106:	d1f9      	bne.n	80a00fc <setup+0x3c>
 80a0108:	4a06      	ldr	r2, [pc, #24]	; (80a0124 <setup+0x64>)
 80a010a:	6013      	str	r3, [r2, #0]
        tetris[i] = 0;
    }
    pieceSpot = 8;
 80a010c:	4b06      	ldr	r3, [pc, #24]	; (80a0128 <setup+0x68>)
 80a010e:	2208      	movs	r2, #8
 80a0110:	601a      	str	r2, [r3, #0]
    pieceRotation = 0;
 80a0112:	4b06      	ldr	r3, [pc, #24]	; (80a012c <setup+0x6c>)
 80a0114:	2200      	movs	r2, #0
 80a0116:	601a      	str	r2, [r3, #0]
 80a0118:	bd08      	pop	{r3, pc}
 80a011a:	bf00      	nop
 80a011c:	20000478 	.word	0x20000478
 80a0120:	20000078 	.word	0x20000078
 80a0124:	2000006c 	.word	0x2000006c
 80a0128:	20000070 	.word	0x20000070
 80a012c:	2000048c 	.word	0x2000048c

080a0130 <_Z10printBoardPi>:
    return ((colorCode/1000)%1000);
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
 80a0130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    for(i = 0; i < PIXEL_COUNT; i++){
 80a0132:	4d2d      	ldr	r5, [pc, #180]	; (80a01e8 <_Z10printBoardPi+0xb8>)
 80a0134:	2300      	movs	r3, #0
 80a0136:	4e2d      	ldr	r6, [pc, #180]	; (80a01ec <_Z10printBoardPi+0xbc>)
        else{                                                                                                       //Reversed row for S configuration (mirror function)
            if((i%16) < 8){
                strip.setPixelColor(i+15-((i%16)*2),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the right half of line, add to mirror to other side
            }
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
 80a0138:	4f2d      	ldr	r7, [pc, #180]	; (80a01f0 <_Z10printBoardPi+0xc0>)
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
    for(i = 0; i < PIXEL_COUNT; i++){
 80a013a:	602b      	str	r3, [r5, #0]
 80a013c:	6829      	ldr	r1, [r5, #0]
 80a013e:	29ff      	cmp	r1, #255	; 0xff
 80a0140:	dc4c      	bgt.n	80a01dc <_Z10printBoardPi+0xac>
        if(((i/16)%2) == 0){                                                                                        //Prints standard row
 80a0142:	2310      	movs	r3, #16
 80a0144:	fb91 f3f3 	sdiv	r3, r1, r3
 80a0148:	f013 0f01 	tst.w	r3, #1
            strip.setPixelColor(i,getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));
 80a014c:	f856 c021 	ldr.w	ip, [r6, r1, lsl #2]
 80a0150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
    for(i = 0; i < PIXEL_COUNT; i++){
        if(((i/16)%2) == 0){                                                                                        //Prints standard row
 80a0154:	d116      	bne.n	80a0184 <_Z10printBoardPi+0x54>
            strip.setPixelColor(i,getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));
 80a0156:	fb9c f4f0 	sdiv	r4, ip, r0
 80a015a:	fb9c f2f7 	sdiv	r2, ip, r7
 80a015e:	fb94 f3f0 	sdiv	r3, r4, r0
 80a0162:	fb92 fef0 	sdiv	lr, r2, r0
 80a0166:	fb00 4313 	mls	r3, r0, r3, r4
 80a016a:	fb00 221e 	mls	r2, r0, lr, r2
 80a016e:	fb00 c014 	mls	r0, r0, r4, ip
 80a0172:	b2c0      	uxtb	r0, r0
 80a0174:	9000      	str	r0, [sp, #0]
 80a0176:	b2db      	uxtb	r3, r3
 80a0178:	b2d2      	uxtb	r2, r2
 80a017a:	b289      	uxth	r1, r1
 80a017c:	481d      	ldr	r0, [pc, #116]	; (80a01f4 <_Z10printBoardPi+0xc4>)
 80a017e:	f001 fd17 	bl	80a1bb0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a0182:	e027      	b.n	80a01d4 <_Z10printBoardPi+0xa4>
        else{                                                                                                       //Reversed row for S configuration (mirror function)
            if((i%16) < 8){
                strip.setPixelColor(i+15-((i%16)*2),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the right half of line, add to mirror to other side
            }
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
 80a0184:	fb9c f2f0 	sdiv	r2, ip, r0
 80a0188:	fb9c f4f7 	sdiv	r4, ip, r7
 80a018c:	fb92 f3f0 	sdiv	r3, r2, r0
 80a0190:	fb00 2313 	mls	r3, r0, r3, r2
 80a0194:	fb94 f2f0 	sdiv	r2, r4, r0
 80a0198:	fb00 4212 	mls	r2, r0, r2, r4
 80a019c:	4c16      	ldr	r4, [pc, #88]	; (80a01f8 <_Z10printBoardPi+0xc8>)
 80a019e:	f101 0e0f 	add.w	lr, r1, #15
 80a01a2:	400c      	ands	r4, r1
 80a01a4:	2c00      	cmp	r4, #0
 80a01a6:	bfbc      	itt	lt
 80a01a8:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80a01ac:	f064 040f 	ornlt	r4, r4, #15
 80a01b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01b4:	bfb8      	it	lt
 80a01b6:	3401      	addlt	r4, #1
 80a01b8:	ebae 0144 	sub.w	r1, lr, r4, lsl #1
 80a01bc:	fb9c fef0 	sdiv	lr, ip, r0
 80a01c0:	fb00 c01e 	mls	r0, r0, lr, ip
 80a01c4:	b2c0      	uxtb	r0, r0
 80a01c6:	9000      	str	r0, [sp, #0]
 80a01c8:	b2db      	uxtb	r3, r3
 80a01ca:	b2d2      	uxtb	r2, r2
 80a01cc:	b289      	uxth	r1, r1
 80a01ce:	4809      	ldr	r0, [pc, #36]	; (80a01f4 <_Z10printBoardPi+0xc4>)
 80a01d0:	f001 fcee 	bl	80a1bb0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
    for(i = 0; i < PIXEL_COUNT; i++){
 80a01d4:	682b      	ldr	r3, [r5, #0]
 80a01d6:	3301      	adds	r3, #1
 80a01d8:	602b      	str	r3, [r5, #0]
 80a01da:	e7af      	b.n	80a013c <_Z10printBoardPi+0xc>
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
            }
        }
    }
    strip.show();
 80a01dc:	4805      	ldr	r0, [pc, #20]	; (80a01f4 <_Z10printBoardPi+0xc4>)
}
 80a01de:	b003      	add	sp, #12
 80a01e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
            }
        }
    }
    strip.show();
 80a01e4:	f000 bc2a 	b.w	80a0a3c <_ZN17Adafruit_NeoPixel4showEv>
 80a01e8:	2000006c 	.word	0x2000006c
 80a01ec:	20000078 	.word	0x20000078
 80a01f0:	000f4240 	.word	0x000f4240
 80a01f4:	20000478 	.word	0x20000478
 80a01f8:	8000000f 	.word	0x8000000f

080a01fc <_Z8gameDonev>:
}
void gameDone(){
    delay(20000);
 80a01fc:	f644 6020 	movw	r0, #20000	; 0x4e20
 80a0200:	f001 bf44 	b.w	80a208c <delay>

080a0204 <_Z9loadPieceiiPi>:
    delay(1000);
}


void loadPiece(int pid, int orientation, int* off){
    switch (pid){
 80a0204:	2806      	cmp	r0, #6
 80a0206:	f200 80d5 	bhi.w	80a03b4 <_Z9loadPieceiiPi+0x1b0>
 80a020a:	e8df f000 	tbb	[pc, r0]
 80a020e:	0804      	.short	0x0804
 80a0210:	866a461d 	.word	0x866a461d
 80a0214:	ac          	.byte	0xac
 80a0215:	00          	.byte	0x00
        case 0:         //Square, top left corner is origin
            off[0] = 0;
 80a0216:	2300      	movs	r3, #0
 80a0218:	6013      	str	r3, [r2, #0]
            off[1] = 1;
 80a021a:	2301      	movs	r3, #1
 80a021c:	e037      	b.n	80a028e <_Z9loadPieceiiPi+0x8a>
            off[2] = 16;
            off[3] = 17;
            break;
        case 1:                                         //Vertical piece, middle block is origin
            if(orientation == 0 || orientation == 2){       //Horizontal orientation
 80a021e:	f031 0102 	bics.w	r1, r1, #2
 80a0222:	d108      	bne.n	80a0236 <_Z9loadPieceiiPi+0x32>
                off[0] = -1;                                    //
 80a0224:	f04f 33ff 	mov.w	r3, #4294967295
 80a0228:	6013      	str	r3, [r2, #0]
                off[1] = 0;                                     //
                off[2] = 1;                                     //
 80a022a:	2301      	movs	r3, #1
 80a022c:	6093      	str	r3, [r2, #8]
                off[3] = 2;                                     //
 80a022e:	2302      	movs	r3, #2
            off[3] = 17;
            break;
        case 1:                                         //Vertical piece, middle block is origin
            if(orientation == 0 || orientation == 2){       //Horizontal orientation
                off[0] = -1;                                    //
                off[1] = 0;                                     //
 80a0230:	6051      	str	r1, [r2, #4]
                off[2] = 1;                                     //
                off[3] = 2;                                     //
 80a0232:	60d3      	str	r3, [r2, #12]
 80a0234:	4770      	bx	lr
            }
            else{                                           //Vertical Orientation
                off[0] = -16;                                   //
                off[1] = 0;                                     //
                off[2] = 16;                                    //
                off[3] = 32;                                    //
 80a0236:	f06f 000f 	mvn.w	r0, #15
 80a023a:	2100      	movs	r1, #0
 80a023c:	2310      	movs	r3, #16
 80a023e:	f04f 0c20 	mov.w	ip, #32
 80a0242:	e882 100b 	stmia.w	r2, {r0, r1, r3, ip}
 80a0246:	4770      	bx	lr
            }
            break;
        case 2:                                         //L-Shape
            if(orientation == 0){                           //Horizontal orientation, middle of l is origin
 80a0248:	b941      	cbnz	r1, 80a025c <_Z9loadPieceiiPi+0x58>
                off[0] = -1;                                    //
 80a024a:	f04f 33ff 	mov.w	r3, #4294967295
 80a024e:	6013      	str	r3, [r2, #0]
                off[1] = 0;                                     //
                off[2] = 1;                                     //
 80a0250:	2301      	movs	r3, #1
 80a0252:	6093      	str	r3, [r2, #8]
                off[3] = 15;                                    //
 80a0254:	230f      	movs	r3, #15
            }
            break;
        case 2:                                         //L-Shape
            if(orientation == 0){                           //Horizontal orientation, middle of l is origin
                off[0] = -1;                                    //
                off[1] = 0;                                     //
 80a0256:	6051      	str	r1, [r2, #4]
                off[2] = 1;                                     //
                off[3] = 15;                                    //
 80a0258:	60d3      	str	r3, [r2, #12]
 80a025a:	4770      	bx	lr
            }
            else if(orientation == 1){
 80a025c:	2901      	cmp	r1, #1
 80a025e:	d105      	bne.n	80a026c <_Z9loadPieceiiPi+0x68>
                off[0] = -17;
 80a0260:	f06f 0310 	mvn.w	r3, #16
 80a0264:	6013      	str	r3, [r2, #0]
                off[1] = -16;
 80a0266:	f06f 030f 	mvn.w	r3, #15
 80a026a:	e034      	b.n	80a02d6 <_Z9loadPieceiiPi+0xd2>
                off[2] = 0;
                off[3] = 16;
            }
            else if(orientation == 2){
 80a026c:	2902      	cmp	r1, #2
 80a026e:	f04f 0300 	mov.w	r3, #0
 80a0272:	d109      	bne.n	80a0288 <_Z9loadPieceiiPi+0x84>
                off[0] = -1;
 80a0274:	f04f 31ff 	mov.w	r1, #4294967295
                off[1] = 0;
 80a0278:	e882 000a 	stmia.w	r2, {r1, r3}
                off[2] = 1;
 80a027c:	2301      	movs	r3, #1
 80a027e:	6093      	str	r3, [r2, #8]
                off[3] = -15;
 80a0280:	f06f 030e 	mvn.w	r3, #14
 80a0284:	60d3      	str	r3, [r2, #12]
 80a0286:	4770      	bx	lr
            }
            else{                                       //Vertical Orientation
                off[0] = -16;
 80a0288:	f06f 010f 	mvn.w	r1, #15
 80a028c:	6011      	str	r1, [r2, #0]
                off[1] = 0;
 80a028e:	6053      	str	r3, [r2, #4]
                off[2] = 16;
 80a0290:	2310      	movs	r3, #16
 80a0292:	6093      	str	r3, [r2, #8]
                off[3] = 17;
 80a0294:	2311      	movs	r3, #17
 80a0296:	60d3      	str	r3, [r2, #12]
 80a0298:	4770      	bx	lr
            }
            break;
        case 3:                                         //Reverse-L
            if(orientation == 0){                       //Horizontal orientation, middle of l is origin
 80a029a:	b941      	cbnz	r1, 80a02ae <_Z9loadPieceiiPi+0xaa>
                off[0] = -1;
 80a029c:	f04f 33ff 	mov.w	r3, #4294967295
 80a02a0:	6013      	str	r3, [r2, #0]
                off[1] = 0;
                off[2] = 1;
 80a02a2:	2301      	movs	r3, #1
 80a02a4:	6093      	str	r3, [r2, #8]
                off[3] = 17;
 80a02a6:	2311      	movs	r3, #17
            }
            break;
        case 3:                                         //Reverse-L
            if(orientation == 0){                       //Horizontal orientation, middle of l is origin
                off[0] = -1;
                off[1] = 0;
 80a02a8:	6051      	str	r1, [r2, #4]
                off[2] = 1;
                off[3] = 17;
 80a02aa:	60d3      	str	r3, [r2, #12]
 80a02ac:	4770      	bx	lr
            }
            else if(orientation == 1){
 80a02ae:	2901      	cmp	r1, #1
 80a02b0:	d104      	bne.n	80a02bc <_Z9loadPieceiiPi+0xb8>
                off[0] = -16;
 80a02b2:	f06f 030f 	mvn.w	r3, #15
 80a02b6:	6013      	str	r3, [r2, #0]
                off[1] = 0;
 80a02b8:	2300      	movs	r3, #0
 80a02ba:	e031      	b.n	80a0320 <_Z9loadPieceiiPi+0x11c>
                off[2] = 16;
                off[3] = 15;
            }
            else if(orientation == 2){
 80a02bc:	2902      	cmp	r1, #2
 80a02be:	d105      	bne.n	80a02cc <_Z9loadPieceiiPi+0xc8>
                off[0] = -17;
 80a02c0:	f06f 0310 	mvn.w	r3, #16
 80a02c4:	6013      	str	r3, [r2, #0]
                off[1] = -1;
 80a02c6:	f04f 33ff 	mov.w	r3, #4294967295
 80a02ca:	e064      	b.n	80a0396 <_Z9loadPieceiiPi+0x192>
                off[2] = 0;
                off[3] = 1;
            }
            else{                                       //Vertical Orientation
                off[0] = -16;
 80a02cc:	f06f 030f 	mvn.w	r3, #15
 80a02d0:	6013      	str	r3, [r2, #0]
                off[1] = -15;
 80a02d2:	f06f 030e 	mvn.w	r3, #14
 80a02d6:	6053      	str	r3, [r2, #4]
                off[2] = 0;
 80a02d8:	2300      	movs	r3, #0
 80a02da:	6093      	str	r3, [r2, #8]
                off[3] = 16;
 80a02dc:	2310      	movs	r3, #16
 80a02de:	60d3      	str	r3, [r2, #12]
 80a02e0:	4770      	bx	lr
            }
            break;
        case 4:                                         //T-Shape
            if(orientation == 0){                       
 80a02e2:	b941      	cbnz	r1, 80a02f6 <_Z9loadPieceiiPi+0xf2>
                off[0] = -1;
 80a02e4:	f04f 33ff 	mov.w	r3, #4294967295
 80a02e8:	6013      	str	r3, [r2, #0]
                off[1] = 0;
                off[2] = 1;
 80a02ea:	2301      	movs	r3, #1
 80a02ec:	6093      	str	r3, [r2, #8]
                off[3] = 16;
 80a02ee:	2310      	movs	r3, #16
            }
            break;
        case 4:                                         //T-Shape
            if(orientation == 0){                       
                off[0] = -1;
                off[1] = 0;
 80a02f0:	6051      	str	r1, [r2, #4]
                off[2] = 1;
                off[3] = 16;
 80a02f2:	60d3      	str	r3, [r2, #12]
 80a02f4:	4770      	bx	lr
 80a02f6:	f06f 030f 	mvn.w	r3, #15
            }
            else if(orientation == 1){
 80a02fa:	2901      	cmp	r1, #1
                off[0] = -16;
 80a02fc:	6013      	str	r3, [r2, #0]
                off[0] = -1;
                off[1] = 0;
                off[2] = 1;
                off[3] = 16;
            }
            else if(orientation == 1){
 80a02fe:	d107      	bne.n	80a0310 <_Z9loadPieceiiPi+0x10c>
                off[0] = -16;
                off[1] = 0;
 80a0300:	2300      	movs	r3, #0
 80a0302:	6053      	str	r3, [r2, #4]
                off[2] = -1;
 80a0304:	f04f 33ff 	mov.w	r3, #4294967295
 80a0308:	6093      	str	r3, [r2, #8]
                off[3] = 16;
 80a030a:	2310      	movs	r3, #16
 80a030c:	60d3      	str	r3, [r2, #12]
 80a030e:	4770      	bx	lr
            }
            else if(orientation == 2){
 80a0310:	2902      	cmp	r1, #2
 80a0312:	d049      	beq.n	80a03a8 <_Z9loadPieceiiPi+0x1a4>
                off[2] = 1;
                off[3] = 16;
            }
            else{                                       //Vertical Orientation
                off[0] = -16;
                off[1] = -1;
 80a0314:	f04f 33ff 	mov.w	r3, #4294967295
 80a0318:	e03d      	b.n	80a0396 <_Z9loadPieceiiPi+0x192>
                off[2] = 0;
                off[3] = 1;
            }
            break;
        case 5:                                         //S-zig-zag
            if(orientation == 0){                       //Horizontal orientation, middle of l is origin
 80a031a:	b939      	cbnz	r1, 80a032c <_Z9loadPieceiiPi+0x128>
                off[0] = 0;
 80a031c:	6011      	str	r1, [r2, #0]
                off[1] = 1;
 80a031e:	2301      	movs	r3, #1
 80a0320:	6053      	str	r3, [r2, #4]
                off[2] = 16;
 80a0322:	2310      	movs	r3, #16
 80a0324:	6093      	str	r3, [r2, #8]
                off[3] = 15;
 80a0326:	230f      	movs	r3, #15
 80a0328:	60d3      	str	r3, [r2, #12]
 80a032a:	4770      	bx	lr
            }
            else if(orientation == 1){
 80a032c:	2901      	cmp	r1, #1
 80a032e:	d105      	bne.n	80a033c <_Z9loadPieceiiPi+0x138>
                off[0] = -17;
 80a0330:	f06f 0310 	mvn.w	r3, #16
 80a0334:	6013      	str	r3, [r2, #0]
                off[1] = -1;
 80a0336:	f04f 33ff 	mov.w	r3, #4294967295
 80a033a:	e7cc      	b.n	80a02d6 <_Z9loadPieceiiPi+0xd2>
 80a033c:	f06f 030f 	mvn.w	r3, #15
                off[2] = 0;
                off[3] = 16;
            }
            else if(orientation == 2){
 80a0340:	2902      	cmp	r1, #2
                off[0] = -16;
 80a0342:	6013      	str	r3, [r2, #0]
                off[0] = -17;
                off[1] = -1;
                off[2] = 0;
                off[3] = 16;
            }
            else if(orientation == 2){
 80a0344:	d108      	bne.n	80a0358 <_Z9loadPieceiiPi+0x154>
                off[0] = -16;
                off[1] = -15;
 80a0346:	f06f 030e 	mvn.w	r3, #14
 80a034a:	6053      	str	r3, [r2, #4]
                off[2] = 0;
 80a034c:	2300      	movs	r3, #0
 80a034e:	6093      	str	r3, [r2, #8]
                off[3] = -1;
 80a0350:	f04f 33ff 	mov.w	r3, #4294967295
 80a0354:	60d3      	str	r3, [r2, #12]
 80a0356:	4770      	bx	lr
            }
            else{                                       //Vertical Orientation
                off[0] = -16;
                off[1] = 0;
 80a0358:	2300      	movs	r3, #0
 80a035a:	6053      	str	r3, [r2, #4]
                off[2] = 1;
 80a035c:	2301      	movs	r3, #1
 80a035e:	6093      	str	r3, [r2, #8]
                off[3] = 17;
 80a0360:	2311      	movs	r3, #17
 80a0362:	60d3      	str	r3, [r2, #12]
 80a0364:	4770      	bx	lr
            }
            break;
        case 6:                                         //Z-zig-zag
            if(orientation == 0){                       //Horizontal orientation, middle of l is origin
 80a0366:	b919      	cbnz	r1, 80a0370 <_Z9loadPieceiiPi+0x16c>
                off[0] = 0;
 80a0368:	6011      	str	r1, [r2, #0]
                off[1] = -1;
 80a036a:	f04f 33ff 	mov.w	r3, #4294967295
 80a036e:	e78e      	b.n	80a028e <_Z9loadPieceiiPi+0x8a>
                off[2] = 16;
                off[3] = 17;
            }
            else if(orientation == 1){
 80a0370:	2901      	cmp	r1, #1
 80a0372:	d109      	bne.n	80a0388 <_Z9loadPieceiiPi+0x184>
                off[0] = -16;
                off[1] = -1;
                off[2] = 0;
                off[3] = 15;
 80a0374:	f06f 000f 	mvn.w	r0, #15
 80a0378:	f04f 31ff 	mov.w	r1, #4294967295
 80a037c:	2300      	movs	r3, #0
 80a037e:	f04f 0c0f 	mov.w	ip, #15
 80a0382:	e882 100b 	stmia.w	r2, {r0, r1, r3, ip}
 80a0386:	4770      	bx	lr
            }
            else if(orientation == 2){
 80a0388:	2902      	cmp	r1, #2
 80a038a:	d10a      	bne.n	80a03a2 <_Z9loadPieceiiPi+0x19e>
                off[0] = -17;
 80a038c:	f06f 0310 	mvn.w	r3, #16
 80a0390:	6013      	str	r3, [r2, #0]
                off[1] = -16;
 80a0392:	f06f 030f 	mvn.w	r3, #15
 80a0396:	6053      	str	r3, [r2, #4]
                off[2] = 0;
 80a0398:	2300      	movs	r3, #0
 80a039a:	6093      	str	r3, [r2, #8]
                off[3] = 1;
 80a039c:	2301      	movs	r3, #1
 80a039e:	60d3      	str	r3, [r2, #12]
 80a03a0:	4770      	bx	lr
            }
            else{                                       //Vertical Orientation
                off[0] = -15;
 80a03a2:	f06f 030e 	mvn.w	r3, #14
 80a03a6:	6013      	str	r3, [r2, #0]
                off[1] = 0;
 80a03a8:	2300      	movs	r3, #0
 80a03aa:	6053      	str	r3, [r2, #4]
                off[2] = 1;
 80a03ac:	2301      	movs	r3, #1
 80a03ae:	6093      	str	r3, [r2, #8]
                off[3] = 16;
 80a03b0:	2310      	movs	r3, #16
 80a03b2:	60d3      	str	r3, [r2, #12]
 80a03b4:	4770      	bx	lr
	...

080a03b8 <_Z13getPieceColoriii>:
    }
    
}

int getPieceColor(int pid, int level, int brtlvl){
    switch (pid)
 80a03b8:	2806      	cmp	r0, #6
 80a03ba:	d83f      	bhi.n	80a043c <_Z13getPieceColoriii+0x84>
 80a03bc:	e8df f000 	tbb	[pc, r0]
 80a03c0:	180e0704 	.word	0x180e0704
 80a03c4:	2725      	.short	0x2725
 80a03c6:	31          	.byte	0x31
 80a03c7:	00          	.byte	0x00
    {
        case 0:
            return (1000000000+brtlvl);
 80a03c8:	481d      	ldr	r0, [pc, #116]	; (80a0440 <_Z13getPieceColoriii+0x88>)
 80a03ca:	4410      	add	r0, r2
 80a03cc:	4770      	bx	lr
            break;
        case 1:
            return (1000000000+brtlvl+(1000*brtlvl));
 80a03ce:	481c      	ldr	r0, [pc, #112]	; (80a0440 <_Z13getPieceColoriii+0x88>)
 80a03d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a03d4:	4410      	add	r0, r2
 80a03d6:	fb03 0002 	mla	r0, r3, r2, r0
 80a03da:	4770      	bx	lr
            break;
        case 2:
            return (1000000000+brtlvl+(1000*(brtlvl/2)));
 80a03dc:	2002      	movs	r0, #2
 80a03de:	fb92 f3f0 	sdiv	r3, r2, r0
 80a03e2:	4917      	ldr	r1, [pc, #92]	; (80a0440 <_Z13getPieceColoriii+0x88>)
 80a03e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a03e8:	4411      	add	r1, r2
 80a03ea:	fb00 1003 	mla	r0, r0, r3, r1
 80a03ee:	4770      	bx	lr
            break;
        case 3:
            return (1000000000+(brtlvl/2)+(1000*(brtlvl/5)));
 80a03f0:	2302      	movs	r3, #2
 80a03f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80a03f6:	4912      	ldr	r1, [pc, #72]	; (80a0440 <_Z13getPieceColoriii+0x88>)
 80a03f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a03fc:	4419      	add	r1, r3
 80a03fe:	2305      	movs	r3, #5
 80a0400:	fb92 f2f3 	sdiv	r2, r2, r3
 80a0404:	fb00 1002 	mla	r0, r0, r2, r1
 80a0408:	4770      	bx	lr
            break;    
        case 4:
            return (1000000000+(brtlvl/2)+(1000*brtlvl));
 80a040a:	2302      	movs	r3, #2
 80a040c:	e000      	b.n	80a0410 <_Z13getPieceColoriii+0x58>
            break; 
        case 5:
            return (1000000000+(brtlvl/5)+(1000*brtlvl));
 80a040e:	2305      	movs	r3, #5
 80a0410:	fb92 f3f3 	sdiv	r3, r2, r3
 80a0414:	480a      	ldr	r0, [pc, #40]	; (80a0440 <_Z13getPieceColoriii+0x88>)
 80a0416:	4418      	add	r0, r3
 80a0418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a041c:	fb03 0002 	mla	r0, r3, r2, r0
 80a0420:	4770      	bx	lr
            break; 
        case 6:
            return (1000000000+(brtlvl/3)+(1000*(brtlvl/3))+(1000000*(brtlvl/3)));
 80a0422:	2003      	movs	r0, #3
 80a0424:	fb92 f2f0 	sdiv	r2, r2, r0
 80a0428:	4805      	ldr	r0, [pc, #20]	; (80a0440 <_Z13getPieceColoriii+0x88>)
 80a042a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a042e:	4410      	add	r0, r2
 80a0430:	fb03 0002 	mla	r0, r3, r2, r0
 80a0434:	4b03      	ldr	r3, [pc, #12]	; (80a0444 <_Z13getPieceColoriii+0x8c>)
 80a0436:	fb03 0002 	mla	r0, r3, r2, r0
 80a043a:	4770      	bx	lr
            break; 
    }
}
 80a043c:	4770      	bx	lr
 80a043e:	bf00      	nop
 80a0440:	3b9aca00 	.word	0x3b9aca00
 80a0444:	000f4240 	.word	0x000f4240

080a0448 <_Z11isSpotLegaliiiPi>:

bool canShiftPiece(int currSpot, int direction, int pid, int orientation, int pieceColor, int* userBoard){
    return true;
}

bool isSpotLegal(int newSpot, int pid, int orientation, int* userBoard){      //Function to test if a new configuration is a legal change in the board, returns true if legal
 80a0448:	b530      	push	{r4, r5, lr}
 80a044a:	b085      	sub	sp, #20
 80a044c:	4604      	mov	r4, r0
 80a044e:	4608      	mov	r0, r1
 80a0450:	4611      	mov	r1, r2
    int tempPiece[4];                                                               //Temporary array to hold piece configuration offsets
    loadPiece(pid, orientation, tempPiece);                                        //Populate array with offsets
 80a0452:	466a      	mov	r2, sp

bool canShiftPiece(int currSpot, int direction, int pid, int orientation, int pieceColor, int* userBoard){
    return true;
}

bool isSpotLegal(int newSpot, int pid, int orientation, int* userBoard){      //Function to test if a new configuration is a legal change in the board, returns true if legal
 80a0454:	461d      	mov	r5, r3
    int tempPiece[4];                                                               //Temporary array to hold piece configuration offsets
    loadPiece(pid, orientation, tempPiece);                                        //Populate array with offsets
 80a0456:	f7ff fed5 	bl	80a0204 <_Z9loadPieceiiPi>
    int tempMax = tempPiece[0];
 80a045a:	9a00      	ldr	r2, [sp, #0]
 80a045c:	2100      	movs	r1, #0
    int tempMin = tempPiece[0];
 80a045e:	4610      	mov	r0, r2
    for(i = 0; i < 4; i++){
        if(tempPiece[i] > tempMax){
 80a0460:	f85d 3021 	ldr.w	r3, [sp, r1, lsl #2]
bool isSpotLegal(int newSpot, int pid, int orientation, int* userBoard){      //Function to test if a new configuration is a legal change in the board, returns true if legal
    int tempPiece[4];                                                               //Temporary array to hold piece configuration offsets
    loadPiece(pid, orientation, tempPiece);                                        //Populate array with offsets
    int tempMax = tempPiece[0];
    int tempMin = tempPiece[0];
    for(i = 0; i < 4; i++){
 80a0464:	3101      	adds	r1, #1
 80a0466:	429a      	cmp	r2, r3
 80a0468:	bfb8      	it	lt
 80a046a:	461a      	movlt	r2, r3
 80a046c:	4298      	cmp	r0, r3
 80a046e:	bfa8      	it	ge
 80a0470:	4618      	movge	r0, r3
 80a0472:	2904      	cmp	r1, #4
 80a0474:	d1f4      	bne.n	80a0460 <_Z11isSpotLegaliiiPi+0x18>
 80a0476:	4b0b      	ldr	r3, [pc, #44]	; (80a04a4 <_Z11isSpotLegaliiiPi+0x5c>)
        }
        if(tempPiece[i] < tempMin){
            tempMin = tempPiece[i];
        }
    }
    if(newSpot + tempMax > 255 || newSpot + tempMin < 0){
 80a0478:	4422      	add	r2, r4
 80a047a:	2aff      	cmp	r2, #255	; 0xff
 80a047c:	6019      	str	r1, [r3, #0]
 80a047e:	dc0e      	bgt.n	80a049e <_Z11isSpotLegaliiiPi+0x56>
 80a0480:	42c4      	cmn	r4, r0
 80a0482:	d40c      	bmi.n	80a049e <_Z11isSpotLegaliiiPi+0x56>
 80a0484:	2200      	movs	r2, #0
        return false;
    }
    for(int i = 0; i < 4; i++){                                                     //Loop through each offset
        if(userBoard[newSpot + tempPiece[i]] > 0){                                      //Check if location is already occupied
 80a0486:	f85d 1022 	ldr.w	r1, [sp, r2, lsl #2]
 80a048a:	4421      	add	r1, r4
 80a048c:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 80a0490:	2b00      	cmp	r3, #0
 80a0492:	dc04      	bgt.n	80a049e <_Z11isSpotLegaliiiPi+0x56>
        }
    }
    if(newSpot + tempMax > 255 || newSpot + tempMin < 0){
        return false;
    }
    for(int i = 0; i < 4; i++){                                                     //Loop through each offset
 80a0494:	3201      	adds	r2, #1
 80a0496:	2a04      	cmp	r2, #4
 80a0498:	d1f5      	bne.n	80a0486 <_Z11isSpotLegaliiiPi+0x3e>
        if(userBoard[newSpot + tempPiece[i]] > 0){                                      //Check if location is already occupied
            return false;                                                                   //If any parts are occupied, then new location is not legal
        }
    }
    return true;
 80a049a:	2001      	movs	r0, #1
 80a049c:	e000      	b.n	80a04a0 <_Z11isSpotLegaliiiPi+0x58>
        if(tempPiece[i] < tempMin){
            tempMin = tempPiece[i];
        }
    }
    if(newSpot + tempMax > 255 || newSpot + tempMin < 0){
        return false;
 80a049e:	2000      	movs	r0, #0
        if(userBoard[newSpot + tempPiece[i]] > 0){                                      //Check if location is already occupied
            return false;                                                                   //If any parts are occupied, then new location is not legal
        }
    }
    return true;
}
 80a04a0:	b005      	add	sp, #20
 80a04a2:	bd30      	pop	{r4, r5, pc}
 80a04a4:	2000006c 	.word	0x2000006c

080a04a8 <_Z10placePieceiiiPi>:
            }
            break;
    }
}

bool placePiece(int newSpot, int pid, int pieceColor, int* userBoard){
 80a04a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a04aa:	460f      	mov	r7, r1
 80a04ac:	4605      	mov	r5, r0
 80a04ae:	461c      	mov	r4, r3
 80a04b0:	b085      	sub	sp, #20
    int tempPiece[4];
    loadPiece(pid, 0, tempPiece);
 80a04b2:	2100      	movs	r1, #0
 80a04b4:	4638      	mov	r0, r7
            }
            break;
    }
}

bool placePiece(int newSpot, int pid, int pieceColor, int* userBoard){
 80a04b6:	4616      	mov	r6, r2
    int tempPiece[4];
    loadPiece(pid, 0, tempPiece);
 80a04b8:	466a      	mov	r2, sp
 80a04ba:	f7ff fea3 	bl	80a0204 <_Z9loadPieceiiPi>
    if(isSpotLegal(newSpot, pid, 0, userBoard)){
 80a04be:	4623      	mov	r3, r4
 80a04c0:	2200      	movs	r2, #0
 80a04c2:	4639      	mov	r1, r7
 80a04c4:	4628      	mov	r0, r5
 80a04c6:	f7ff ffbf 	bl	80a0448 <_Z11isSpotLegaliiiPi>
 80a04ca:	b148      	cbz	r0, 80a04e0 <_Z10placePieceiiiPi+0x38>
 80a04cc:	2300      	movs	r3, #0
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a04ce:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]

bool placePiece(int newSpot, int pid, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, 0, tempPiece);
    if(isSpotLegal(newSpot, pid, 0, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a04d2:	3301      	adds	r3, #1
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a04d4:	442a      	add	r2, r5

bool placePiece(int newSpot, int pid, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, 0, tempPiece);
    if(isSpotLegal(newSpot, pid, 0, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a04d6:	2b04      	cmp	r3, #4
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a04d8:	f844 6022 	str.w	r6, [r4, r2, lsl #2]

bool placePiece(int newSpot, int pid, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, 0, tempPiece);
    if(isSpotLegal(newSpot, pid, 0, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a04dc:	d1f7      	bne.n	80a04ce <_Z10placePieceiiiPi+0x26>
 80a04de:	e008      	b.n	80a04f2 <_Z10placePieceiiiPi+0x4a>
 80a04e0:	4603      	mov	r3, r0
        }
        return true;
    }
    else{
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a04e2:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
            userBoard[newSpot+tempPiece[i]] = pieceColor;
        }
        return true;
    }
    else{
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a04e6:	3301      	adds	r3, #1
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a04e8:	442a      	add	r2, r5
            userBoard[newSpot+tempPiece[i]] = pieceColor;
        }
        return true;
    }
    else{
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a04ea:	2b04      	cmp	r3, #4
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a04ec:	f844 6022 	str.w	r6, [r4, r2, lsl #2]
            userBoard[newSpot+tempPiece[i]] = pieceColor;
        }
        return true;
    }
    else{
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a04f0:	d1f7      	bne.n	80a04e2 <_Z10placePieceiiiPi+0x3a>
            userBoard[newSpot+tempPiece[i]] = pieceColor;
        }
        return false;
    }
    
}
 80a04f2:	b005      	add	sp, #20
 80a04f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a04f6 <_Z11rotatePieceiiPiiiS_>:
            }
    }
    return false;
}

void rotatePiece(int currSpot, int pid, int* currOrientation, int newOrientation, int pieceColor, int* userBoard){
 80a04f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a04fa:	460f      	mov	r7, r1
 80a04fc:	4690      	mov	r8, r2
 80a04fe:	4606      	mov	r6, r0
    int tempPiece[4];
    loadPiece(pid, *currOrientation, tempPiece);
 80a0500:	f8d8 1000 	ldr.w	r1, [r8]
 80a0504:	466a      	mov	r2, sp
 80a0506:	4638      	mov	r0, r7
            }
    }
    return false;
}

void rotatePiece(int currSpot, int pid, int* currOrientation, int newOrientation, int pieceColor, int* userBoard){
 80a0508:	469a      	mov	sl, r3
 80a050a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80a050e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int tempPiece[4];
    loadPiece(pid, *currOrientation, tempPiece);
 80a0510:	f7ff fe78 	bl	80a0204 <_Z9loadPieceiiPi>
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0514:	2300      	movs	r3, #0
        userBoard[currSpot+tempPiece[i]] = 0;
 80a0516:	4619      	mov	r1, r3
 80a0518:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
}

void rotatePiece(int currSpot, int pid, int* currOrientation, int newOrientation, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, *currOrientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a051c:	3301      	adds	r3, #1
        userBoard[currSpot+tempPiece[i]] = 0;
 80a051e:	4432      	add	r2, r6
}

void rotatePiece(int currSpot, int pid, int* currOrientation, int newOrientation, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, *currOrientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0520:	2b04      	cmp	r3, #4
        userBoard[currSpot+tempPiece[i]] = 0;
 80a0522:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}

void rotatePiece(int currSpot, int pid, int* currOrientation, int newOrientation, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, *currOrientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0526:	d1f7      	bne.n	80a0518 <_Z11rotatePieceiiPiiiS_+0x22>
        userBoard[currSpot+tempPiece[i]] = 0;
    }
    loadPiece(pid, newOrientation, tempPiece);
 80a0528:	466a      	mov	r2, sp
 80a052a:	4651      	mov	r1, sl
 80a052c:	4638      	mov	r0, r7
 80a052e:	f7ff fe69 	bl	80a0204 <_Z9loadPieceiiPi>
    if(isSpotLegal(currSpot, pid, newOrientation, userBoard)){
 80a0532:	462b      	mov	r3, r5
 80a0534:	4652      	mov	r2, sl
 80a0536:	4639      	mov	r1, r7
 80a0538:	4630      	mov	r0, r6
 80a053a:	f7ff ff85 	bl	80a0448 <_Z11isSpotLegaliiiPi>
 80a053e:	4604      	mov	r4, r0
 80a0540:	b158      	cbz	r0, 80a055a <_Z11rotatePieceiiPiiiS_+0x64>
 80a0542:	2300      	movs	r3, #0
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new rotation of the piece
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a0544:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    for(int i = 0; i < 4; i++){                                             //Erase current color value
        userBoard[currSpot+tempPiece[i]] = 0;
    }
    loadPiece(pid, newOrientation, tempPiece);
    if(isSpotLegal(currSpot, pid, newOrientation, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new rotation of the piece
 80a0548:	3301      	adds	r3, #1
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a054a:	4432      	add	r2, r6
    for(int i = 0; i < 4; i++){                                             //Erase current color value
        userBoard[currSpot+tempPiece[i]] = 0;
    }
    loadPiece(pid, newOrientation, tempPiece);
    if(isSpotLegal(currSpot, pid, newOrientation, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new rotation of the piece
 80a054c:	2b04      	cmp	r3, #4
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a054e:	f845 9022 	str.w	r9, [r5, r2, lsl #2]
    for(int i = 0; i < 4; i++){                                             //Erase current color value
        userBoard[currSpot+tempPiece[i]] = 0;
    }
    loadPiece(pid, newOrientation, tempPiece);
    if(isSpotLegal(currSpot, pid, newOrientation, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new rotation of the piece
 80a0552:	d1f7      	bne.n	80a0544 <_Z11rotatePieceiiPiiiS_+0x4e>
            userBoard[currSpot+tempPiece[i]] = pieceColor;
        }
        *currOrientation = newOrientation;
 80a0554:	f8c8 a000 	str.w	sl, [r8]
        return;
 80a0558:	e00e      	b.n	80a0578 <_Z11rotatePieceiiPiiiS_+0x82>
    }
    else{
        loadPiece(pid, *currOrientation, tempPiece);
 80a055a:	4638      	mov	r0, r7
 80a055c:	466a      	mov	r2, sp
 80a055e:	f8d8 1000 	ldr.w	r1, [r8]
 80a0562:	f7ff fe4f 	bl	80a0204 <_Z9loadPieceiiPi>
        for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0566:	4620      	mov	r0, r4
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a0568:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
        *currOrientation = newOrientation;
        return;
    }
    else{
        loadPiece(pid, *currOrientation, tempPiece);
        for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a056c:	3001      	adds	r0, #1
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a056e:	4433      	add	r3, r6
        *currOrientation = newOrientation;
        return;
    }
    else{
        loadPiece(pid, *currOrientation, tempPiece);
        for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0570:	2804      	cmp	r0, #4
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a0572:	f845 9023 	str.w	r9, [r5, r3, lsl #2]
        *currOrientation = newOrientation;
        return;
    }
    else{
        loadPiece(pid, *currOrientation, tempPiece);
        for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0576:	d1f7      	bne.n	80a0568 <_Z11rotatePieceiiPiiiS_+0x72>
            userBoard[currSpot+tempPiece[i]] = pieceColor;
        }
        return;
    }
}
 80a0578:	b004      	add	sp, #16
 80a057a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a057e <_Z13shiftRowsDowniiiPi>:
    }
}

void shiftRowsDown(int emptyRow, int numRows, int numColumns, int* userBoard){        //Fucntion to shift all rows above emptyRow down 1
    int i;
    for(i = emptyRow*numColumns+numColumns-1; i >= numColumns; i--){            
 80a057e:	fb00 2002 	mla	r0, r0, r2, r2
 80a0582:	1e41      	subs	r1, r0, #1
 80a0584:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80a0588:	4291      	cmp	r1, r2
 80a058a:	f1a3 0304 	sub.w	r3, r3, #4
 80a058e:	db04      	blt.n	80a059a <_Z13shiftRowsDowniiiPi+0x1c>
        userBoard[i] = userBoard[i-16];
 80a0590:	f853 0c40 	ldr.w	r0, [r3, #-64]
    }
}

void shiftRowsDown(int emptyRow, int numRows, int numColumns, int* userBoard){        //Fucntion to shift all rows above emptyRow down 1
    int i;
    for(i = emptyRow*numColumns+numColumns-1; i >= numColumns; i--){            
 80a0594:	3901      	subs	r1, #1
        userBoard[i] = userBoard[i-16];
 80a0596:	6018      	str	r0, [r3, #0]
    }
}

void shiftRowsDown(int emptyRow, int numRows, int numColumns, int* userBoard){        //Fucntion to shift all rows above emptyRow down 1
    int i;
    for(i = emptyRow*numColumns+numColumns-1; i >= numColumns; i--){            
 80a0598:	e7f6      	b.n	80a0588 <_Z13shiftRowsDowniiiPi+0xa>
 80a059a:	4770      	bx	lr

080a059c <_Z12checkForRowsiiPi>:
        }
    }
    return true;
}

void checkForRows(int numRows, int numColumns, int* userBoard){               //Function to scan for any complete rows that need to be erased per game rules
 80a059c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int i;                                                                      //i and j are multipurpose loop variables
    int j;  
    for(i = 0; i < numRows; i++){                                               //Loop for each row of board
 80a05a0:	2400      	movs	r4, #0
        }
    }
    return true;
}

void checkForRows(int numRows, int numColumns, int* userBoard){               //Function to scan for any complete rows that need to be erased per game rules
 80a05a2:	4605      	mov	r5, r0
 80a05a4:	4688      	mov	r8, r1
 80a05a6:	4617      	mov	r7, r2
 80a05a8:	4616      	mov	r6, r2
                isEqual = false;
            }
        }
        if(isEqual){                                                                    //If there is a complete row, erase it and call the function to shift rows down
            for(j = 0; j < numRows; j++){
                userBoard[j+i*numColumns] = 0;
 80a05aa:	46a2      	mov	sl, r4
 80a05ac:	ea4f 0981 	mov.w	r9, r1, lsl #2
}

void checkForRows(int numRows, int numColumns, int* userBoard){               //Function to scan for any complete rows that need to be erased per game rules
    int i;                                                                      //i and j are multipurpose loop variables
    int j;  
    for(i = 0; i < numRows; i++){                                               //Loop for each row of board
 80a05b0:	42ac      	cmp	r4, r5
 80a05b2:	da1d      	bge.n	80a05f0 <_Z12checkForRowsiiPi+0x54>
 80a05b4:	eb07 1084 	add.w	r0, r7, r4, lsl #6
 80a05b8:	2201      	movs	r2, #1
 80a05ba:	2300      	movs	r3, #0
        bool isEqual = true;                                                            //Set bool variable to check each row, gets set false if there is an empty space
        for(j = 0; j < numRows; j++){
 80a05bc:	42ab      	cmp	r3, r5
 80a05be:	da06      	bge.n	80a05ce <_Z12checkForRowsiiPi+0x32>
            if(userBoard[j+i*16] == 0){                                                          //If any spots are empty, then row is not complete
 80a05c0:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
void checkForRows(int numRows, int numColumns, int* userBoard){               //Function to scan for any complete rows that need to be erased per game rules
    int i;                                                                      //i and j are multipurpose loop variables
    int j;  
    for(i = 0; i < numRows; i++){                                               //Loop for each row of board
        bool isEqual = true;                                                            //Set bool variable to check each row, gets set false if there is an empty space
        for(j = 0; j < numRows; j++){
 80a05c4:	3301      	adds	r3, #1
            if(userBoard[j+i*16] == 0){                                                          //If any spots are empty, then row is not complete
                isEqual = false;
 80a05c6:	2900      	cmp	r1, #0
 80a05c8:	bf08      	it	eq
 80a05ca:	2200      	moveq	r2, #0
void checkForRows(int numRows, int numColumns, int* userBoard){               //Function to scan for any complete rows that need to be erased per game rules
    int i;                                                                      //i and j are multipurpose loop variables
    int j;  
    for(i = 0; i < numRows; i++){                                               //Loop for each row of board
        bool isEqual = true;                                                            //Set bool variable to check each row, gets set false if there is an empty space
        for(j = 0; j < numRows; j++){
 80a05cc:	e7f6      	b.n	80a05bc <_Z12checkForRowsiiPi+0x20>
            if(userBoard[j+i*16] == 0){                                                          //If any spots are empty, then row is not complete
                isEqual = false;
            }
        }
        if(isEqual){                                                                    //If there is a complete row, erase it and call the function to shift rows down
 80a05ce:	b162      	cbz	r2, 80a05ea <_Z12checkForRowsiiPi+0x4e>
 80a05d0:	2300      	movs	r3, #0
            for(j = 0; j < numRows; j++){
 80a05d2:	42ab      	cmp	r3, r5
 80a05d4:	da03      	bge.n	80a05de <_Z12checkForRowsiiPi+0x42>
                userBoard[j+i*numColumns] = 0;
 80a05d6:	f846 a023 	str.w	sl, [r6, r3, lsl #2]
            if(userBoard[j+i*16] == 0){                                                          //If any spots are empty, then row is not complete
                isEqual = false;
            }
        }
        if(isEqual){                                                                    //If there is a complete row, erase it and call the function to shift rows down
            for(j = 0; j < numRows; j++){
 80a05da:	3301      	adds	r3, #1
 80a05dc:	e7f9      	b.n	80a05d2 <_Z12checkForRowsiiPi+0x36>
                userBoard[j+i*numColumns] = 0;
            }
            shiftRowsDown(i, numRows, numColumns, userBoard);
 80a05de:	463b      	mov	r3, r7
 80a05e0:	4642      	mov	r2, r8
 80a05e2:	4629      	mov	r1, r5
 80a05e4:	4620      	mov	r0, r4
 80a05e6:	f7ff ffca 	bl	80a057e <_Z13shiftRowsDowniiiPi>
}

void checkForRows(int numRows, int numColumns, int* userBoard){               //Function to scan for any complete rows that need to be erased per game rules
    int i;                                                                      //i and j are multipurpose loop variables
    int j;  
    for(i = 0; i < numRows; i++){                                               //Loop for each row of board
 80a05ea:	3401      	adds	r4, #1
 80a05ec:	444e      	add	r6, r9
 80a05ee:	e7df      	b.n	80a05b0 <_Z12checkForRowsiiPi+0x14>
 80a05f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a05f4 <_Z9movePiecePiiiiiS_>:
            return (1000000000+(brtlvl/3)+(1000*(brtlvl/3))+(1000000*(brtlvl/3)));
            break; 
    }
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int* userBoard){            //Returns true if at bottom
 80a05f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a05f8:	4690      	mov	r8, r2
 80a05fa:	b085      	sub	sp, #20
 80a05fc:	4604      	mov	r4, r0
 80a05fe:	460d      	mov	r5, r1
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
 80a0600:	466a      	mov	r2, sp
 80a0602:	4619      	mov	r1, r3
 80a0604:	4640      	mov	r0, r8
            return (1000000000+(brtlvl/3)+(1000*(brtlvl/3))+(1000000*(brtlvl/3)));
            break; 
    }
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int* userBoard){            //Returns true if at bottom
 80a0606:	4699      	mov	r9, r3
 80a0608:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80a060a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
 80a060c:	f7ff fdfa 	bl	80a0204 <_Z9loadPieceiiPi>
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0610:	2300      	movs	r3, #0
        userBoard[*currSpot+tempPiece[i]] = 0;
 80a0612:	4619      	mov	r1, r3
 80a0614:	6820      	ldr	r0, [r4, #0]
 80a0616:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int* userBoard){            //Returns true if at bottom
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a061a:	3301      	adds	r3, #1
        userBoard[*currSpot+tempPiece[i]] = 0;
 80a061c:	4402      	add	r2, r0
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int* userBoard){            //Returns true if at bottom
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a061e:	2b04      	cmp	r3, #4
        userBoard[*currSpot+tempPiece[i]] = 0;
 80a0620:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int* userBoard){            //Returns true if at bottom
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0624:	d1f6      	bne.n	80a0614 <_Z9movePiecePiiiiiS_+0x20>
        userBoard[*currSpot+tempPiece[i]] = 0;
    }
    switch (direction){
 80a0626:	2d01      	cmp	r5, #1
 80a0628:	d036      	beq.n	80a0698 <_Z9movePiecePiiiiiS_+0xa4>
 80a062a:	2d02      	cmp	r5, #2
 80a062c:	d061      	beq.n	80a06f2 <_Z9movePiecePiiiiiS_+0xfe>
 80a062e:	2d00      	cmp	r5, #0
 80a0630:	f040 808d 	bne.w	80a074e <_Z9movePiecePiiiiiS_+0x15a>
        case 0:                                                                 //Piece being moved down (automatic or not)
            if(!isSpotLegal(*currSpot+16, pid, orientation, userBoard)){              //Checks if piece is touching another piece along its bottom edge
 80a0634:	6820      	ldr	r0, [r4, #0]
 80a0636:	4633      	mov	r3, r6
 80a0638:	464a      	mov	r2, r9
 80a063a:	4641      	mov	r1, r8
 80a063c:	3010      	adds	r0, #16
 80a063e:	f7ff ff03 	bl	80a0448 <_Z11isSpotLegaliiiPi>
 80a0642:	b978      	cbnz	r0, 80a0664 <_Z9movePiecePiiiiiS_+0x70>
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a0644:	6822      	ldr	r2, [r4, #0]
 80a0646:	f85d 3025 	ldr.w	r3, [sp, r5, lsl #2]
        userBoard[*currSpot+tempPiece[i]] = 0;
    }
    switch (direction){
        case 0:                                                                 //Piece being moved down (automatic or not)
            if(!isSpotLegal(*currSpot+16, pid, orientation, userBoard)){              //Checks if piece is touching another piece along its bottom edge
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a064a:	3501      	adds	r5, #1
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a064c:	4413      	add	r3, r2
        userBoard[*currSpot+tempPiece[i]] = 0;
    }
    switch (direction){
        case 0:                                                                 //Piece being moved down (automatic or not)
            if(!isSpotLegal(*currSpot+16, pid, orientation, userBoard)){              //Checks if piece is touching another piece along its bottom edge
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a064e:	2d04      	cmp	r5, #4
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a0650:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
        userBoard[*currSpot+tempPiece[i]] = 0;
    }
    switch (direction){
        case 0:                                                                 //Piece being moved down (automatic or not)
            if(!isSpotLegal(*currSpot+16, pid, orientation, userBoard)){              //Checks if piece is touching another piece along its bottom edge
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0654:	d1f6      	bne.n	80a0644 <_Z9movePiecePiiiiiS_+0x50>
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
                }
                checkForRows(16,16,userBoard);
 80a0656:	2110      	movs	r1, #16
 80a0658:	4608      	mov	r0, r1
 80a065a:	4632      	mov	r2, r6
 80a065c:	f7ff ff9e 	bl	80a059c <_Z12checkForRowsiiPi>
                return true;                                                            //If it is touching another piece, tell caller that it can drop next piece
 80a0660:	2001      	movs	r0, #1
 80a0662:	e075      	b.n	80a0750 <_Z9movePiecePiiiiiS_+0x15c>
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a0664:	462a      	mov	r2, r5
 80a0666:	6821      	ldr	r1, [r4, #0]
 80a0668:	f85d 3025 	ldr.w	r3, [sp, r5, lsl #2]
                }
                checkForRows(16,16,userBoard);
                return true;                                                            //If it is touching another piece, tell caller that it can drop next piece
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a066c:	3501      	adds	r5, #1
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a066e:	440b      	add	r3, r1
                }
                checkForRows(16,16,userBoard);
                return true;                                                            //If it is touching another piece, tell caller that it can drop next piece
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0670:	2d04      	cmp	r5, #4
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a0672:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
                }
                checkForRows(16,16,userBoard);
                return true;                                                            //If it is touching another piece, tell caller that it can drop next piece
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0676:	d1f6      	bne.n	80a0666 <_Z9movePiecePiiiiiS_+0x72>
 80a0678:	2200      	movs	r2, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]+16] = pieceColor;
 80a067a:	6821      	ldr	r1, [r4, #0]
 80a067c:	f85d 3022 	ldr.w	r3, [sp, r2, lsl #2]
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0680:	3201      	adds	r2, #1
                    userBoard[*currSpot+tempPiece[i]+16] = pieceColor;
 80a0682:	440b      	add	r3, r1
 80a0684:	3310      	adds	r3, #16
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0686:	2a04      	cmp	r2, #4
                    userBoard[*currSpot+tempPiece[i]+16] = pieceColor;
 80a0688:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a068c:	d1f5      	bne.n	80a067a <_Z9movePiecePiiiiiS_+0x86>
                    userBoard[*currSpot+tempPiece[i]+16] = pieceColor;
                }
                *currSpot = *currSpot+ 16;
 80a068e:	6823      	ldr	r3, [r4, #0]
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
                }
                break;
            }
    }
    return false;
 80a0690:	2000      	movs	r0, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]+16] = pieceColor;
                }
                *currSpot = *currSpot+ 16;
 80a0692:	3310      	adds	r3, #16
 80a0694:	6023      	str	r3, [r4, #0]
                break;                                                          //Caller is told that piece can keep moving
 80a0696:	e05b      	b.n	80a0750 <_Z9movePiecePiiiiiS_+0x15c>
            }
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
 80a0698:	6820      	ldr	r0, [r4, #0]
 80a069a:	4633      	mov	r3, r6
 80a069c:	464a      	mov	r2, r9
 80a069e:	4641      	mov	r1, r8
 80a06a0:	3001      	adds	r0, #1
 80a06a2:	f7ff fed1 	bl	80a0448 <_Z11isSpotLegaliiiPi>
 80a06a6:	b1d0      	cbz	r0, 80a06de <_Z9movePiecePiiiiiS_+0xea>
 80a06a8:	2300      	movs	r3, #0
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a06aa:	4619      	mov	r1, r3
 80a06ac:	6820      	ldr	r0, [r4, #0]
 80a06ae:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
                *currSpot = *currSpot+ 16;
                break;                                                          //Caller is told that piece can keep moving
            }
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a06b2:	3301      	adds	r3, #1
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a06b4:	4402      	add	r2, r0
                *currSpot = *currSpot+ 16;
                break;                                                          //Caller is told that piece can keep moving
            }
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a06b6:	2b04      	cmp	r3, #4
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a06b8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
                *currSpot = *currSpot+ 16;
                break;                                                          //Caller is told that piece can keep moving
            }
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a06bc:	d1f6      	bne.n	80a06ac <_Z9movePiecePiiiiiS_+0xb8>
 80a06be:	2200      	movs	r2, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]+1] = pieceColor;
 80a06c0:	6821      	ldr	r1, [r4, #0]
 80a06c2:	f85d 3022 	ldr.w	r3, [sp, r2, lsl #2]
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a06c6:	3201      	adds	r2, #1
                    userBoard[*currSpot+tempPiece[i]+1] = pieceColor;
 80a06c8:	440b      	add	r3, r1
 80a06ca:	3301      	adds	r3, #1
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a06cc:	2a04      	cmp	r2, #4
                    userBoard[*currSpot+tempPiece[i]+1] = pieceColor;
 80a06ce:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a06d2:	d1f5      	bne.n	80a06c0 <_Z9movePiecePiiiiiS_+0xcc>
                    userBoard[*currSpot+tempPiece[i]+1] = pieceColor;
                }
                *currSpot = *currSpot+1;
 80a06d4:	6823      	ldr	r3, [r4, #0]
                return false;
 80a06d6:	2000      	movs	r0, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]+1] = pieceColor;
                }
                *currSpot = *currSpot+1;
 80a06d8:	3301      	adds	r3, #1
 80a06da:	6023      	str	r3, [r4, #0]
                return false;
 80a06dc:	e038      	b.n	80a0750 <_Z9movePiecePiiiiiS_+0x15c>
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a06de:	6822      	ldr	r2, [r4, #0]
 80a06e0:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
                }
                *currSpot = *currSpot+1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a06e4:	3001      	adds	r0, #1
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a06e6:	4413      	add	r3, r2
                }
                *currSpot = *currSpot+1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a06e8:	2804      	cmp	r0, #4
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a06ea:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
                }
                *currSpot = *currSpot+1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a06ee:	d1f6      	bne.n	80a06de <_Z9movePiecePiiiiiS_+0xea>
 80a06f0:	e02d      	b.n	80a074e <_Z9movePiecePiiiiiS_+0x15a>
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
                }
                break;
            }
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
 80a06f2:	6820      	ldr	r0, [r4, #0]
 80a06f4:	4633      	mov	r3, r6
 80a06f6:	464a      	mov	r2, r9
 80a06f8:	4641      	mov	r1, r8
 80a06fa:	3801      	subs	r0, #1
 80a06fc:	f7ff fea4 	bl	80a0448 <_Z11isSpotLegaliiiPi>
 80a0700:	b1e0      	cbz	r0, 80a073c <_Z9movePiecePiiiiiS_+0x148>
 80a0702:	2300      	movs	r3, #0
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a0704:	4619      	mov	r1, r3
 80a0706:	6820      	ldr	r0, [r4, #0]
 80a0708:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
                }
                break;
            }
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a070c:	3301      	adds	r3, #1
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a070e:	4402      	add	r2, r0
                }
                break;
            }
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0710:	2b04      	cmp	r3, #4
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a0712:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
                }
                break;
            }
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0716:	d1f6      	bne.n	80a0706 <_Z9movePiecePiiiiiS_+0x112>
 80a0718:	2200      	movs	r2, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]-1] = pieceColor;
 80a071a:	6821      	ldr	r1, [r4, #0]
 80a071c:	f85d 3022 	ldr.w	r3, [sp, r2, lsl #2]
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0720:	3201      	adds	r2, #1
                    userBoard[*currSpot+tempPiece[i]-1] = pieceColor;
 80a0722:	440b      	add	r3, r1
 80a0724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a0728:	3b01      	subs	r3, #1
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a072a:	2a04      	cmp	r2, #4
                    userBoard[*currSpot+tempPiece[i]-1] = pieceColor;
 80a072c:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0730:	d1f3      	bne.n	80a071a <_Z9movePiecePiiiiiS_+0x126>
                    userBoard[*currSpot+tempPiece[i]-1] = pieceColor;
                }
                *currSpot = *currSpot-1;
 80a0732:	6823      	ldr	r3, [r4, #0]
                return false;
 80a0734:	2000      	movs	r0, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]-1] = pieceColor;
                }
                *currSpot = *currSpot-1;
 80a0736:	3b01      	subs	r3, #1
 80a0738:	6023      	str	r3, [r4, #0]
                return false;
 80a073a:	e009      	b.n	80a0750 <_Z9movePiecePiiiiiS_+0x15c>
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a073c:	6822      	ldr	r2, [r4, #0]
 80a073e:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
                }
                *currSpot = *currSpot-1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0742:	3001      	adds	r0, #1
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a0744:	4413      	add	r3, r2
                }
                *currSpot = *currSpot-1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0746:	2804      	cmp	r0, #4
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a0748:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
                }
                *currSpot = *currSpot-1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a074c:	d1f6      	bne.n	80a073c <_Z9movePiecePiiiiiS_+0x148>
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
                }
                break;
            }
    }
    return false;
 80a074e:	2000      	movs	r0, #0
}
 80a0750:	b005      	add	sp, #20
 80a0752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080a0758 <_Z13waitForButtoniPiiS_iS_>:
    strip.show();
}
void gameDone(){
    delay(20000);
}
void waitForButton(int timeDelay, int * currSpot, int pid, int * orientation, int pieceColor, int* userBoard){
 80a0758:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int myTemp;
    for(myTemp = 0; myTemp < (timeDelay/10); myTemp++){
 80a075c:	f04f 0a0a 	mov.w	sl, #10
    strip.show();
}
void gameDone(){
    delay(20000);
}
void waitForButton(int timeDelay, int * currSpot, int pid, int * orientation, int pieceColor, int* userBoard){
 80a0760:	460e      	mov	r6, r1
 80a0762:	4617      	mov	r7, r2
 80a0764:	461d      	mov	r5, r3
    int myTemp;
    for(myTemp = 0; myTemp < (timeDelay/10); myTemp++){
 80a0766:	fb90 fafa 	sdiv	sl, r0, sl
    strip.show();
}
void gameDone(){
    delay(20000);
}
void waitForButton(int timeDelay, int * currSpot, int pid, int * orientation, int pieceColor, int* userBoard){
 80a076a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80a076e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    int myTemp;
    for(myTemp = 0; myTemp < (timeDelay/10); myTemp++){
 80a0772:	2400      	movs	r4, #0
 80a0774:	4554      	cmp	r4, sl
 80a0776:	da65      	bge.n	80a0844 <_Z13waitForButtoniPiiS_iS_+0xec>
        if(digitalRead(lbtn) == HIGH){
 80a0778:	2000      	movs	r0, #0
 80a077a:	f002 f875 	bl	80a2868 <digitalRead>
 80a077e:	2801      	cmp	r0, #1
 80a0780:	4601      	mov	r1, r0
 80a0782:	d112      	bne.n	80a07aa <_Z13waitForButtoniPiiS_iS_+0x52>
            movePiece(currSpot,1,pid, *orientation,pieceColor, userBoard);
 80a0784:	e88d 0300 	stmia.w	sp, {r8, r9}
 80a0788:	682b      	ldr	r3, [r5, #0]
 80a078a:	463a      	mov	r2, r7
 80a078c:	4630      	mov	r0, r6
 80a078e:	f7ff ff31 	bl	80a05f4 <_Z9movePiecePiiiiiS_>
            printBoard(tetris);
 80a0792:	482e      	ldr	r0, [pc, #184]	; (80a084c <_Z13waitForButtoniPiiS_iS_+0xf4>)
 80a0794:	f7ff fccc 	bl	80a0130 <_Z10printBoardPi>
            while(digitalRead(lbtn) == HIGH){
 80a0798:	2000      	movs	r0, #0
 80a079a:	f002 f865 	bl	80a2868 <digitalRead>
 80a079e:	2801      	cmp	r0, #1
 80a07a0:	d14b      	bne.n	80a083a <_Z13waitForButtoniPiiS_iS_+0xe2>
                delay(5);
 80a07a2:	2005      	movs	r0, #5
 80a07a4:	f001 fc72 	bl	80a208c <delay>
    int myTemp;
    for(myTemp = 0; myTemp < (timeDelay/10); myTemp++){
        if(digitalRead(lbtn) == HIGH){
            movePiece(currSpot,1,pid, *orientation,pieceColor, userBoard);
            printBoard(tetris);
            while(digitalRead(lbtn) == HIGH){
 80a07a8:	e7f6      	b.n	80a0798 <_Z13waitForButtoniPiiS_iS_+0x40>
                delay(5);
            }
        }
        else if(digitalRead(rbtn) == HIGH){
 80a07aa:	2001      	movs	r0, #1
 80a07ac:	f002 f85c 	bl	80a2868 <digitalRead>
 80a07b0:	2801      	cmp	r0, #1
 80a07b2:	d113      	bne.n	80a07dc <_Z13waitForButtoniPiiS_iS_+0x84>
            movePiece(currSpot, 2, pid, *orientation, pieceColor, userBoard);
 80a07b4:	e88d 0300 	stmia.w	sp, {r8, r9}
 80a07b8:	682b      	ldr	r3, [r5, #0]
 80a07ba:	463a      	mov	r2, r7
 80a07bc:	2102      	movs	r1, #2
 80a07be:	4630      	mov	r0, r6
 80a07c0:	f7ff ff18 	bl	80a05f4 <_Z9movePiecePiiiiiS_>
            printBoard(tetris);
 80a07c4:	4821      	ldr	r0, [pc, #132]	; (80a084c <_Z13waitForButtoniPiiS_iS_+0xf4>)
 80a07c6:	f7ff fcb3 	bl	80a0130 <_Z10printBoardPi>
            while(digitalRead(rbtn) == HIGH){
 80a07ca:	2001      	movs	r0, #1
 80a07cc:	f002 f84c 	bl	80a2868 <digitalRead>
 80a07d0:	2801      	cmp	r0, #1
 80a07d2:	d132      	bne.n	80a083a <_Z13waitForButtoniPiiS_iS_+0xe2>
                delay(5);
 80a07d4:	2005      	movs	r0, #5
 80a07d6:	f001 fc59 	bl	80a208c <delay>
            }
        }
        else if(digitalRead(rbtn) == HIGH){
            movePiece(currSpot, 2, pid, *orientation, pieceColor, userBoard);
            printBoard(tetris);
            while(digitalRead(rbtn) == HIGH){
 80a07da:	e7f6      	b.n	80a07ca <_Z13waitForButtoniPiiS_iS_+0x72>
                delay(5);
            }
        }
        else if(digitalRead(dnbtn) == HIGH){
 80a07dc:	2002      	movs	r0, #2
 80a07de:	f002 f843 	bl	80a2868 <digitalRead>
 80a07e2:	2801      	cmp	r0, #1
 80a07e4:	d104      	bne.n	80a07f0 <_Z13waitForButtoniPiiS_iS_+0x98>
            myTemp += 10;
            delay(5);
 80a07e6:	2005      	movs	r0, #5
            while(digitalRead(rbtn) == HIGH){
                delay(5);
            }
        }
        else if(digitalRead(dnbtn) == HIGH){
            myTemp += 10;
 80a07e8:	340a      	adds	r4, #10
            delay(5);
 80a07ea:	f001 fc4f 	bl	80a208c <delay>
 80a07ee:	e024      	b.n	80a083a <_Z13waitForButtoniPiiS_iS_+0xe2>
        }
        else if(digitalRead(ebtn) == HIGH){
 80a07f0:	2003      	movs	r0, #3
 80a07f2:	f002 f839 	bl	80a2868 <digitalRead>
 80a07f6:	2801      	cmp	r0, #1
 80a07f8:	d117      	bne.n	80a082a <_Z13waitForButtoniPiiS_iS_+0xd2>
            if(*orientation < 3){
 80a07fa:	682b      	ldr	r3, [r5, #0]
                rotatePiece(*currSpot, pid, orientation, (*orientation)+1, pieceColor, userBoard);
            }
            else{
                rotatePiece(*currSpot, pid, orientation, 0, pieceColor, userBoard);
 80a07fc:	6830      	ldr	r0, [r6, #0]
        else if(digitalRead(dnbtn) == HIGH){
            myTemp += 10;
            delay(5);
        }
        else if(digitalRead(ebtn) == HIGH){
            if(*orientation < 3){
 80a07fe:	2b02      	cmp	r3, #2
                rotatePiece(*currSpot, pid, orientation, (*orientation)+1, pieceColor, userBoard);
 80a0800:	e88d 0300 	stmia.w	sp, {r8, r9}
 80a0804:	bfd4      	ite	le
 80a0806:	3301      	addle	r3, #1
            }
            else{
                rotatePiece(*currSpot, pid, orientation, 0, pieceColor, userBoard);
 80a0808:	2300      	movgt	r3, #0
 80a080a:	462a      	mov	r2, r5
 80a080c:	4639      	mov	r1, r7
 80a080e:	f7ff fe72 	bl	80a04f6 <_Z11rotatePieceiiPiiiS_>
            }
            printBoard(tetris);
 80a0812:	480e      	ldr	r0, [pc, #56]	; (80a084c <_Z13waitForButtoniPiiS_iS_+0xf4>)
 80a0814:	f7ff fc8c 	bl	80a0130 <_Z10printBoardPi>
            while(digitalRead(ebtn) == HIGH){
 80a0818:	2003      	movs	r0, #3
 80a081a:	f002 f825 	bl	80a2868 <digitalRead>
 80a081e:	2801      	cmp	r0, #1
 80a0820:	d10b      	bne.n	80a083a <_Z13waitForButtoniPiiS_iS_+0xe2>
                delay(5);
 80a0822:	2005      	movs	r0, #5
 80a0824:	f001 fc32 	bl	80a208c <delay>
            }
            else{
                rotatePiece(*currSpot, pid, orientation, 0, pieceColor, userBoard);
            }
            printBoard(tetris);
            while(digitalRead(ebtn) == HIGH){
 80a0828:	e7f6      	b.n	80a0818 <_Z13waitForButtoniPiiS_iS_+0xc0>
                delay(5);
            }
        }
        else if(digitalRead(D4) == HIGH){
 80a082a:	2004      	movs	r0, #4
 80a082c:	f002 f81c 	bl	80a2868 <digitalRead>
 80a0830:	2801      	cmp	r0, #1
 80a0832:	d102      	bne.n	80a083a <_Z13waitForButtoniPiiS_iS_+0xe2>
            System.dfu();
 80a0834:	2000      	movs	r0, #0
 80a0836:	f001 fbad 	bl	80a1f94 <_ZN11SystemClass3dfuEb>
        }
        delay(10);
 80a083a:	200a      	movs	r0, #10
 80a083c:	f001 fc26 	bl	80a208c <delay>
void gameDone(){
    delay(20000);
}
void waitForButton(int timeDelay, int * currSpot, int pid, int * orientation, int pieceColor, int* userBoard){
    int myTemp;
    for(myTemp = 0; myTemp < (timeDelay/10); myTemp++){
 80a0840:	3401      	adds	r4, #1
 80a0842:	e797      	b.n	80a0774 <_Z13waitForButtoniPiiS_iS_+0x1c>
            System.dfu();
        }
        delay(10);
    }
    return;
}
 80a0844:	b002      	add	sp, #8
 80a0846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a084a:	bf00      	nop
 80a084c:	20000078 	.word	0x20000078

080a0850 <loop>:
void loop() {
 80a0850:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    currentPiece = random(7);
 80a0854:	2007      	movs	r0, #7
 80a0856:	f001 fecb 	bl	80a25f0 <_Z6randomi>
    pieceSpot = 8;
    pieceRotation = 0;
 80a085a:	4c2c      	ldr	r4, [pc, #176]	; (80a090c <loop+0xbc>)
    }
    return;
}
void loop() {
    currentPiece = random(7);
    pieceSpot = 8;
 80a085c:	4b2c      	ldr	r3, [pc, #176]	; (80a0910 <loop+0xc0>)
        delay(10);
    }
    return;
}
void loop() {
    currentPiece = random(7);
 80a085e:	4d2d      	ldr	r5, [pc, #180]	; (80a0914 <loop+0xc4>)
    pieceSpot = 8;
    pieceRotation = 0;
 80a0860:	2100      	movs	r1, #0
    }
    return;
}
void loop() {
    currentPiece = random(7);
    pieceSpot = 8;
 80a0862:	2608      	movs	r6, #8
    pieceRotation = 0;
    if(!placePiece(pieceSpot,currentPiece,getPieceColor(currentPiece, 0, 20),tetris)){
 80a0864:	2214      	movs	r2, #20
        delay(10);
    }
    return;
}
void loop() {
    currentPiece = random(7);
 80a0866:	4607      	mov	r7, r0
    pieceSpot = 8;
 80a0868:	601e      	str	r6, [r3, #0]
    pieceRotation = 0;
 80a086a:	6021      	str	r1, [r4, #0]
        delay(10);
    }
    return;
}
void loop() {
    currentPiece = random(7);
 80a086c:	6028      	str	r0, [r5, #0]
    pieceSpot = 8;
    pieceRotation = 0;
    if(!placePiece(pieceSpot,currentPiece,getPieceColor(currentPiece, 0, 20),tetris)){
 80a086e:	f7ff fda3 	bl	80a03b8 <_Z13getPieceColoriii>
 80a0872:	4639      	mov	r1, r7
 80a0874:	4602      	mov	r2, r0
 80a0876:	4b28      	ldr	r3, [pc, #160]	; (80a0918 <loop+0xc8>)
 80a0878:	4630      	mov	r0, r6
 80a087a:	f7ff fe15 	bl	80a04a8 <_Z10placePieceiiiPi>
 80a087e:	4627      	mov	r7, r4
 80a0880:	b908      	cbnz	r0, 80a0886 <loop+0x36>
        gameDone();
 80a0882:	f7ff fcbb 	bl	80a01fc <_Z8gameDonev>
    }
    printBoard(tetris);
 80a0886:	4c24      	ldr	r4, [pc, #144]	; (80a0918 <loop+0xc8>)
    waitForButton(2000, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, 0, 20), tetris);
    while(!movePiece(&pieceSpot, 0, currentPiece, pieceRotation, getPieceColor(currentPiece, 0, 20), tetris)){
 80a0888:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80a0914 <loop+0xc4>
    pieceSpot = 8;
    pieceRotation = 0;
    if(!placePiece(pieceSpot,currentPiece,getPieceColor(currentPiece, 0, 20),tetris)){
        gameDone();
    }
    printBoard(tetris);
 80a088c:	4620      	mov	r0, r4
 80a088e:	f7ff fc4f 	bl	80a0130 <_Z10printBoardPi>
    waitForButton(2000, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, 0, 20), tetris);
 80a0892:	682e      	ldr	r6, [r5, #0]
 80a0894:	2214      	movs	r2, #20
 80a0896:	2100      	movs	r1, #0
 80a0898:	4630      	mov	r0, r6
 80a089a:	f7ff fd8d 	bl	80a03b8 <_Z13getPieceColoriii>
 80a089e:	4b1b      	ldr	r3, [pc, #108]	; (80a090c <loop+0xbc>)
 80a08a0:	e88d 0011 	stmia.w	sp, {r0, r4}
 80a08a4:	4632      	mov	r2, r6
 80a08a6:	491a      	ldr	r1, [pc, #104]	; (80a0910 <loop+0xc0>)
 80a08a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a08ac:	f7ff ff54 	bl	80a0758 <_Z13waitForButtoniPiiS_iS_>
    while(!movePiece(&pieceSpot, 0, currentPiece, pieceRotation, getPieceColor(currentPiece, 0, 20), tetris)){
 80a08b0:	46a0      	mov	r8, r4
 80a08b2:	682e      	ldr	r6, [r5, #0]
 80a08b4:	2214      	movs	r2, #20
 80a08b6:	2100      	movs	r1, #0
 80a08b8:	4630      	mov	r0, r6
 80a08ba:	f7ff fd7d 	bl	80a03b8 <_Z13getPieceColoriii>
 80a08be:	f8d7 a000 	ldr.w	sl, [r7]
 80a08c2:	2100      	movs	r1, #0
 80a08c4:	e88d 0011 	stmia.w	sp, {r0, r4}
 80a08c8:	4653      	mov	r3, sl
 80a08ca:	4632      	mov	r2, r6
 80a08cc:	4810      	ldr	r0, [pc, #64]	; (80a0910 <loop+0xc0>)
 80a08ce:	f7ff fe91 	bl	80a05f4 <_Z9movePiecePiiiiiS_>
 80a08d2:	4601      	mov	r1, r0
 80a08d4:	b990      	cbnz	r0, 80a08fc <loop+0xac>
        waitForButton(2000, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, 0, 20), tetris);
 80a08d6:	f8d9 6000 	ldr.w	r6, [r9]
 80a08da:	2214      	movs	r2, #20
 80a08dc:	4630      	mov	r0, r6
 80a08de:	f7ff fd6b 	bl	80a03b8 <_Z13getPieceColoriii>
 80a08e2:	4b0a      	ldr	r3, [pc, #40]	; (80a090c <loop+0xbc>)
 80a08e4:	e88d 0101 	stmia.w	sp, {r0, r8}
 80a08e8:	4632      	mov	r2, r6
 80a08ea:	4909      	ldr	r1, [pc, #36]	; (80a0910 <loop+0xc0>)
 80a08ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a08f0:	f7ff ff32 	bl	80a0758 <_Z13waitForButtoniPiiS_iS_>
        printBoard(tetris);
 80a08f4:	4808      	ldr	r0, [pc, #32]	; (80a0918 <loop+0xc8>)
 80a08f6:	f7ff fc1b 	bl	80a0130 <_Z10printBoardPi>
    if(!placePiece(pieceSpot,currentPiece,getPieceColor(currentPiece, 0, 20),tetris)){
        gameDone();
    }
    printBoard(tetris);
    waitForButton(2000, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, 0, 20), tetris);
    while(!movePiece(&pieceSpot, 0, currentPiece, pieceRotation, getPieceColor(currentPiece, 0, 20), tetris)){
 80a08fa:	e7da      	b.n	80a08b2 <loop+0x62>
        waitForButton(2000, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, 0, 20), tetris);
        printBoard(tetris);
    }
    delay(1000);
 80a08fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80a0900:	b002      	add	sp, #8
 80a0902:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    waitForButton(2000, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, 0, 20), tetris);
    while(!movePiece(&pieceSpot, 0, currentPiece, pieceRotation, getPieceColor(currentPiece, 0, 20), tetris)){
        waitForButton(2000, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, 0, 20), tetris);
        printBoard(tetris);
    }
    delay(1000);
 80a0906:	f001 bbc1 	b.w	80a208c <delay>
 80a090a:	bf00      	nop
 80a090c:	2000048c 	.word	0x2000048c
 80a0910:	20000070 	.word	0x20000070
 80a0914:	20000074 	.word	0x20000074
 80a0918:	20000078 	.word	0x20000078

080a091c <_GLOBAL__sub_I_strip>:
void shiftRowsDown(int emptyRow, int numRows, int numColumns, int* userBoard){        //Fucntion to shift all rows above emptyRow down 1
    int i;
    for(i = emptyRow*numColumns+numColumns-1; i >= numColumns; i--){            
        userBoard[i] = userBoard[i-16];
    }
 80a091c:	b538      	push	{r3, r4, r5, lr}

#define PIXEL_PIN A2            //Define Hardware pin used for data

#define PIXEL_TYPE WS2812B       //Define LED Type

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);    //Initialize neopixel function
 80a091e:	4c11      	ldr	r4, [pc, #68]	; (80a0964 <_GLOBAL__sub_I_strip+0x48>)
 80a0920:	4d11      	ldr	r5, [pc, #68]	; (80a0968 <_GLOBAL__sub_I_strip+0x4c>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0922:	f001 f97f 	bl	80a1c24 <HAL_Pin_Map>
 80a0926:	2302      	movs	r3, #2
 80a0928:	220c      	movs	r2, #12
 80a092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a092e:	4620      	mov	r0, r4
 80a0930:	f000 f873 	bl	80a0a1a <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0934:	462a      	mov	r2, r5
 80a0936:	490d      	ldr	r1, [pc, #52]	; (80a096c <_GLOBAL__sub_I_strip+0x50>)
 80a0938:	4620      	mov	r0, r4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a093a:	4c0d      	ldr	r4, [pc, #52]	; (80a0970 <_GLOBAL__sub_I_strip+0x54>)
 80a093c:	f002 f800 	bl	80a2940 <__aeabi_atexit>
 80a0940:	2300      	movs	r3, #0
 80a0942:	6023      	str	r3, [r4, #0]
 80a0944:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0946:	71a3      	strb	r3, [r4, #6]
 80a0948:	8123      	strh	r3, [r4, #8]
 80a094a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a094e:	2003      	movs	r0, #3
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0950:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0952:	f001 fa81 	bl	80a1e58 <set_system_mode>

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(MANUAL);         //Tells device to use WiFi by default
 80a0956:	462a      	mov	r2, r5
 80a0958:	4620      	mov	r0, r4
void shiftRowsDown(int emptyRow, int numRows, int numColumns, int* userBoard){        //Fucntion to shift all rows above emptyRow down 1
    int i;
    for(i = emptyRow*numColumns+numColumns-1; i >= numColumns; i--){            
        userBoard[i] = userBoard[i-16];
    }
 80a095a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(MANUAL);         //Tells device to use WiFi by default
 80a095e:	4905      	ldr	r1, [pc, #20]	; (80a0974 <_GLOBAL__sub_I_strip+0x58>)
 80a0960:	f001 bfee 	b.w	80a2940 <__aeabi_atexit>
 80a0964:	20000478 	.word	0x20000478
 80a0968:	20000068 	.word	0x20000068
 80a096c:	080a097d 	.word	0x080a097d
 80a0970:	20000490 	.word	0x20000490
 80a0974:	080a00af 	.word	0x080a00af

080a0978 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0978:	f001 b994 	b.w	80a1ca4 <HAL_Timer_Get_Micro_Seconds>

080a097c <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a097c:	b510      	push	{r4, lr}
 80a097e:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0980:	68c0      	ldr	r0, [r0, #12]
 80a0982:	b108      	cbz	r0, 80a0988 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0984:	f001 faec 	bl	80a1f60 <free>
  if (begun) pinMode(pin, INPUT);
 80a0988:	7823      	ldrb	r3, [r4, #0]
 80a098a:	b11b      	cbz	r3, 80a0994 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a098c:	2100      	movs	r1, #0
 80a098e:	79e0      	ldrb	r0, [r4, #7]
 80a0990:	f001 ff40 	bl	80a2814 <pinMode>
}
 80a0994:	4620      	mov	r0, r4
 80a0996:	bd10      	pop	{r4, pc}

080a0998 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0998:	b538      	push	{r3, r4, r5, lr}
 80a099a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a099c:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a099e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a09a0:	b108      	cbz	r0, 80a09a6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a09a2:	f001 fadd 	bl	80a1f60 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a09a6:	79a3      	ldrb	r3, [r4, #6]
 80a09a8:	2b06      	cmp	r3, #6
 80a09aa:	bf0c      	ite	eq
 80a09ac:	2004      	moveq	r0, #4
 80a09ae:	2003      	movne	r0, #3
 80a09b0:	4368      	muls	r0, r5
 80a09b2:	b280      	uxth	r0, r0
 80a09b4:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a09b6:	f001 facb 	bl	80a1f50 <malloc>
 80a09ba:	60e0      	str	r0, [r4, #12]
 80a09bc:	b128      	cbz	r0, 80a09ca <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a09be:	88a2      	ldrh	r2, [r4, #4]
 80a09c0:	2100      	movs	r1, #0
 80a09c2:	f002 f940 	bl	80a2c46 <memset>
    numLEDs = n;
 80a09c6:	8065      	strh	r5, [r4, #2]
 80a09c8:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a09ca:	80a0      	strh	r0, [r4, #4]
 80a09cc:	8060      	strh	r0, [r4, #2]
 80a09ce:	bd38      	pop	{r3, r4, r5, pc}

080a09d0 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a09d0:	b510      	push	{r4, lr}
 80a09d2:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a09d4:	2101      	movs	r1, #1
 80a09d6:	79c0      	ldrb	r0, [r0, #7]
 80a09d8:	f001 ff1c 	bl	80a2814 <pinMode>
  digitalWrite(pin, LOW);
 80a09dc:	2100      	movs	r1, #0
 80a09de:	79e0      	ldrb	r0, [r4, #7]
 80a09e0:	f001 ff29 	bl	80a2836 <digitalWrite>
  begun = true;
 80a09e4:	2301      	movs	r3, #1
 80a09e6:	7023      	strb	r3, [r4, #0]
 80a09e8:	bd10      	pop	{r4, pc}

080a09ea <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a09ea:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a09ec:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a09ee:	4605      	mov	r5, r0
 80a09f0:	460c      	mov	r4, r1
    if (begun) {
 80a09f2:	b11b      	cbz	r3, 80a09fc <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a09f4:	2100      	movs	r1, #0
 80a09f6:	79c0      	ldrb	r0, [r0, #7]
 80a09f8:	f001 ff0c 	bl	80a2814 <pinMode>
    }
    pin = p;
    if (begun) {
 80a09fc:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a09fe:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0a00:	b153      	cbz	r3, 80a0a18 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0a02:	b2a4      	uxth	r4, r4
 80a0a04:	4620      	mov	r0, r4
 80a0a06:	2101      	movs	r1, #1
 80a0a08:	f001 ff04 	bl	80a2814 <pinMode>
        digitalWrite(p, LOW);
 80a0a0c:	4620      	mov	r0, r4
    }
}
 80a0a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a0a12:	2100      	movs	r1, #0
 80a0a14:	f001 bf0f 	b.w	80a2836 <digitalWrite>
 80a0a18:	bd38      	pop	{r3, r4, r5, pc}

080a0a1a <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0a1a:	b570      	push	{r4, r5, r6, lr}
 80a0a1c:	4604      	mov	r4, r0
 80a0a1e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0a20:	2500      	movs	r5, #0
 80a0a22:	7183      	strb	r3, [r0, #6]
 80a0a24:	7005      	strb	r5, [r0, #0]
 80a0a26:	7205      	strb	r5, [r0, #8]
 80a0a28:	60c5      	str	r5, [r0, #12]
 80a0a2a:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0a2c:	f7ff ffb4 	bl	80a0998 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0a30:	4620      	mov	r0, r4
 80a0a32:	4631      	mov	r1, r6
 80a0a34:	f7ff ffd9 	bl	80a09ea <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0a38:	4620      	mov	r0, r4
 80a0a3a:	bd70      	pop	{r4, r5, r6, pc}

080a0a3c <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0a3c:	68c3      	ldr	r3, [r0, #12]
 80a0a3e:	2b00      	cmp	r3, #0
 80a0a40:	f000 858e 	beq.w	80a1560 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0a48:	4604      	mov	r4, r0
 80a0a4a:	7983      	ldrb	r3, [r0, #6]
 80a0a4c:	b086      	sub	sp, #24
 80a0a4e:	3b02      	subs	r3, #2
 80a0a50:	b2db      	uxtb	r3, r3
 80a0a52:	2b04      	cmp	r3, #4
 80a0a54:	bf96      	itet	ls
 80a0a56:	4a29      	ldrls	r2, [pc, #164]	; (80a0afc <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0a58:	2532      	movhi	r5, #50	; 0x32
 80a0a5a:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0a5e:	f7ff ff8b 	bl	80a0978 <micros>
 80a0a62:	6923      	ldr	r3, [r4, #16]
 80a0a64:	1ac0      	subs	r0, r0, r3
 80a0a66:	42a8      	cmp	r0, r5
 80a0a68:	d3f9      	bcc.n	80a0a5e <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0a6a:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a6c:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0a6e:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a70:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0a72:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a0a76:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a7a:	f000 8272 	beq.w	80a0f62 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0a7e:	2907      	cmp	r1, #7
 80a0a80:	f000 826f 	beq.w	80a0f62 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0a84:	2906      	cmp	r1, #6
 80a0a86:	f000 8432 	beq.w	80a12ee <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0a8a:	2905      	cmp	r1, #5
 80a0a8c:	f000 83ab 	beq.w	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0a90:	2908      	cmp	r1, #8
 80a0a92:	f000 83a8 	beq.w	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0a96:	2900      	cmp	r1, #0
 80a0a98:	f040 8563 	bne.w	80a1562 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0a9c:	4a18      	ldr	r2, [pc, #96]	; (80a0b00 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0a9e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0aa2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0aa6:	b29b      	uxth	r3, r3
 80a0aa8:	2b00      	cmp	r3, #0
 80a0aaa:	f000 8395 	beq.w	80a11d8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0aae:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0ab0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0ab4:	f10e 0503 	add.w	r5, lr, #3
 80a0ab8:	3b03      	subs	r3, #3
 80a0aba:	b29b      	uxth	r3, r3
 80a0abc:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0ac0:	f89e 3000 	ldrb.w	r3, [lr]
 80a0ac4:	b2db      	uxtb	r3, r3
 80a0ac6:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0aca:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0ace:	b2db      	uxtb	r3, r3
 80a0ad0:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0ad4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0ad8:	b2db      	uxtb	r3, r3
 80a0ada:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0ade:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0ae2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0ae6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0aea:	021b      	lsls	r3, r3, #8
 80a0aec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0af0:	4303      	orrs	r3, r0
 80a0af2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0af4:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0af8:	e11b      	b.n	80a0d32 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0afa:	bf00      	nop
 80a0afc:	080a2d40 	.word	0x080a2d40
 80a0b00:	2000049c 	.word	0x2000049c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0b04:	4600      	mov	r0, r0
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0c0c:	79e3      	ldrb	r3, [r4, #7]
 80a0c0e:	6810      	ldr	r0, [r2, #0]
 80a0c10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c14:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c18:	88bf      	ldrh	r7, [r7, #4]
 80a0c1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c1e:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c20:	4600      	mov	r0, r0
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0d1a:	9b04      	ldr	r3, [sp, #16]
 80a0d1c:	085b      	lsrs	r3, r3, #1
 80a0d1e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0d20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0d24:	3301      	adds	r3, #1
 80a0d26:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0d28:	2b17      	cmp	r3, #23
 80a0d2a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0d2e:	f200 82db 	bhi.w	80a12e8 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0d32:	79e3      	ldrb	r3, [r4, #7]
 80a0d34:	6810      	ldr	r0, [r2, #0]
 80a0d36:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d3a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d3e:	88bf      	ldrh	r7, [r7, #4]
 80a0d40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d44:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0d46:	9803      	ldr	r0, [sp, #12]
 80a0d48:	9b04      	ldr	r3, [sp, #16]
 80a0d4a:	4218      	tst	r0, r3
 80a0d4c:	f47f aeda 	bne.w	80a0b04 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0d50:	4600      	mov	r0, r0
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0da2:	79e3      	ldrb	r3, [r4, #7]
 80a0da4:	6810      	ldr	r0, [r2, #0]
 80a0da6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0daa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0dae:	88bf      	ldrh	r7, [r7, #4]
 80a0db0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0db4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0db6:	4600      	mov	r0, r0
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	e6db      	b.n	80a0d1a <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f62:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f66:	4a17      	ldr	r2, [pc, #92]	; (80a0fc4 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0f68:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0f6a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0f6e:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f70:	2b00      	cmp	r3, #0
 80a0f72:	f000 8131 	beq.w	80a11d8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0f76:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f7c:	f10e 0103 	add.w	r1, lr, #3
 80a0f80:	3b03      	subs	r3, #3
 80a0f82:	b29b      	uxth	r3, r3
 80a0f84:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0f88:	f89e 3000 	ldrb.w	r3, [lr]
 80a0f8c:	b2db      	uxtb	r3, r3
 80a0f8e:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0f92:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0f96:	b2db      	uxtb	r3, r3
 80a0f98:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0f9c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0fa0:	b2db      	uxtb	r3, r3
 80a0fa2:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0fa6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0faa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0fae:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0fb2:	0200      	lsls	r0, r0, #8
 80a0fb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0fb8:	433b      	orrs	r3, r7
 80a0fba:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0fbc:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0fc0:	e080      	b.n	80a10c4 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0fc2:	bf00      	nop
 80a0fc4:	2000049c 	.word	0x2000049c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fc8:	4600      	mov	r0, r0
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a1062:	79e3      	ldrb	r3, [r4, #7]
 80a1064:	6810      	ldr	r0, [r2, #0]
 80a1066:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a106a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a106e:	88bf      	ldrh	r7, [r7, #4]
 80a1070:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1074:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1076:	4600      	mov	r0, r0
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a10ac:	9b04      	ldr	r3, [sp, #16]
 80a10ae:	085b      	lsrs	r3, r3, #1
 80a10b0:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a10b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10b6:	3301      	adds	r3, #1
 80a10b8:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a10ba:	2b17      	cmp	r3, #23
 80a10bc:	f88d 3005 	strb.w	r3, [sp, #5]
 80a10c0:	f200 8083 	bhi.w	80a11ca <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a10c4:	79e3      	ldrb	r3, [r4, #7]
 80a10c6:	6810      	ldr	r0, [r2, #0]
 80a10c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10cc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10d0:	88bf      	ldrh	r7, [r7, #4]
 80a10d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10d6:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a10d8:	9803      	ldr	r0, [sp, #12]
 80a10da:	9b04      	ldr	r3, [sp, #16]
 80a10dc:	4218      	tst	r0, r3
 80a10de:	f47f af73 	bne.w	80a0fc8 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a10e2:	4600      	mov	r0, r0
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a110a:	79e3      	ldrb	r3, [r4, #7]
 80a110c:	6810      	ldr	r0, [r2, #0]
 80a110e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1112:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1116:	88bf      	ldrh	r7, [r7, #4]
 80a1118:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a111c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a111e:	4600      	mov	r0, r0
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	e770      	b.n	80a10ac <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11ca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a11ce:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11d0:	b29b      	uxth	r3, r3
 80a11d2:	2b00      	cmp	r3, #0
 80a11d4:	f47f aecf 	bne.w	80a0f76 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a11d8:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a11da:	f7ff fbcd 	bl	80a0978 <micros>
 80a11de:	6120      	str	r0, [r4, #16]
}
 80a11e0:	b006      	add	sp, #24
 80a11e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a11e6:	4b5e      	ldr	r3, [pc, #376]	; (80a1360 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a11e8:	4a5e      	ldr	r2, [pc, #376]	; (80a1364 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a11ea:	4618      	mov	r0, r3
 80a11ec:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a11ee:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a11f2:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11f4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a11f8:	b292      	uxth	r2, r2
 80a11fa:	2a00      	cmp	r2, #0
 80a11fc:	d0ec      	beq.n	80a11d8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a11fe:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1202:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1206:	f10e 0503 	add.w	r5, lr, #3
 80a120a:	3a03      	subs	r2, #3
 80a120c:	b292      	uxth	r2, r2
 80a120e:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1212:	f89e 2000 	ldrb.w	r2, [lr]
 80a1216:	b2d2      	uxtb	r2, r2
 80a1218:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a121c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1220:	b2d2      	uxtb	r2, r2
 80a1222:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1226:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a122a:	b2d2      	uxtb	r2, r2
 80a122c:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1230:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a1234:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a1238:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a123c:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1240:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1244:	ea42 020c 	orr.w	r2, r2, ip
 80a1248:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a124a:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a124e:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1250:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1252:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1256:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a125a:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a125e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1262:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1264:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1268:	9e03      	ldr	r6, [sp, #12]
 80a126a:	9a04      	ldr	r2, [sp, #16]
 80a126c:	4216      	tst	r6, r2
 80a126e:	d023      	beq.n	80a12b8 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1270:	685a      	ldr	r2, [r3, #4]
 80a1272:	9e05      	ldr	r6, [sp, #20]
 80a1274:	1b92      	subs	r2, r2, r6
 80a1276:	2a4f      	cmp	r2, #79	; 0x4f
 80a1278:	d9fa      	bls.n	80a1270 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a127a:	79e2      	ldrb	r2, [r4, #7]
 80a127c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1280:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1284:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1288:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a128c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1290:	6842      	ldr	r2, [r0, #4]
 80a1292:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1294:	685a      	ldr	r2, [r3, #4]
 80a1296:	9e05      	ldr	r6, [sp, #20]
 80a1298:	1b92      	subs	r2, r2, r6
 80a129a:	2a07      	cmp	r2, #7
 80a129c:	d9fa      	bls.n	80a1294 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a129e:	9a04      	ldr	r2, [sp, #16]
 80a12a0:	0852      	lsrs	r2, r2, #1
 80a12a2:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a12a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a12a8:	3201      	adds	r2, #1
 80a12aa:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a12ac:	2a17      	cmp	r2, #23
 80a12ae:	f88d 2005 	strb.w	r2, [sp, #5]
 80a12b2:	d9cc      	bls.n	80a124e <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a12b4:	46ae      	mov	lr, r5
 80a12b6:	e79d      	b.n	80a11f4 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a12b8:	685a      	ldr	r2, [r3, #4]
 80a12ba:	9e05      	ldr	r6, [sp, #20]
 80a12bc:	1b92      	subs	r2, r2, r6
 80a12be:	2a18      	cmp	r2, #24
 80a12c0:	d9fa      	bls.n	80a12b8 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a12c2:	79e2      	ldrb	r2, [r4, #7]
 80a12c4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a12c8:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a12cc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a12d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a12d4:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a12d8:	6842      	ldr	r2, [r0, #4]
 80a12da:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a12dc:	685a      	ldr	r2, [r3, #4]
 80a12de:	9e05      	ldr	r6, [sp, #20]
 80a12e0:	1b92      	subs	r2, r2, r6
 80a12e2:	2a45      	cmp	r2, #69	; 0x45
 80a12e4:	d9fa      	bls.n	80a12dc <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a12e6:	e7da      	b.n	80a129e <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a12e8:	46ae      	mov	lr, r5
 80a12ea:	f7ff bbda 	b.w	80a0aa2 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a12ee:	4a1d      	ldr	r2, [pc, #116]	; (80a1364 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a12f0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a12f4:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a12f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a12fa:	b29b      	uxth	r3, r3
 80a12fc:	2b00      	cmp	r3, #0
 80a12fe:	f43f af6b 	beq.w	80a11d8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1302:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1304:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1308:	f10e 0104 	add.w	r1, lr, #4
 80a130c:	3b04      	subs	r3, #4
 80a130e:	b29b      	uxth	r3, r3
 80a1310:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1314:	f89e 3000 	ldrb.w	r3, [lr]
 80a1318:	b2db      	uxtb	r3, r3
 80a131a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a131e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1322:	b2db      	uxtb	r3, r3
 80a1324:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1328:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a132c:	b2db      	uxtb	r3, r3
 80a132e:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1332:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a1336:	b2db      	uxtb	r3, r3
 80a1338:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a133c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1340:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1344:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1348:	043f      	lsls	r7, r7, #16
 80a134a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a134e:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1352:	4303      	orrs	r3, r0
 80a1354:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1358:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a135a:	f88d 6005 	strb.w	r6, [sp, #5]
 80a135e:	e07e      	b.n	80a145e <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1360:	e0001000 	.word	0xe0001000
 80a1364:	2000049c 	.word	0x2000049c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1368:	4600      	mov	r0, r0
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a13d6:	79e3      	ldrb	r3, [r4, #7]
 80a13d8:	6810      	ldr	r0, [r2, #0]
 80a13da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13de:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13e2:	88bf      	ldrh	r7, [r7, #4]
 80a13e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13e8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13ea:	4600      	mov	r0, r0
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1448:	9b04      	ldr	r3, [sp, #16]
 80a144a:	085b      	lsrs	r3, r3, #1
 80a144c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a144e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1452:	3301      	adds	r3, #1
 80a1454:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a1456:	2b1f      	cmp	r3, #31
 80a1458:	f88d 3005 	strb.w	r3, [sp, #5]
 80a145c:	d87e      	bhi.n	80a155c <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a145e:	79e3      	ldrb	r3, [r4, #7]
 80a1460:	6810      	ldr	r0, [r2, #0]
 80a1462:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1466:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a146a:	88bf      	ldrh	r7, [r7, #4]
 80a146c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1470:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1472:	9803      	ldr	r0, [sp, #12]
 80a1474:	9b04      	ldr	r3, [sp, #16]
 80a1476:	4218      	tst	r0, r3
 80a1478:	f47f af76 	bne.w	80a1368 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a147c:	4600      	mov	r0, r0
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a14a4:	79e3      	ldrb	r3, [r4, #7]
 80a14a6:	6810      	ldr	r0, [r2, #0]
 80a14a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a14ac:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a14b0:	88bf      	ldrh	r7, [r7, #4]
 80a14b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a14b6:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a14b8:	4600      	mov	r0, r0
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	e775      	b.n	80a1448 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a155c:	468e      	mov	lr, r1
 80a155e:	e6ca      	b.n	80a12f6 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1560:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1562:	2903      	cmp	r1, #3
 80a1564:	f000 812e 	beq.w	80a17c4 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1568:	4a1e      	ldr	r2, [pc, #120]	; (80a15e4 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a156a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a156e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1570:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1574:	b29b      	uxth	r3, r3
 80a1576:	2b00      	cmp	r3, #0
 80a1578:	f43f ae2e 	beq.w	80a11d8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a157c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a157e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1582:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1584:	3b03      	subs	r3, #3
 80a1586:	b29b      	uxth	r3, r3
 80a1588:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a158c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1590:	f10e 0103 	add.w	r1, lr, #3
 80a1594:	b2db      	uxtb	r3, r3
 80a1596:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a159a:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a159e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a15a2:	b2db      	uxtb	r3, r3
 80a15a4:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a15a8:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a15ac:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a15b0:	b2db      	uxtb	r3, r3
 80a15b2:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a15b6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a15ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a15be:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a15c2:	021b      	lsls	r3, r3, #8
 80a15c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a15c8:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a15cc:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a15d0:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a15d4:	433b      	orrs	r3, r7
 80a15d6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a15d8:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a15dc:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a15e0:	e07d      	b.n	80a16de <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a15e2:	bf00      	nop
 80a15e4:	2000049c 	.word	0x2000049c
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a15e8:	9b04      	ldr	r3, [sp, #16]
 80a15ea:	085b      	lsrs	r3, r3, #1
 80a15ec:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a15ee:	4600      	mov	r0, r0
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1674:	79e0      	ldrb	r0, [r4, #7]
 80a1676:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1678:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a167c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1680:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1684:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1688:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a168c:	3301      	adds	r3, #1
 80a168e:	b2db      	uxtb	r3, r3
 80a1690:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1694:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1698:	4600      	mov	r0, r0
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
          if(j==24) break;
 80a16c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a16c6:	2b18      	cmp	r3, #24
 80a16c8:	d07a      	beq.n	80a17c0 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a16ca:	79e3      	ldrb	r3, [r4, #7]
 80a16cc:	6810      	ldr	r0, [r2, #0]
 80a16ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a16d2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a16d6:	88bf      	ldrh	r7, [r7, #4]
 80a16d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a16dc:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a16de:	9803      	ldr	r0, [sp, #12]
 80a16e0:	9b04      	ldr	r3, [sp, #16]
 80a16e2:	4218      	tst	r0, r3
 80a16e4:	d180      	bne.n	80a15e8 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a16e6:	4600      	mov	r0, r0
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1708:	79e3      	ldrb	r3, [r4, #7]
 80a170a:	6810      	ldr	r0, [r2, #0]
 80a170c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1710:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1714:	88bf      	ldrh	r7, [r7, #4]
 80a1716:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a171a:	831f      	strh	r7, [r3, #24]
          j++;
 80a171c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1720:	3301      	adds	r3, #1
 80a1722:	b2db      	uxtb	r3, r3
 80a1724:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1728:	9b04      	ldr	r3, [sp, #16]
 80a172a:	085b      	lsrs	r3, r3, #1
 80a172c:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a172e:	4600      	mov	r0, r0
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
          if(j==24) break;
 80a17b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a17bc:	2b18      	cmp	r3, #24
 80a17be:	d184      	bne.n	80a16ca <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a17c0:	468e      	mov	lr, r1
 80a17c2:	e6d5      	b.n	80a1570 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a17c4:	4a17      	ldr	r2, [pc, #92]	; (80a1824 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a17c6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a17ca:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a17cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a17d0:	b29b      	uxth	r3, r3
 80a17d2:	2b00      	cmp	r3, #0
 80a17d4:	f43f ad00 	beq.w	80a11d8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a17d8:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a17da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a17de:	f10e 0103 	add.w	r1, lr, #3
 80a17e2:	3b03      	subs	r3, #3
 80a17e4:	b29b      	uxth	r3, r3
 80a17e6:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a17ea:	f89e 3000 	ldrb.w	r3, [lr]
 80a17ee:	b2db      	uxtb	r3, r3
 80a17f0:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a17f4:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a17f8:	b2db      	uxtb	r3, r3
 80a17fa:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a17fe:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1802:	b2db      	uxtb	r3, r3
 80a1804:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1808:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a180c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1810:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1814:	021b      	lsls	r3, r3, #8
 80a1816:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a181a:	4303      	orrs	r3, r0
 80a181c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a181e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1822:	e0e0      	b.n	80a19e6 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1824:	2000049c 	.word	0x2000049c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1828:	4600      	mov	r0, r0
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a194a:	79e3      	ldrb	r3, [r4, #7]
 80a194c:	6810      	ldr	r0, [r2, #0]
 80a194e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1952:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1956:	88bf      	ldrh	r7, [r7, #4]
 80a1958:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a195c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a195e:	4600      	mov	r0, r0
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a19ce:	9b04      	ldr	r3, [sp, #16]
 80a19d0:	085b      	lsrs	r3, r3, #1
 80a19d2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a19d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a19d8:	3301      	adds	r3, #1
 80a19da:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a19dc:	2b17      	cmp	r3, #23
 80a19de:	f88d 3005 	strb.w	r3, [sp, #5]
 80a19e2:	f200 80e3 	bhi.w	80a1bac <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a19e6:	79e3      	ldrb	r3, [r4, #7]
 80a19e8:	6810      	ldr	r0, [r2, #0]
 80a19ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a19ee:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a19f2:	88bf      	ldrh	r7, [r7, #4]
 80a19f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a19f8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a19fa:	9803      	ldr	r0, [sp, #12]
 80a19fc:	9b04      	ldr	r3, [sp, #16]
 80a19fe:	4218      	tst	r0, r3
 80a1a00:	f47f af12 	bne.w	80a1828 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1a04:	4600      	mov	r0, r0
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a1a86:	79e3      	ldrb	r3, [r4, #7]
 80a1a88:	6810      	ldr	r0, [r2, #0]
 80a1a8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1a8e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1a92:	88bf      	ldrh	r7, [r7, #4]
 80a1a94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1a98:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1a9a:	4600      	mov	r0, r0
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
 80a1b0e:	bf00      	nop
 80a1b10:	bf00      	nop
 80a1b12:	bf00      	nop
 80a1b14:	bf00      	nop
 80a1b16:	bf00      	nop
 80a1b18:	bf00      	nop
 80a1b1a:	bf00      	nop
 80a1b1c:	bf00      	nop
 80a1b1e:	bf00      	nop
 80a1b20:	bf00      	nop
 80a1b22:	bf00      	nop
 80a1b24:	bf00      	nop
 80a1b26:	bf00      	nop
 80a1b28:	bf00      	nop
 80a1b2a:	bf00      	nop
 80a1b2c:	bf00      	nop
 80a1b2e:	bf00      	nop
 80a1b30:	bf00      	nop
 80a1b32:	bf00      	nop
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
 80a1b80:	bf00      	nop
 80a1b82:	bf00      	nop
 80a1b84:	bf00      	nop
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	bf00      	nop
 80a1baa:	e710      	b.n	80a19ce <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1bac:	468e      	mov	lr, r1
 80a1bae:	e60d      	b.n	80a17cc <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1bb0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a1bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1bb2:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a1bb4:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
 80a1bb8:	428c      	cmp	r4, r1
 80a1bba:	d927      	bls.n	80a1c0c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
 80a1bbc:	7a04      	ldrb	r4, [r0, #8]
 80a1bbe:	b144      	cbz	r4, 80a1bd2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
 80a1bc0:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a1bc2:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a1bc4:	436c      	muls	r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1bc6:	f3c2 2207 	ubfx	r2, r2, #8, #8
      g = (g * brightness) >> 8;
 80a1bca:	f3c3 2307 	ubfx	r3, r3, #8, #8
      b = (b * brightness) >> 8;
 80a1bce:	f3c4 2507 	ubfx	r5, r4, #8, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
 80a1bd2:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
 80a1bd4:	68c6      	ldr	r6, [r0, #12]
 80a1bd6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a1bda:	2f08      	cmp	r7, #8
 80a1bdc:	eb06 0401 	add.w	r4, r6, r1
 80a1be0:	d811      	bhi.n	80a1c06 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
 80a1be2:	2001      	movs	r0, #1
 80a1be4:	40b8      	lsls	r0, r7
 80a1be6:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
 80a1bea:	d108      	bne.n	80a1bfe <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a1bec:	06c0      	lsls	r0, r0, #27
 80a1bee:	d50a      	bpl.n	80a1c06 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1bf0:	2aff      	cmp	r2, #255	; 0xff
 80a1bf2:	bf08      	it	eq
 80a1bf4:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
 80a1bf6:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a1bf8:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a1bfa:	70a3      	strb	r3, [r4, #2]
 80a1bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1bfe:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a1c00:	7062      	strb	r2, [r4, #1]
          *p = b;
 80a1c02:	70a5      	strb	r5, [r4, #2]
 80a1c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1c06:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a1c08:	7063      	strb	r3, [r4, #1]
          *p = b;
 80a1c0a:	70a5      	strb	r5, [r4, #2]
 80a1c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a1c10 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1c10:	b508      	push	{r3, lr}
 80a1c12:	f000 f807 	bl	80a1c24 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1c16:	f000 f805 	bl	80a1c24 <HAL_Pin_Map>
 80a1c1a:	4b01      	ldr	r3, [pc, #4]	; (80a1c20 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1c1c:	6018      	str	r0, [r3, #0]
 80a1c1e:	bd08      	pop	{r3, pc}
 80a1c20:	2000049c 	.word	0x2000049c

080a1c24 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1c24:	b508      	push	{r3, lr}
 80a1c26:	4b02      	ldr	r3, [pc, #8]	; (80a1c30 <HAL_Pin_Map+0xc>)
 80a1c28:	681b      	ldr	r3, [r3, #0]
 80a1c2a:	681b      	ldr	r3, [r3, #0]
 80a1c2c:	9301      	str	r3, [sp, #4]
 80a1c2e:	bd08      	pop	{r3, pc}
 80a1c30:	080601b0 	.word	0x080601b0

080a1c34 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1c34:	b508      	push	{r3, lr}
 80a1c36:	4b02      	ldr	r3, [pc, #8]	; (80a1c40 <HAL_Pin_Mode+0xc>)
 80a1c38:	681b      	ldr	r3, [r3, #0]
 80a1c3a:	689b      	ldr	r3, [r3, #8]
 80a1c3c:	9301      	str	r3, [sp, #4]
 80a1c3e:	bd08      	pop	{r3, pc}
 80a1c40:	080601b0 	.word	0x080601b0

080a1c44 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1c44:	b508      	push	{r3, lr}
 80a1c46:	4b02      	ldr	r3, [pc, #8]	; (80a1c50 <HAL_Get_Pin_Mode+0xc>)
 80a1c48:	681b      	ldr	r3, [r3, #0]
 80a1c4a:	68db      	ldr	r3, [r3, #12]
 80a1c4c:	9301      	str	r3, [sp, #4]
 80a1c4e:	bd08      	pop	{r3, pc}
 80a1c50:	080601b0 	.word	0x080601b0

080a1c54 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1c54:	b508      	push	{r3, lr}
 80a1c56:	4b02      	ldr	r3, [pc, #8]	; (80a1c60 <HAL_GPIO_Write+0xc>)
 80a1c58:	681b      	ldr	r3, [r3, #0]
 80a1c5a:	691b      	ldr	r3, [r3, #16]
 80a1c5c:	9301      	str	r3, [sp, #4]
 80a1c5e:	bd08      	pop	{r3, pc}
 80a1c60:	080601b0 	.word	0x080601b0

080a1c64 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1c64:	b508      	push	{r3, lr}
 80a1c66:	4b02      	ldr	r3, [pc, #8]	; (80a1c70 <HAL_GPIO_Read+0xc>)
 80a1c68:	681b      	ldr	r3, [r3, #0]
 80a1c6a:	695b      	ldr	r3, [r3, #20]
 80a1c6c:	9301      	str	r3, [sp, #4]
 80a1c6e:	bd08      	pop	{r3, pc}
 80a1c70:	080601b0 	.word	0x080601b0

080a1c74 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1c74:	b508      	push	{r3, lr}
 80a1c76:	4b02      	ldr	r3, [pc, #8]	; (80a1c80 <HAL_SPI_Init+0xc>)
 80a1c78:	681b      	ldr	r3, [r3, #0]
 80a1c7a:	69db      	ldr	r3, [r3, #28]
 80a1c7c:	9301      	str	r3, [sp, #4]
 80a1c7e:	bd08      	pop	{r3, pc}
 80a1c80:	080601b4 	.word	0x080601b4

080a1c84 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1c84:	b508      	push	{r3, lr}
 80a1c86:	4b02      	ldr	r3, [pc, #8]	; (80a1c90 <HAL_SPI_Is_Enabled+0xc>)
 80a1c88:	681b      	ldr	r3, [r3, #0]
 80a1c8a:	6a1b      	ldr	r3, [r3, #32]
 80a1c8c:	9301      	str	r3, [sp, #4]
 80a1c8e:	bd08      	pop	{r3, pc}
 80a1c90:	080601b4 	.word	0x080601b4

080a1c94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1c94:	b508      	push	{r3, lr}
 80a1c96:	4b02      	ldr	r3, [pc, #8]	; (80a1ca0 <HAL_RNG_GetRandomNumber+0xc>)
 80a1c98:	681b      	ldr	r3, [r3, #0]
 80a1c9a:	685b      	ldr	r3, [r3, #4]
 80a1c9c:	9301      	str	r3, [sp, #4]
 80a1c9e:	bd08      	pop	{r3, pc}
 80a1ca0:	0806019c 	.word	0x0806019c

080a1ca4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1ca4:	b508      	push	{r3, lr}
 80a1ca6:	4b02      	ldr	r3, [pc, #8]	; (80a1cb0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1ca8:	681b      	ldr	r3, [r3, #0]
 80a1caa:	691b      	ldr	r3, [r3, #16]
 80a1cac:	9301      	str	r3, [sp, #4]
 80a1cae:	bd08      	pop	{r3, pc}
 80a1cb0:	0806019c 	.word	0x0806019c

080a1cb4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1cb4:	b508      	push	{r3, lr}
 80a1cb6:	4b02      	ldr	r3, [pc, #8]	; (80a1cc0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1cb8:	681b      	ldr	r3, [r3, #0]
 80a1cba:	695b      	ldr	r3, [r3, #20]
 80a1cbc:	9301      	str	r3, [sp, #4]
 80a1cbe:	bd08      	pop	{r3, pc}
 80a1cc0:	0806019c 	.word	0x0806019c

080a1cc4 <HAL_Core_Enter_Bootloader>:
DYNALIB_FN(2, hal_core, HAL_Core_Config, void(void))
DYNALIB_FN(3, hal_core, HAL_Core_Mode_Button_Pressed, bool(uint16_t))
DYNALIB_FN(4, hal_core, HAL_Core_Mode_Button_Reset, void(uint16_t))
DYNALIB_FN(5, hal_core, HAL_Core_System_Reset, void(void))
DYNALIB_FN(6, hal_core, HAL_Core_Factory_Reset, void(void))
DYNALIB_FN(7, hal_core, HAL_Core_Enter_Bootloader, void(bool))
 80a1cc4:	b508      	push	{r3, lr}
 80a1cc6:	4b02      	ldr	r3, [pc, #8]	; (80a1cd0 <HAL_Core_Enter_Bootloader+0xc>)
 80a1cc8:	681b      	ldr	r3, [r3, #0]
 80a1cca:	69db      	ldr	r3, [r3, #28]
 80a1ccc:	9301      	str	r3, [sp, #4]
 80a1cce:	bd08      	pop	{r3, pc}
 80a1cd0:	080601b8 	.word	0x080601b8

080a1cd4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1cd4:	b508      	push	{r3, lr}
 80a1cd6:	4b02      	ldr	r3, [pc, #8]	; (80a1ce0 <os_mutex_recursive_create+0xc>)
 80a1cd8:	681b      	ldr	r3, [r3, #0]
 80a1cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1cdc:	9301      	str	r3, [sp, #4]
 80a1cde:	bd08      	pop	{r3, pc}
 80a1ce0:	080601d0 	.word	0x080601d0

080a1ce4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1ce4:	b508      	push	{r3, lr}
 80a1ce6:	4b02      	ldr	r3, [pc, #8]	; (80a1cf0 <os_mutex_recursive_destroy+0xc>)
 80a1ce8:	681b      	ldr	r3, [r3, #0]
 80a1cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1cec:	9301      	str	r3, [sp, #4]
 80a1cee:	bd08      	pop	{r3, pc}
 80a1cf0:	080601d0 	.word	0x080601d0

080a1cf4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1cf4:	b508      	push	{r3, lr}
 80a1cf6:	4b02      	ldr	r3, [pc, #8]	; (80a1d00 <HAL_USART_Init+0xc>)
 80a1cf8:	681b      	ldr	r3, [r3, #0]
 80a1cfa:	699b      	ldr	r3, [r3, #24]
 80a1cfc:	9301      	str	r3, [sp, #4]
 80a1cfe:	bd08      	pop	{r3, pc}
 80a1d00:	080601c4 	.word	0x080601c4

080a1d04 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1d04:	b508      	push	{r3, lr}
 80a1d06:	4b02      	ldr	r3, [pc, #8]	; (80a1d10 <HAL_USART_Write_Data+0xc>)
 80a1d08:	681b      	ldr	r3, [r3, #0]
 80a1d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1d0c:	9301      	str	r3, [sp, #4]
 80a1d0e:	bd08      	pop	{r3, pc}
 80a1d10:	080601c4 	.word	0x080601c4

080a1d14 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1d14:	b508      	push	{r3, lr}
 80a1d16:	4b02      	ldr	r3, [pc, #8]	; (80a1d20 <HAL_USART_Available_Data+0xc>)
 80a1d18:	681b      	ldr	r3, [r3, #0]
 80a1d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1d1c:	9301      	str	r3, [sp, #4]
 80a1d1e:	bd08      	pop	{r3, pc}
 80a1d20:	080601c4 	.word	0x080601c4

080a1d24 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1d24:	b508      	push	{r3, lr}
 80a1d26:	4b02      	ldr	r3, [pc, #8]	; (80a1d30 <HAL_USART_Read_Data+0xc>)
 80a1d28:	681b      	ldr	r3, [r3, #0]
 80a1d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1d2c:	9301      	str	r3, [sp, #4]
 80a1d2e:	bd08      	pop	{r3, pc}
 80a1d30:	080601c4 	.word	0x080601c4

080a1d34 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1d34:	b508      	push	{r3, lr}
 80a1d36:	4b02      	ldr	r3, [pc, #8]	; (80a1d40 <HAL_USART_Peek_Data+0xc>)
 80a1d38:	681b      	ldr	r3, [r3, #0]
 80a1d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d3c:	9301      	str	r3, [sp, #4]
 80a1d3e:	bd08      	pop	{r3, pc}
 80a1d40:	080601c4 	.word	0x080601c4

080a1d44 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1d44:	b508      	push	{r3, lr}
 80a1d46:	4b02      	ldr	r3, [pc, #8]	; (80a1d50 <HAL_USART_Flush_Data+0xc>)
 80a1d48:	681b      	ldr	r3, [r3, #0]
 80a1d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1d4c:	9301      	str	r3, [sp, #4]
 80a1d4e:	bd08      	pop	{r3, pc}
 80a1d50:	080601c4 	.word	0x080601c4

080a1d54 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1d54:	b508      	push	{r3, lr}
 80a1d56:	4b02      	ldr	r3, [pc, #8]	; (80a1d60 <HAL_USART_Is_Enabled+0xc>)
 80a1d58:	681b      	ldr	r3, [r3, #0]
 80a1d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1d5c:	9301      	str	r3, [sp, #4]
 80a1d5e:	bd08      	pop	{r3, pc}
 80a1d60:	080601c4 	.word	0x080601c4

080a1d64 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1d64:	b508      	push	{r3, lr}
 80a1d66:	4b02      	ldr	r3, [pc, #8]	; (80a1d70 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1d68:	681b      	ldr	r3, [r3, #0]
 80a1d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1d6c:	9301      	str	r3, [sp, #4]
 80a1d6e:	bd08      	pop	{r3, pc}
 80a1d70:	080601c4 	.word	0x080601c4

080a1d74 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1d74:	b508      	push	{r3, lr}
 80a1d76:	4b02      	ldr	r3, [pc, #8]	; (80a1d80 <HAL_I2C_Write_Data+0xc>)
 80a1d78:	681b      	ldr	r3, [r3, #0]
 80a1d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1d7c:	9301      	str	r3, [sp, #4]
 80a1d7e:	bd08      	pop	{r3, pc}
 80a1d80:	080601ac 	.word	0x080601ac

080a1d84 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d84:	b508      	push	{r3, lr}
 80a1d86:	4b02      	ldr	r3, [pc, #8]	; (80a1d90 <HAL_I2C_Available_Data+0xc>)
 80a1d88:	681b      	ldr	r3, [r3, #0]
 80a1d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1d8c:	9301      	str	r3, [sp, #4]
 80a1d8e:	bd08      	pop	{r3, pc}
 80a1d90:	080601ac 	.word	0x080601ac

080a1d94 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d94:	b508      	push	{r3, lr}
 80a1d96:	4b02      	ldr	r3, [pc, #8]	; (80a1da0 <HAL_I2C_Read_Data+0xc>)
 80a1d98:	681b      	ldr	r3, [r3, #0]
 80a1d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1d9c:	9301      	str	r3, [sp, #4]
 80a1d9e:	bd08      	pop	{r3, pc}
 80a1da0:	080601ac 	.word	0x080601ac

080a1da4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1da4:	b508      	push	{r3, lr}
 80a1da6:	4b02      	ldr	r3, [pc, #8]	; (80a1db0 <HAL_I2C_Peek_Data+0xc>)
 80a1da8:	681b      	ldr	r3, [r3, #0]
 80a1daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1dac:	9301      	str	r3, [sp, #4]
 80a1dae:	bd08      	pop	{r3, pc}
 80a1db0:	080601ac 	.word	0x080601ac

080a1db4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1db4:	b508      	push	{r3, lr}
 80a1db6:	4b02      	ldr	r3, [pc, #8]	; (80a1dc0 <HAL_I2C_Flush_Data+0xc>)
 80a1db8:	681b      	ldr	r3, [r3, #0]
 80a1dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1dbc:	9301      	str	r3, [sp, #4]
 80a1dbe:	bd08      	pop	{r3, pc}
 80a1dc0:	080601ac 	.word	0x080601ac

080a1dc4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1dc4:	b508      	push	{r3, lr}
 80a1dc6:	4b02      	ldr	r3, [pc, #8]	; (80a1dd0 <HAL_I2C_Is_Enabled+0xc>)
 80a1dc8:	681b      	ldr	r3, [r3, #0]
 80a1dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1dcc:	9301      	str	r3, [sp, #4]
 80a1dce:	bd08      	pop	{r3, pc}
 80a1dd0:	080601ac 	.word	0x080601ac

080a1dd4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a1dd4:	b508      	push	{r3, lr}
 80a1dd6:	4b03      	ldr	r3, [pc, #12]	; (80a1de4 <HAL_I2C_Init+0x10>)
 80a1dd8:	681b      	ldr	r3, [r3, #0]
 80a1dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1dde:	9301      	str	r3, [sp, #4]
 80a1de0:	bd08      	pop	{r3, pc}
 80a1de2:	0000      	.short	0x0000
 80a1de4:	080601ac 	.word	0x080601ac

080a1de8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1de8:	b508      	push	{r3, lr}
 80a1dea:	4b02      	ldr	r3, [pc, #8]	; (80a1df4 <HAL_USB_USART_Init+0xc>)
 80a1dec:	681b      	ldr	r3, [r3, #0]
 80a1dee:	681b      	ldr	r3, [r3, #0]
 80a1df0:	9301      	str	r3, [sp, #4]
 80a1df2:	bd08      	pop	{r3, pc}
 80a1df4:	080601d8 	.word	0x080601d8

080a1df8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1df8:	b508      	push	{r3, lr}
 80a1dfa:	4b02      	ldr	r3, [pc, #8]	; (80a1e04 <HAL_USB_USART_Available_Data+0xc>)
 80a1dfc:	681b      	ldr	r3, [r3, #0]
 80a1dfe:	691b      	ldr	r3, [r3, #16]
 80a1e00:	9301      	str	r3, [sp, #4]
 80a1e02:	bd08      	pop	{r3, pc}
 80a1e04:	080601d8 	.word	0x080601d8

080a1e08 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1e08:	b508      	push	{r3, lr}
 80a1e0a:	4b02      	ldr	r3, [pc, #8]	; (80a1e14 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1e0c:	681b      	ldr	r3, [r3, #0]
 80a1e0e:	695b      	ldr	r3, [r3, #20]
 80a1e10:	9301      	str	r3, [sp, #4]
 80a1e12:	bd08      	pop	{r3, pc}
 80a1e14:	080601d8 	.word	0x080601d8

080a1e18 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1e18:	b508      	push	{r3, lr}
 80a1e1a:	4b02      	ldr	r3, [pc, #8]	; (80a1e24 <HAL_USB_USART_Receive_Data+0xc>)
 80a1e1c:	681b      	ldr	r3, [r3, #0]
 80a1e1e:	699b      	ldr	r3, [r3, #24]
 80a1e20:	9301      	str	r3, [sp, #4]
 80a1e22:	bd08      	pop	{r3, pc}
 80a1e24:	080601d8 	.word	0x080601d8

080a1e28 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1e28:	b508      	push	{r3, lr}
 80a1e2a:	4b02      	ldr	r3, [pc, #8]	; (80a1e34 <HAL_USB_USART_Send_Data+0xc>)
 80a1e2c:	681b      	ldr	r3, [r3, #0]
 80a1e2e:	69db      	ldr	r3, [r3, #28]
 80a1e30:	9301      	str	r3, [sp, #4]
 80a1e32:	bd08      	pop	{r3, pc}
 80a1e34:	080601d8 	.word	0x080601d8

080a1e38 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1e38:	b508      	push	{r3, lr}
 80a1e3a:	4b02      	ldr	r3, [pc, #8]	; (80a1e44 <HAL_USB_USART_Flush_Data+0xc>)
 80a1e3c:	681b      	ldr	r3, [r3, #0]
 80a1e3e:	6a1b      	ldr	r3, [r3, #32]
 80a1e40:	9301      	str	r3, [sp, #4]
 80a1e42:	bd08      	pop	{r3, pc}
 80a1e44:	080601d8 	.word	0x080601d8

080a1e48 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1e48:	b508      	push	{r3, lr}
 80a1e4a:	4b02      	ldr	r3, [pc, #8]	; (80a1e54 <inet_gethostbyname+0xc>)
 80a1e4c:	681b      	ldr	r3, [r3, #0]
 80a1e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1e50:	9301      	str	r3, [sp, #4]
 80a1e52:	bd08      	pop	{r3, pc}
 80a1e54:	080601c0 	.word	0x080601c0

080a1e58 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1e58:	b508      	push	{r3, lr}
 80a1e5a:	4b02      	ldr	r3, [pc, #8]	; (80a1e64 <set_system_mode+0xc>)
 80a1e5c:	681b      	ldr	r3, [r3, #0]
 80a1e5e:	685b      	ldr	r3, [r3, #4]
 80a1e60:	9301      	str	r3, [sp, #4]
 80a1e62:	bd08      	pop	{r3, pc}
 80a1e64:	080601a4 	.word	0x080601a4

080a1e68 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1e68:	b508      	push	{r3, lr}
 80a1e6a:	4b02      	ldr	r3, [pc, #8]	; (80a1e74 <system_delay_ms+0xc>)
 80a1e6c:	681b      	ldr	r3, [r3, #0]
 80a1e6e:	695b      	ldr	r3, [r3, #20]
 80a1e70:	9301      	str	r3, [sp, #4]
 80a1e72:	bd08      	pop	{r3, pc}
 80a1e74:	080601a4 	.word	0x080601a4

080a1e78 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1e78:	b508      	push	{r3, lr}
 80a1e7a:	4b03      	ldr	r3, [pc, #12]	; (80a1e88 <system_ctrl_set_app_request_handler+0x10>)
 80a1e7c:	681b      	ldr	r3, [r3, #0]
 80a1e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1e82:	9301      	str	r3, [sp, #4]
 80a1e84:	bd08      	pop	{r3, pc}
 80a1e86:	0000      	.short	0x0000
 80a1e88:	080601a4 	.word	0x080601a4

080a1e8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1e8c:	b508      	push	{r3, lr}
 80a1e8e:	4b03      	ldr	r3, [pc, #12]	; (80a1e9c <system_ctrl_set_result+0x10>)
 80a1e90:	681b      	ldr	r3, [r3, #0]
 80a1e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1e96:	9301      	str	r3, [sp, #4]
 80a1e98:	bd08      	pop	{r3, pc}
 80a1e9a:	0000      	.short	0x0000
 80a1e9c:	080601a4 	.word	0x080601a4

080a1ea0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ea0:	b508      	push	{r3, lr}
 80a1ea2:	4b02      	ldr	r3, [pc, #8]	; (80a1eac <network_connect+0xc>)
 80a1ea4:	681b      	ldr	r3, [r3, #0]
 80a1ea6:	685b      	ldr	r3, [r3, #4]
 80a1ea8:	9301      	str	r3, [sp, #4]
 80a1eaa:	bd08      	pop	{r3, pc}
 80a1eac:	080601c8 	.word	0x080601c8

080a1eb0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1eb0:	b508      	push	{r3, lr}
 80a1eb2:	4b02      	ldr	r3, [pc, #8]	; (80a1ebc <network_connecting+0xc>)
 80a1eb4:	681b      	ldr	r3, [r3, #0]
 80a1eb6:	689b      	ldr	r3, [r3, #8]
 80a1eb8:	9301      	str	r3, [sp, #4]
 80a1eba:	bd08      	pop	{r3, pc}
 80a1ebc:	080601c8 	.word	0x080601c8

080a1ec0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1ec0:	b508      	push	{r3, lr}
 80a1ec2:	4b02      	ldr	r3, [pc, #8]	; (80a1ecc <network_disconnect+0xc>)
 80a1ec4:	681b      	ldr	r3, [r3, #0]
 80a1ec6:	68db      	ldr	r3, [r3, #12]
 80a1ec8:	9301      	str	r3, [sp, #4]
 80a1eca:	bd08      	pop	{r3, pc}
 80a1ecc:	080601c8 	.word	0x080601c8

080a1ed0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1ed0:	b508      	push	{r3, lr}
 80a1ed2:	4b02      	ldr	r3, [pc, #8]	; (80a1edc <network_ready+0xc>)
 80a1ed4:	681b      	ldr	r3, [r3, #0]
 80a1ed6:	691b      	ldr	r3, [r3, #16]
 80a1ed8:	9301      	str	r3, [sp, #4]
 80a1eda:	bd08      	pop	{r3, pc}
 80a1edc:	080601c8 	.word	0x080601c8

080a1ee0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ee0:	b508      	push	{r3, lr}
 80a1ee2:	4b02      	ldr	r3, [pc, #8]	; (80a1eec <network_on+0xc>)
 80a1ee4:	681b      	ldr	r3, [r3, #0]
 80a1ee6:	695b      	ldr	r3, [r3, #20]
 80a1ee8:	9301      	str	r3, [sp, #4]
 80a1eea:	bd08      	pop	{r3, pc}
 80a1eec:	080601c8 	.word	0x080601c8

080a1ef0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ef0:	b508      	push	{r3, lr}
 80a1ef2:	4b02      	ldr	r3, [pc, #8]	; (80a1efc <network_off+0xc>)
 80a1ef4:	681b      	ldr	r3, [r3, #0]
 80a1ef6:	699b      	ldr	r3, [r3, #24]
 80a1ef8:	9301      	str	r3, [sp, #4]
 80a1efa:	bd08      	pop	{r3, pc}
 80a1efc:	080601c8 	.word	0x080601c8

080a1f00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1f00:	b508      	push	{r3, lr}
 80a1f02:	4b02      	ldr	r3, [pc, #8]	; (80a1f0c <network_listen+0xc>)
 80a1f04:	681b      	ldr	r3, [r3, #0]
 80a1f06:	69db      	ldr	r3, [r3, #28]
 80a1f08:	9301      	str	r3, [sp, #4]
 80a1f0a:	bd08      	pop	{r3, pc}
 80a1f0c:	080601c8 	.word	0x080601c8

080a1f10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1f10:	b508      	push	{r3, lr}
 80a1f12:	4b02      	ldr	r3, [pc, #8]	; (80a1f1c <network_listening+0xc>)
 80a1f14:	681b      	ldr	r3, [r3, #0]
 80a1f16:	6a1b      	ldr	r3, [r3, #32]
 80a1f18:	9301      	str	r3, [sp, #4]
 80a1f1a:	bd08      	pop	{r3, pc}
 80a1f1c:	080601c8 	.word	0x080601c8

080a1f20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1f20:	b508      	push	{r3, lr}
 80a1f22:	4b02      	ldr	r3, [pc, #8]	; (80a1f2c <network_set_listen_timeout+0xc>)
 80a1f24:	681b      	ldr	r3, [r3, #0]
 80a1f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1f28:	9301      	str	r3, [sp, #4]
 80a1f2a:	bd08      	pop	{r3, pc}
 80a1f2c:	080601c8 	.word	0x080601c8

080a1f30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1f30:	b508      	push	{r3, lr}
 80a1f32:	4b02      	ldr	r3, [pc, #8]	; (80a1f3c <network_get_listen_timeout+0xc>)
 80a1f34:	681b      	ldr	r3, [r3, #0]
 80a1f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1f38:	9301      	str	r3, [sp, #4]
 80a1f3a:	bd08      	pop	{r3, pc}
 80a1f3c:	080601c8 	.word	0x080601c8

080a1f40 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1f40:	b508      	push	{r3, lr}
 80a1f42:	4b02      	ldr	r3, [pc, #8]	; (80a1f4c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1f44:	681b      	ldr	r3, [r3, #0]
 80a1f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1f48:	9301      	str	r3, [sp, #4]
 80a1f4a:	bd08      	pop	{r3, pc}
 80a1f4c:	080601cc 	.word	0x080601cc

080a1f50 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1f50:	b508      	push	{r3, lr}
 80a1f52:	4b02      	ldr	r3, [pc, #8]	; (80a1f5c <malloc+0xc>)
 80a1f54:	681b      	ldr	r3, [r3, #0]
 80a1f56:	681b      	ldr	r3, [r3, #0]
 80a1f58:	9301      	str	r3, [sp, #4]
 80a1f5a:	bd08      	pop	{r3, pc}
 80a1f5c:	080601a0 	.word	0x080601a0

080a1f60 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1f60:	b508      	push	{r3, lr}
 80a1f62:	4b02      	ldr	r3, [pc, #8]	; (80a1f6c <free+0xc>)
 80a1f64:	681b      	ldr	r3, [r3, #0]
 80a1f66:	685b      	ldr	r3, [r3, #4]
 80a1f68:	9301      	str	r3, [sp, #4]
 80a1f6a:	bd08      	pop	{r3, pc}
 80a1f6c:	080601a0 	.word	0x080601a0

080a1f70 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1f70:	b570      	push	{r4, r5, r6, lr}
 80a1f72:	4604      	mov	r4, r0
 80a1f74:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1f76:	2500      	movs	r5, #0
 80a1f78:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1f7c:	f7ff feaa 	bl	80a1cd4 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a1f80:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a1f82:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a1f84:	f7ff fe76 	bl	80a1c74 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1f88:	6065      	str	r5, [r4, #4]
}
 80a1f8a:	4620      	mov	r0, r4
 80a1f8c:	bd70      	pop	{r4, r5, r6, pc}

080a1f8e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a1f8e:	7800      	ldrb	r0, [r0, #0]
 80a1f90:	f7ff be78 	b.w	80a1c84 <HAL_SPI_Is_Enabled>

080a1f94 <_ZN11SystemClass3dfuEb>:
void SystemClass::dfu(bool persist)
{
    // true  - DFU mode persist if firmware upgrade is not completed
    // false - Briefly enter DFU bootloader mode (works with latest bootloader only )
    //         Subsequent reset or power off-on will execute normal firmware
    HAL_Core_Enter_Bootloader(persist);
 80a1f94:	f7ff be96 	b.w	80a1cc4 <HAL_Core_Enter_Bootloader>

080a1f98 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1f9c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1f9e:	4c08      	ldr	r4, [pc, #32]	; (80a1fc0 <_GLOBAL__sub_I_System+0x28>)
 80a1fa0:	2000      	movs	r0, #0
 80a1fa2:	6020      	str	r0, [r4, #0]
 80a1fa4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1fa6:	71a0      	strb	r0, [r4, #6]
 80a1fa8:	8120      	strh	r0, [r4, #8]
 80a1faa:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1fac:	f7ff ff54 	bl	80a1e58 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1fb0:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1fb6:	4a03      	ldr	r2, [pc, #12]	; (80a1fc4 <_GLOBAL__sub_I_System+0x2c>)
 80a1fb8:	4903      	ldr	r1, [pc, #12]	; (80a1fc8 <_GLOBAL__sub_I_System+0x30>)
 80a1fba:	f000 bcc1 	b.w	80a2940 <__aeabi_atexit>
 80a1fbe:	bf00      	nop
 80a1fc0:	200004a0 	.word	0x200004a0
 80a1fc4:	20000068 	.word	0x20000068
 80a1fc8:	080a00af 	.word	0x080a00af

080a1fcc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1fce:	4606      	mov	r6, r0
 80a1fd0:	460d      	mov	r5, r1
 80a1fd2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1fd4:	2400      	movs	r4, #0
  while (size--) {
 80a1fd6:	42bd      	cmp	r5, r7
 80a1fd8:	d00c      	beq.n	80a1ff4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1fda:	6833      	ldr	r3, [r6, #0]
 80a1fdc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1fe0:	689b      	ldr	r3, [r3, #8]
 80a1fe2:	4630      	mov	r0, r6
 80a1fe4:	4798      	blx	r3
     if (chunk>=0)
 80a1fe6:	2800      	cmp	r0, #0
 80a1fe8:	db01      	blt.n	80a1fee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1fea:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1fec:	e7f3      	b.n	80a1fd6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1fee:	2c00      	cmp	r4, #0
 80a1ff0:	bf08      	it	eq
 80a1ff2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1ff4:	4620      	mov	r0, r4
 80a1ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ff8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1ff8:	b570      	push	{r4, r5, r6, lr}
 80a1ffa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1ffc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1ffe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2000:	b149      	cbz	r1, 80a2016 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2002:	f000 fe8b 	bl	80a2d1c <strlen>
 80a2006:	682b      	ldr	r3, [r5, #0]
 80a2008:	4602      	mov	r2, r0
 80a200a:	4621      	mov	r1, r4
 80a200c:	4628      	mov	r0, r5
    }
 80a200e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2012:	68db      	ldr	r3, [r3, #12]
 80a2014:	4718      	bx	r3
    }
 80a2016:	bd70      	pop	{r4, r5, r6, pc}

080a2018 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2018:	6803      	ldr	r3, [r0, #0]
 80a201a:	689b      	ldr	r3, [r3, #8]
 80a201c:	4718      	bx	r3

080a201e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a201e:	2a01      	cmp	r2, #1
 80a2020:	bf98      	it	ls
 80a2022:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2024:	b530      	push	{r4, r5, lr}
 80a2026:	460b      	mov	r3, r1
 80a2028:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a202a:	2100      	movs	r1, #0
 80a202c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2030:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a2034:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a2038:	fb05 3312 	mls	r3, r5, r2, r3
 80a203c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a203e:	2b09      	cmp	r3, #9
 80a2040:	bf94      	ite	ls
 80a2042:	3330      	addls	r3, #48	; 0x30
 80a2044:	3337      	addhi	r3, #55	; 0x37
 80a2046:	b2db      	uxtb	r3, r3
 80a2048:	4621      	mov	r1, r4
 80a204a:	f804 3901 	strb.w	r3, [r4], #-1
 80a204e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2050:	2d00      	cmp	r5, #0
 80a2052:	d1ef      	bne.n	80a2034 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2054:	f7ff ffd0 	bl	80a1ff8 <_ZN5Print5writeEPKc>
}
 80a2058:	b00b      	add	sp, #44	; 0x2c
 80a205a:	bd30      	pop	{r4, r5, pc}

080a205c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a205c:	2300      	movs	r3, #0
 80a205e:	461a      	mov	r2, r3
 80a2060:	4619      	mov	r1, r3
 80a2062:	6840      	ldr	r0, [r0, #4]
 80a2064:	f7ff bf3c 	b.w	80a1ee0 <network_on>

080a2068 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2068:	4a01      	ldr	r2, [pc, #4]	; (80a2070 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a206a:	4b02      	ldr	r3, [pc, #8]	; (80a2074 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a206c:	601a      	str	r2, [r3, #0]
 80a206e:	4770      	bx	lr
 80a2070:	080a2dca 	.word	0x080a2dca
 80a2074:	200004ac 	.word	0x200004ac

080a2078 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2078:	4b02      	ldr	r3, [pc, #8]	; (80a2084 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a207a:	681a      	ldr	r2, [r3, #0]
 80a207c:	4b02      	ldr	r3, [pc, #8]	; (80a2088 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a207e:	601a      	str	r2, [r3, #0]
 80a2080:	4770      	bx	lr
 80a2082:	bf00      	nop
 80a2084:	20000000 	.word	0x20000000
 80a2088:	200004b0 	.word	0x200004b0

080a208c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a208c:	2100      	movs	r1, #0
 80a208e:	f7ff beeb 	b.w	80a1e68 <system_delay_ms>

080a2092 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2092:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2094:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2096:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2098:	b113      	cbz	r3, 80a20a0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a209a:	2203      	movs	r2, #3
 80a209c:	4601      	mov	r1, r0
 80a209e:	4798      	blx	r3
    }
 80a20a0:	4620      	mov	r0, r4
 80a20a2:	bd10      	pop	{r4, pc}

080a20a4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a20a4:	b510      	push	{r4, lr}
 80a20a6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a20a8:	f7ff fff3 	bl	80a2092 <_ZNSt14_Function_baseD1Ev>
 80a20ac:	4620      	mov	r0, r4
 80a20ae:	bd10      	pop	{r4, pc}

080a20b0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a20b0:	4803      	ldr	r0, [pc, #12]	; (80a20c0 <_GLOBAL__sub_I_RGB+0x10>)
 80a20b2:	2300      	movs	r3, #0
 80a20b4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a20b6:	4a03      	ldr	r2, [pc, #12]	; (80a20c4 <_GLOBAL__sub_I_RGB+0x14>)
 80a20b8:	4903      	ldr	r1, [pc, #12]	; (80a20c8 <_GLOBAL__sub_I_RGB+0x18>)
 80a20ba:	f000 bc41 	b.w	80a2940 <__aeabi_atexit>
 80a20be:	bf00      	nop
 80a20c0:	200004b4 	.word	0x200004b4
 80a20c4:	20000068 	.word	0x20000068
 80a20c8:	080a20a5 	.word	0x080a20a5

080a20cc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a20cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a20ce:	4b14      	ldr	r3, [pc, #80]	; (80a2120 <serialEventRun+0x54>)
 80a20d0:	b133      	cbz	r3, 80a20e0 <serialEventRun+0x14>
 80a20d2:	f000 f967 	bl	80a23a4 <_Z16_fetch_usbserialv>
 80a20d6:	6803      	ldr	r3, [r0, #0]
 80a20d8:	691b      	ldr	r3, [r3, #16]
 80a20da:	4798      	blx	r3
 80a20dc:	2800      	cmp	r0, #0
 80a20de:	dc16      	bgt.n	80a210e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a20e0:	4b10      	ldr	r3, [pc, #64]	; (80a2124 <serialEventRun+0x58>)
 80a20e2:	b133      	cbz	r3, 80a20f2 <serialEventRun+0x26>
 80a20e4:	f000 fa1c 	bl	80a2520 <_Z22__fetch_global_Serial1v>
 80a20e8:	6803      	ldr	r3, [r0, #0]
 80a20ea:	691b      	ldr	r3, [r3, #16]
 80a20ec:	4798      	blx	r3
 80a20ee:	2800      	cmp	r0, #0
 80a20f0:	dc10      	bgt.n	80a2114 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a20f2:	4b0d      	ldr	r3, [pc, #52]	; (80a2128 <serialEventRun+0x5c>)
 80a20f4:	b10b      	cbz	r3, 80a20fa <serialEventRun+0x2e>
 80a20f6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a20fa:	4b0c      	ldr	r3, [pc, #48]	; (80a212c <serialEventRun+0x60>)
 80a20fc:	b17b      	cbz	r3, 80a211e <serialEventRun+0x52>
 80a20fe:	f000 f98d 	bl	80a241c <_Z17_fetch_usbserial1v>
 80a2102:	6803      	ldr	r3, [r0, #0]
 80a2104:	691b      	ldr	r3, [r3, #16]
 80a2106:	4798      	blx	r3
 80a2108:	2800      	cmp	r0, #0
 80a210a:	dc06      	bgt.n	80a211a <serialEventRun+0x4e>
 80a210c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a210e:	f3af 8000 	nop.w
 80a2112:	e7e5      	b.n	80a20e0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2114:	f3af 8000 	nop.w
 80a2118:	e7eb      	b.n	80a20f2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a211a:	f3af 8000 	nop.w
 80a211e:	bd08      	pop	{r3, pc}
	...

080a2130 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2130:	b508      	push	{r3, lr}
	serialEventRun();
 80a2132:	f7ff ffcb 	bl	80a20cc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2136:	f7ff fdbd 	bl	80a1cb4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a213a:	4b01      	ldr	r3, [pc, #4]	; (80a2140 <_post_loop+0x10>)
 80a213c:	6018      	str	r0, [r3, #0]
 80a213e:	bd08      	pop	{r3, pc}
 80a2140:	20000948 	.word	0x20000948

080a2144 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2144:	4802      	ldr	r0, [pc, #8]	; (80a2150 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2146:	4a03      	ldr	r2, [pc, #12]	; (80a2154 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2148:	4903      	ldr	r1, [pc, #12]	; (80a2158 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a214a:	1a12      	subs	r2, r2, r0
 80a214c:	f000 bd70 	b.w	80a2c30 <memcpy>
 80a2150:	40024000 	.word	0x40024000
 80a2154:	40024004 	.word	0x40024004
 80a2158:	080a3010 	.word	0x080a3010

080a215c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a215c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a215e:	2300      	movs	r3, #0
 80a2160:	9300      	str	r3, [sp, #0]
 80a2162:	461a      	mov	r2, r3
 80a2164:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2168:	f7ff fe90 	bl	80a1e8c <system_ctrl_set_result>
}
 80a216c:	b003      	add	sp, #12
 80a216e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2174 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2174:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2176:	8843      	ldrh	r3, [r0, #2]
 80a2178:	2b0a      	cmp	r3, #10
 80a217a:	d008      	beq.n	80a218e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a217c:	2b50      	cmp	r3, #80	; 0x50
 80a217e:	d109      	bne.n	80a2194 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2180:	4b09      	ldr	r3, [pc, #36]	; (80a21a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2182:	681b      	ldr	r3, [r3, #0]
 80a2184:	b13b      	cbz	r3, 80a2196 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2186:	b003      	add	sp, #12
 80a2188:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a218c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a218e:	f7ff ffe5 	bl	80a215c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2192:	e006      	b.n	80a21a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2194:	2300      	movs	r3, #0
 80a2196:	9300      	str	r3, [sp, #0]
 80a2198:	461a      	mov	r2, r3
 80a219a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a219e:	f7ff fe75 	bl	80a1e8c <system_ctrl_set_result>
        break;
    }
}
 80a21a2:	b003      	add	sp, #12
 80a21a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a21a8:	200004c4 	.word	0x200004c4

080a21ac <module_user_init_hook>:

void module_user_init_hook()
{
 80a21ac:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a21ae:	4c10      	ldr	r4, [pc, #64]	; (80a21f0 <module_user_init_hook+0x44>)
 80a21b0:	4d10      	ldr	r5, [pc, #64]	; (80a21f4 <module_user_init_hook+0x48>)
 80a21b2:	6823      	ldr	r3, [r4, #0]
 80a21b4:	42ab      	cmp	r3, r5
 80a21b6:	4b10      	ldr	r3, [pc, #64]	; (80a21f8 <module_user_init_hook+0x4c>)
 80a21b8:	bf0c      	ite	eq
 80a21ba:	2201      	moveq	r2, #1
 80a21bc:	2200      	movne	r2, #0
 80a21be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a21c0:	d002      	beq.n	80a21c8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a21c2:	f7ff ffbf 	bl	80a2144 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a21c6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a21c8:	f7ff fd64 	bl	80a1c94 <HAL_RNG_GetRandomNumber>
 80a21cc:	4604      	mov	r4, r0
    srand(seed);
 80a21ce:	f000 fd43 	bl	80a2c58 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a21d2:	4b0a      	ldr	r3, [pc, #40]	; (80a21fc <module_user_init_hook+0x50>)
 80a21d4:	b113      	cbz	r3, 80a21dc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a21d6:	4620      	mov	r0, r4
 80a21d8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a21dc:	2100      	movs	r1, #0
 80a21de:	4807      	ldr	r0, [pc, #28]	; (80a21fc <module_user_init_hook+0x50>)
 80a21e0:	f7ff feae 	bl	80a1f40 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a21e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a21e8:	2100      	movs	r1, #0
 80a21ea:	4805      	ldr	r0, [pc, #20]	; (80a2200 <module_user_init_hook+0x54>)
 80a21ec:	f7ff be44 	b.w	80a1e78 <system_ctrl_set_app_request_handler>
 80a21f0:	40024000 	.word	0x40024000
 80a21f4:	9a271c1e 	.word	0x9a271c1e
 80a21f8:	200004c8 	.word	0x200004c8
 80a21fc:	00000000 	.word	0x00000000
 80a2200:	080a2175 	.word	0x080a2175

080a2204 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2204:	4770      	bx	lr

080a2206 <_ZN9IPAddressD0Ev>:
 80a2206:	b510      	push	{r4, lr}
 80a2208:	4604      	mov	r4, r0
 80a220a:	2118      	movs	r1, #24
 80a220c:	f000 fba6 	bl	80a295c <_ZdlPvj>
 80a2210:	4620      	mov	r0, r4
 80a2212:	bd10      	pop	{r4, pc}

080a2214 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2216:	460f      	mov	r7, r1
 80a2218:	f100 0608 	add.w	r6, r0, #8
 80a221c:	1d05      	adds	r5, r0, #4
 80a221e:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a2220:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2224:	220a      	movs	r2, #10
 80a2226:	4638      	mov	r0, r7
 80a2228:	f7ff fef9 	bl	80a201e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a222c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a222e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2230:	d007      	beq.n	80a2242 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2232:	2c00      	cmp	r4, #0
 80a2234:	d0f4      	beq.n	80a2220 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2236:	212e      	movs	r1, #46	; 0x2e
 80a2238:	4638      	mov	r0, r7
 80a223a:	f7ff feed 	bl	80a2018 <_ZN5Print5printEc>
 80a223e:	4404      	add	r4, r0
 80a2240:	e7ee      	b.n	80a2220 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2242:	4620      	mov	r0, r4
 80a2244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2248 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2248:	b510      	push	{r4, lr}
 80a224a:	4604      	mov	r4, r0
 80a224c:	4b04      	ldr	r3, [pc, #16]	; (80a2260 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a224e:	2211      	movs	r2, #17
 80a2250:	f840 3b04 	str.w	r3, [r0], #4
 80a2254:	2100      	movs	r1, #0
 80a2256:	f000 fcf6 	bl	80a2c46 <memset>
{
    clear();
}
 80a225a:	4620      	mov	r0, r4
 80a225c:	bd10      	pop	{r4, pc}
 80a225e:	bf00      	nop
 80a2260:	080a2e6c 	.word	0x080a2e6c

080a2264 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2264:	4603      	mov	r3, r0
 80a2266:	4a07      	ldr	r2, [pc, #28]	; (80a2284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2268:	b510      	push	{r4, lr}
 80a226a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a226e:	f101 0210 	add.w	r2, r1, #16
 80a2272:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2276:	4291      	cmp	r1, r2
 80a2278:	f843 4b04 	str.w	r4, [r3], #4
 80a227c:	d1f9      	bne.n	80a2272 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a227e:	780a      	ldrb	r2, [r1, #0]
 80a2280:	701a      	strb	r2, [r3, #0]
}
 80a2282:	bd10      	pop	{r4, pc}
 80a2284:	080a2e6c 	.word	0x080a2e6c

080a2288 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2288:	4a02      	ldr	r2, [pc, #8]	; (80a2294 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a228a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a228c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a228e:	2204      	movs	r2, #4
 80a2290:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2292:	4770      	bx	lr
 80a2294:	080a2e6c 	.word	0x080a2e6c

080a2298 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2298:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a229a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a229e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a22a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a22a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a22aa:	2304      	movs	r3, #4
 80a22ac:	6041      	str	r1, [r0, #4]
 80a22ae:	7503      	strb	r3, [r0, #20]
 80a22b0:	bd10      	pop	{r4, pc}
	...

080a22b4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a22b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a22b6:	4d04      	ldr	r5, [pc, #16]	; (80a22c8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a22b8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a22ba:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a22be:	9500      	str	r5, [sp, #0]
 80a22c0:	f7ff ffea 	bl	80a2298 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a22c4:	b003      	add	sp, #12
 80a22c6:	bd30      	pop	{r4, r5, pc}
 80a22c8:	080a2e6c 	.word	0x080a2e6c

080a22cc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a22cc:	7441      	strb	r1, [r0, #17]
 80a22ce:	4770      	bx	lr

080a22d0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a22d0:	4770      	bx	lr

080a22d2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a22d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a22d4:	2100      	movs	r1, #0
 80a22d6:	7c00      	ldrb	r0, [r0, #16]
 80a22d8:	f7ff fd9e 	bl	80a1e18 <HAL_USB_USART_Receive_Data>
}
 80a22dc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a22e0:	bf28      	it	cs
 80a22e2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a22e6:	bd08      	pop	{r3, pc}

080a22e8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a22e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a22ea:	2101      	movs	r1, #1
 80a22ec:	7c00      	ldrb	r0, [r0, #16]
 80a22ee:	f7ff fd93 	bl	80a1e18 <HAL_USB_USART_Receive_Data>
}
 80a22f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a22f6:	bf28      	it	cs
 80a22f8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a22fc:	bd08      	pop	{r3, pc}

080a22fe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a22fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2300:	7c00      	ldrb	r0, [r0, #16]
 80a2302:	f7ff fd81 	bl	80a1e08 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2306:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a230a:	bd08      	pop	{r3, pc}

080a230c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a230c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a230e:	7c00      	ldrb	r0, [r0, #16]
 80a2310:	f7ff fd72 	bl	80a1df8 <HAL_USB_USART_Available_Data>
}
 80a2314:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2318:	bd08      	pop	{r3, pc}

080a231a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a231a:	7c00      	ldrb	r0, [r0, #16]
 80a231c:	f7ff bd8c 	b.w	80a1e38 <HAL_USB_USART_Flush_Data>

080a2320 <_ZN9USBSerialD0Ev>:
 80a2320:	b510      	push	{r4, lr}
 80a2322:	4604      	mov	r4, r0
 80a2324:	2114      	movs	r1, #20
 80a2326:	f000 fb19 	bl	80a295c <_ZdlPvj>
 80a232a:	4620      	mov	r0, r4
 80a232c:	bd10      	pop	{r4, pc}

080a232e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a232e:	b538      	push	{r3, r4, r5, lr}
 80a2330:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2332:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2334:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2336:	f7ff fd67 	bl	80a1e08 <HAL_USB_USART_Available_Data_For_Write>
 80a233a:	2800      	cmp	r0, #0
 80a233c:	dc01      	bgt.n	80a2342 <_ZN9USBSerial5writeEh+0x14>
 80a233e:	7c60      	ldrb	r0, [r4, #17]
 80a2340:	b128      	cbz	r0, 80a234e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2342:	4629      	mov	r1, r5
 80a2344:	7c20      	ldrb	r0, [r4, #16]
 80a2346:	f7ff fd6f 	bl	80a1e28 <HAL_USB_USART_Send_Data>
 80a234a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a234e:	bd38      	pop	{r3, r4, r5, pc}

080a2350 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2350:	b510      	push	{r4, lr}
 80a2352:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2354:	2300      	movs	r3, #0
 80a2356:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a235c:	60a3      	str	r3, [r4, #8]
 80a235e:	4b05      	ldr	r3, [pc, #20]	; (80a2374 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2360:	4608      	mov	r0, r1
 80a2362:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2364:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2366:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2368:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a236a:	4611      	mov	r1, r2
 80a236c:	f7ff fd3c 	bl	80a1de8 <HAL_USB_USART_Init>
}
 80a2370:	4620      	mov	r0, r4
 80a2372:	bd10      	pop	{r4, pc}
 80a2374:	080a2e80 	.word	0x080a2e80

080a2378 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2378:	b510      	push	{r4, lr}
 80a237a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a237c:	2214      	movs	r2, #20
 80a237e:	2100      	movs	r1, #0
 80a2380:	f000 fc61 	bl	80a2c46 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2384:	4b05      	ldr	r3, [pc, #20]	; (80a239c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2386:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2388:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a238a:	4b05      	ldr	r3, [pc, #20]	; (80a23a0 <_Z19acquireSerialBufferv+0x28>)
 80a238c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a238e:	f240 1301 	movw	r3, #257	; 0x101
 80a2392:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2394:	2381      	movs	r3, #129	; 0x81
 80a2396:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2398:	bd10      	pop	{r4, pc}
 80a239a:	bf00      	nop
 80a239c:	20000551 	.word	0x20000551
 80a23a0:	200004d0 	.word	0x200004d0

080a23a4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a23a4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a23a6:	4d0e      	ldr	r5, [pc, #56]	; (80a23e0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a23a8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a23aa:	a801      	add	r0, sp, #4
 80a23ac:	f7ff ffe4 	bl	80a2378 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a23b0:	6829      	ldr	r1, [r5, #0]
 80a23b2:	f011 0401 	ands.w	r4, r1, #1
 80a23b6:	d110      	bne.n	80a23da <_Z16_fetch_usbserialv+0x36>
 80a23b8:	4628      	mov	r0, r5
 80a23ba:	f7fd fe70 	bl	80a009e <__cxa_guard_acquire>
 80a23be:	b160      	cbz	r0, 80a23da <_Z16_fetch_usbserialv+0x36>
 80a23c0:	aa01      	add	r2, sp, #4
 80a23c2:	4621      	mov	r1, r4
 80a23c4:	4807      	ldr	r0, [pc, #28]	; (80a23e4 <_Z16_fetch_usbserialv+0x40>)
 80a23c6:	f7ff ffc3 	bl	80a2350 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a23ca:	4628      	mov	r0, r5
 80a23cc:	f7fd fe6c 	bl	80a00a8 <__cxa_guard_release>
 80a23d0:	4a05      	ldr	r2, [pc, #20]	; (80a23e8 <_Z16_fetch_usbserialv+0x44>)
 80a23d2:	4906      	ldr	r1, [pc, #24]	; (80a23ec <_Z16_fetch_usbserialv+0x48>)
 80a23d4:	4803      	ldr	r0, [pc, #12]	; (80a23e4 <_Z16_fetch_usbserialv+0x40>)
 80a23d6:	f000 fab3 	bl	80a2940 <__aeabi_atexit>
	return _usbserial;
}
 80a23da:	4802      	ldr	r0, [pc, #8]	; (80a23e4 <_Z16_fetch_usbserialv+0x40>)
 80a23dc:	b007      	add	sp, #28
 80a23de:	bd30      	pop	{r4, r5, pc}
 80a23e0:	200004cc 	.word	0x200004cc
 80a23e4:	20000654 	.word	0x20000654
 80a23e8:	20000068 	.word	0x20000068
 80a23ec:	080a22d1 	.word	0x080a22d1

080a23f0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a23f0:	b510      	push	{r4, lr}
 80a23f2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a23f4:	2214      	movs	r2, #20
 80a23f6:	2100      	movs	r1, #0
 80a23f8:	f000 fc25 	bl	80a2c46 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a23fc:	4b05      	ldr	r3, [pc, #20]	; (80a2414 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a23fe:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2400:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2402:	4b05      	ldr	r3, [pc, #20]	; (80a2418 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2404:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2406:	f240 1301 	movw	r3, #257	; 0x101
 80a240a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a240c:	2381      	movs	r3, #129	; 0x81
 80a240e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2410:	bd10      	pop	{r4, pc}
 80a2412:	bf00      	nop
 80a2414:	20000704 	.word	0x20000704
 80a2418:	2000066c 	.word	0x2000066c

080a241c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a241c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a241e:	4c0e      	ldr	r4, [pc, #56]	; (80a2458 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2420:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2422:	a801      	add	r0, sp, #4
 80a2424:	f7ff ffe4 	bl	80a23f0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2428:	6823      	ldr	r3, [r4, #0]
 80a242a:	07db      	lsls	r3, r3, #31
 80a242c:	d410      	bmi.n	80a2450 <_Z17_fetch_usbserial1v+0x34>
 80a242e:	4620      	mov	r0, r4
 80a2430:	f7fd fe35 	bl	80a009e <__cxa_guard_acquire>
 80a2434:	b160      	cbz	r0, 80a2450 <_Z17_fetch_usbserial1v+0x34>
 80a2436:	aa01      	add	r2, sp, #4
 80a2438:	2101      	movs	r1, #1
 80a243a:	4808      	ldr	r0, [pc, #32]	; (80a245c <_Z17_fetch_usbserial1v+0x40>)
 80a243c:	f7ff ff88 	bl	80a2350 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2440:	4620      	mov	r0, r4
 80a2442:	f7fd fe31 	bl	80a00a8 <__cxa_guard_release>
 80a2446:	4a06      	ldr	r2, [pc, #24]	; (80a2460 <_Z17_fetch_usbserial1v+0x44>)
 80a2448:	4906      	ldr	r1, [pc, #24]	; (80a2464 <_Z17_fetch_usbserial1v+0x48>)
 80a244a:	4804      	ldr	r0, [pc, #16]	; (80a245c <_Z17_fetch_usbserial1v+0x40>)
 80a244c:	f000 fa78 	bl	80a2940 <__aeabi_atexit>
  return _usbserial1;
}
 80a2450:	4802      	ldr	r0, [pc, #8]	; (80a245c <_Z17_fetch_usbserial1v+0x40>)
 80a2452:	b006      	add	sp, #24
 80a2454:	bd10      	pop	{r4, pc}
 80a2456:	bf00      	nop
 80a2458:	20000668 	.word	0x20000668
 80a245c:	200006f0 	.word	0x200006f0
 80a2460:	20000068 	.word	0x20000068
 80a2464:	080a22d1 	.word	0x080a22d1

080a2468 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2468:	4770      	bx	lr

080a246a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a246a:	7441      	strb	r1, [r0, #17]
 80a246c:	4770      	bx	lr

080a246e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a246e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2470:	7c00      	ldrb	r0, [r0, #16]
 80a2472:	f7ff fc77 	bl	80a1d64 <HAL_USART_Available_Data_For_Write>
}
 80a2476:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a247a:	bd08      	pop	{r3, pc}

080a247c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a247c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a247e:	7c00      	ldrb	r0, [r0, #16]
 80a2480:	f7ff fc48 	bl	80a1d14 <HAL_USART_Available_Data>
}
 80a2484:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2488:	bd08      	pop	{r3, pc}

080a248a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a248a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a248c:	7c00      	ldrb	r0, [r0, #16]
 80a248e:	f7ff fc51 	bl	80a1d34 <HAL_USART_Peek_Data>
}
 80a2492:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2496:	bf28      	it	cs
 80a2498:	f04f 30ff 	movcs.w	r0, #4294967295
 80a249c:	bd08      	pop	{r3, pc}

080a249e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a249e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a24a0:	7c00      	ldrb	r0, [r0, #16]
 80a24a2:	f7ff fc3f 	bl	80a1d24 <HAL_USART_Read_Data>
}
 80a24a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a24aa:	bf28      	it	cs
 80a24ac:	f04f 30ff 	movcs.w	r0, #4294967295
 80a24b0:	bd08      	pop	{r3, pc}

080a24b2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a24b2:	7c00      	ldrb	r0, [r0, #16]
 80a24b4:	f7ff bc46 	b.w	80a1d44 <HAL_USART_Flush_Data>

080a24b8 <_ZN11USARTSerialD0Ev>:
 80a24b8:	b510      	push	{r4, lr}
 80a24ba:	4604      	mov	r4, r0
 80a24bc:	2114      	movs	r1, #20
 80a24be:	f000 fa4d 	bl	80a295c <_ZdlPvj>
 80a24c2:	4620      	mov	r0, r4
 80a24c4:	bd10      	pop	{r4, pc}

080a24c6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a24c6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a24c8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a24ca:	4604      	mov	r4, r0
 80a24cc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a24ce:	b925      	cbnz	r5, 80a24da <_ZN11USARTSerial5writeEh+0x14>
 80a24d0:	7c00      	ldrb	r0, [r0, #16]
 80a24d2:	f7ff fc47 	bl	80a1d64 <HAL_USART_Available_Data_For_Write>
 80a24d6:	2800      	cmp	r0, #0
 80a24d8:	dd05      	ble.n	80a24e6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a24da:	4631      	mov	r1, r6
 80a24dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a24de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a24e2:	f7ff bc0f 	b.w	80a1d04 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a24e6:	4628      	mov	r0, r5
 80a24e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a24ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a24ec:	b510      	push	{r4, lr}
 80a24ee:	4604      	mov	r4, r0
 80a24f0:	4608      	mov	r0, r1
 80a24f2:	4611      	mov	r1, r2
 80a24f4:	2200      	movs	r2, #0
 80a24f6:	6062      	str	r2, [r4, #4]
 80a24f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a24fc:	60a2      	str	r2, [r4, #8]
 80a24fe:	4a05      	ldr	r2, [pc, #20]	; (80a2514 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2500:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2502:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2504:	2201      	movs	r2, #1
 80a2506:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2508:	461a      	mov	r2, r3
 80a250a:	f7ff fbf3 	bl	80a1cf4 <HAL_USART_Init>
}
 80a250e:	4620      	mov	r0, r4
 80a2510:	bd10      	pop	{r4, pc}
 80a2512:	bf00      	nop
 80a2514:	080a2eb0 	.word	0x080a2eb0

080a2518 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2518:	7c00      	ldrb	r0, [r0, #16]
 80a251a:	f7ff bc1b 	b.w	80a1d54 <HAL_USART_Is_Enabled>
	...

080a2520 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2520:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2522:	4d0c      	ldr	r5, [pc, #48]	; (80a2554 <_Z22__fetch_global_Serial1v+0x34>)
 80a2524:	6829      	ldr	r1, [r5, #0]
 80a2526:	f011 0401 	ands.w	r4, r1, #1
 80a252a:	d111      	bne.n	80a2550 <_Z22__fetch_global_Serial1v+0x30>
 80a252c:	4628      	mov	r0, r5
 80a252e:	f7fd fdb6 	bl	80a009e <__cxa_guard_acquire>
 80a2532:	b168      	cbz	r0, 80a2550 <_Z22__fetch_global_Serial1v+0x30>
 80a2534:	4a08      	ldr	r2, [pc, #32]	; (80a2558 <_Z22__fetch_global_Serial1v+0x38>)
 80a2536:	4621      	mov	r1, r4
 80a2538:	4b08      	ldr	r3, [pc, #32]	; (80a255c <_Z22__fetch_global_Serial1v+0x3c>)
 80a253a:	4809      	ldr	r0, [pc, #36]	; (80a2560 <_Z22__fetch_global_Serial1v+0x40>)
 80a253c:	f7ff ffd6 	bl	80a24ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2540:	4628      	mov	r0, r5
 80a2542:	f7fd fdb1 	bl	80a00a8 <__cxa_guard_release>
 80a2546:	4a07      	ldr	r2, [pc, #28]	; (80a2564 <_Z22__fetch_global_Serial1v+0x44>)
 80a2548:	4907      	ldr	r1, [pc, #28]	; (80a2568 <_Z22__fetch_global_Serial1v+0x48>)
 80a254a:	4805      	ldr	r0, [pc, #20]	; (80a2560 <_Z22__fetch_global_Serial1v+0x40>)
 80a254c:	f000 f9f8 	bl	80a2940 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2550:	4803      	ldr	r0, [pc, #12]	; (80a2560 <_Z22__fetch_global_Serial1v+0x40>)
 80a2552:	bd38      	pop	{r3, r4, r5, pc}
 80a2554:	200008a0 	.word	0x200008a0
 80a2558:	200008a4 	.word	0x200008a4
 80a255c:	2000081c 	.word	0x2000081c
 80a2560:	20000808 	.word	0x20000808
 80a2564:	20000068 	.word	0x20000068
 80a2568:	080a2469 	.word	0x080a2469

080a256c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a256c:	4770      	bx	lr

080a256e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a256e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2570:	4606      	mov	r6, r0
 80a2572:	4615      	mov	r5, r2
 80a2574:	460c      	mov	r4, r1
 80a2576:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2578:	42bc      	cmp	r4, r7
 80a257a:	d006      	beq.n	80a258a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a257c:	6833      	ldr	r3, [r6, #0]
 80a257e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2582:	689b      	ldr	r3, [r3, #8]
 80a2584:	4630      	mov	r0, r6
 80a2586:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2588:	e7f6      	b.n	80a2578 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a258a:	4628      	mov	r0, r5
 80a258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a258e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a258e:	2200      	movs	r2, #0
 80a2590:	7c00      	ldrb	r0, [r0, #16]
 80a2592:	f7ff bbef 	b.w	80a1d74 <HAL_I2C_Write_Data>

080a2596 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2596:	2100      	movs	r1, #0
 80a2598:	7c00      	ldrb	r0, [r0, #16]
 80a259a:	f7ff bbf3 	b.w	80a1d84 <HAL_I2C_Available_Data>

080a259e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a259e:	2100      	movs	r1, #0
 80a25a0:	7c00      	ldrb	r0, [r0, #16]
 80a25a2:	f7ff bbf7 	b.w	80a1d94 <HAL_I2C_Read_Data>

080a25a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a25a6:	2100      	movs	r1, #0
 80a25a8:	7c00      	ldrb	r0, [r0, #16]
 80a25aa:	f7ff bbfb 	b.w	80a1da4 <HAL_I2C_Peek_Data>

080a25ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a25ae:	2100      	movs	r1, #0
 80a25b0:	7c00      	ldrb	r0, [r0, #16]
 80a25b2:	f7ff bbff 	b.w	80a1db4 <HAL_I2C_Flush_Data>

080a25b6 <_ZN7TwoWireD0Ev>:
 80a25b6:	b510      	push	{r4, lr}
 80a25b8:	4604      	mov	r4, r0
 80a25ba:	2114      	movs	r1, #20
 80a25bc:	f000 f9ce 	bl	80a295c <_ZdlPvj>
 80a25c0:	4620      	mov	r0, r4
 80a25c2:	bd10      	pop	{r4, pc}

080a25c4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a25c4:	b510      	push	{r4, lr}
 80a25c6:	4604      	mov	r4, r0
 80a25c8:	2300      	movs	r3, #0
 80a25ca:	6063      	str	r3, [r4, #4]
 80a25cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a25d0:	60a3      	str	r3, [r4, #8]
 80a25d2:	4b04      	ldr	r3, [pc, #16]	; (80a25e4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a25d4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a25d6:	4608      	mov	r0, r1
 80a25d8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a25da:	4611      	mov	r1, r2
 80a25dc:	f7ff fbfa 	bl	80a1dd4 <HAL_I2C_Init>
}
 80a25e0:	4620      	mov	r0, r4
 80a25e2:	bd10      	pop	{r4, pc}
 80a25e4:	080a2ee0 	.word	0x080a2ee0

080a25e8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a25e8:	2100      	movs	r1, #0
 80a25ea:	7c00      	ldrb	r0, [r0, #16]
 80a25ec:	f7ff bbea 	b.w	80a1dc4 <HAL_I2C_Is_Enabled>

080a25f0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a25f0:	b510      	push	{r4, lr}
  if (0 == max) {
 80a25f2:	4604      	mov	r4, r0
 80a25f4:	b130      	cbz	r0, 80a2604 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
 80a25f6:	f000 fb57 	bl	80a2ca8 <rand>
 80a25fa:	fb90 f3f4 	sdiv	r3, r0, r4
 80a25fe:	fb03 0014 	mls	r0, r3, r4, r0
 80a2602:	bd10      	pop	{r4, pc}
}
 80a2604:	bd10      	pop	{r4, pc}

080a2606 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2606:	2200      	movs	r2, #0
 80a2608:	4611      	mov	r1, r2
 80a260a:	6840      	ldr	r0, [r0, #4]
 80a260c:	f7ff bc60 	b.w	80a1ed0 <network_ready>

080a2610 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2610:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2612:	4616      	mov	r6, r2
 80a2614:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2616:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2618:	460f      	mov	r7, r1
 80a261a:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a261c:	2100      	movs	r1, #0
 80a261e:	a803      	add	r0, sp, #12
 80a2620:	f000 fb11 	bl	80a2c46 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2624:	4630      	mov	r0, r6
 80a2626:	f000 fb79 	bl	80a2d1c <strlen>
 80a262a:	2500      	movs	r5, #0
 80a262c:	9500      	str	r5, [sp, #0]
 80a262e:	b281      	uxth	r1, r0
 80a2630:	687b      	ldr	r3, [r7, #4]
 80a2632:	aa03      	add	r2, sp, #12
 80a2634:	4630      	mov	r0, r6
 80a2636:	f7ff fc07 	bl	80a1e48 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a263a:	b120      	cbz	r0, 80a2646 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a263c:	4629      	mov	r1, r5
 80a263e:	4620      	mov	r0, r4
 80a2640:	f7ff fe22 	bl	80a2288 <_ZN9IPAddressC1Em>
 80a2644:	e003      	b.n	80a264e <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2646:	a903      	add	r1, sp, #12
 80a2648:	4620      	mov	r0, r4
 80a264a:	f7ff fe0b 	bl	80a2264 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a264e:	4620      	mov	r0, r4
 80a2650:	b009      	add	sp, #36	; 0x24
 80a2652:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2654 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2654:	2200      	movs	r2, #0
 80a2656:	4611      	mov	r1, r2
 80a2658:	6840      	ldr	r0, [r0, #4]
 80a265a:	f7ff bc59 	b.w	80a1f10 <network_listening>

080a265e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a265e:	2200      	movs	r2, #0
 80a2660:	4611      	mov	r1, r2
 80a2662:	6840      	ldr	r0, [r0, #4]
 80a2664:	f7ff bc64 	b.w	80a1f30 <network_get_listen_timeout>

080a2668 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2668:	2200      	movs	r2, #0
 80a266a:	6840      	ldr	r0, [r0, #4]
 80a266c:	f7ff bc58 	b.w	80a1f20 <network_set_listen_timeout>

080a2670 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2670:	2200      	movs	r2, #0
 80a2672:	f081 0101 	eor.w	r1, r1, #1
 80a2676:	6840      	ldr	r0, [r0, #4]
 80a2678:	f7ff bc42 	b.w	80a1f00 <network_listen>

080a267c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a267c:	2300      	movs	r3, #0
 80a267e:	461a      	mov	r2, r3
 80a2680:	4619      	mov	r1, r3
 80a2682:	6840      	ldr	r0, [r0, #4]
 80a2684:	f7ff bc34 	b.w	80a1ef0 <network_off>

080a2688 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2688:	2200      	movs	r2, #0
 80a268a:	4611      	mov	r1, r2
 80a268c:	6840      	ldr	r0, [r0, #4]
 80a268e:	f7ff bc0f 	b.w	80a1eb0 <network_connecting>

080a2692 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2692:	2200      	movs	r2, #0
 80a2694:	2102      	movs	r1, #2
 80a2696:	6840      	ldr	r0, [r0, #4]
 80a2698:	f7ff bc12 	b.w	80a1ec0 <network_disconnect>

080a269c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a269c:	2300      	movs	r3, #0
 80a269e:	461a      	mov	r2, r3
 80a26a0:	6840      	ldr	r0, [r0, #4]
 80a26a2:	f7ff bbfd 	b.w	80a1ea0 <network_connect>
	...

080a26a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a26a8:	4b02      	ldr	r3, [pc, #8]	; (80a26b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a26aa:	2204      	movs	r2, #4
 80a26ac:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a26ae:	4a02      	ldr	r2, [pc, #8]	; (80a26b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a26b0:	601a      	str	r2, [r3, #0]
 80a26b2:	4770      	bx	lr
 80a26b4:	20000928 	.word	0x20000928
 80a26b8:	080a2f08 	.word	0x080a2f08

080a26bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a26bc:	2300      	movs	r3, #0
 80a26be:	461a      	mov	r2, r3
 80a26c0:	6840      	ldr	r0, [r0, #4]
 80a26c2:	f7ff bbed 	b.w	80a1ea0 <network_connect>

080a26c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a26c6:	2200      	movs	r2, #0
 80a26c8:	2102      	movs	r1, #2
 80a26ca:	6840      	ldr	r0, [r0, #4]
 80a26cc:	f7ff bbf8 	b.w	80a1ec0 <network_disconnect>

080a26d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a26d0:	2200      	movs	r2, #0
 80a26d2:	4611      	mov	r1, r2
 80a26d4:	6840      	ldr	r0, [r0, #4]
 80a26d6:	f7ff bbeb 	b.w	80a1eb0 <network_connecting>

080a26da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a26da:	2200      	movs	r2, #0
 80a26dc:	4611      	mov	r1, r2
 80a26de:	6840      	ldr	r0, [r0, #4]
 80a26e0:	f7ff bbf6 	b.w	80a1ed0 <network_ready>

080a26e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a26e4:	2300      	movs	r3, #0
 80a26e6:	461a      	mov	r2, r3
 80a26e8:	4619      	mov	r1, r3
 80a26ea:	6840      	ldr	r0, [r0, #4]
 80a26ec:	f7ff bbf8 	b.w	80a1ee0 <network_on>

080a26f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a26f0:	2300      	movs	r3, #0
 80a26f2:	461a      	mov	r2, r3
 80a26f4:	4619      	mov	r1, r3
 80a26f6:	6840      	ldr	r0, [r0, #4]
 80a26f8:	f7ff bbfa 	b.w	80a1ef0 <network_off>

080a26fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a26fc:	2200      	movs	r2, #0
 80a26fe:	f081 0101 	eor.w	r1, r1, #1
 80a2702:	6840      	ldr	r0, [r0, #4]
 80a2704:	f7ff bbfc 	b.w	80a1f00 <network_listen>

080a2708 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2708:	2200      	movs	r2, #0
 80a270a:	6840      	ldr	r0, [r0, #4]
 80a270c:	f7ff bc08 	b.w	80a1f20 <network_set_listen_timeout>

080a2710 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2710:	2200      	movs	r2, #0
 80a2712:	4611      	mov	r1, r2
 80a2714:	6840      	ldr	r0, [r0, #4]
 80a2716:	f7ff bc0b 	b.w	80a1f30 <network_get_listen_timeout>

080a271a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a271a:	2200      	movs	r2, #0
 80a271c:	4611      	mov	r1, r2
 80a271e:	6840      	ldr	r0, [r0, #4]
 80a2720:	f7ff bbf6 	b.w	80a1f10 <network_listening>

080a2724 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2724:	b570      	push	{r4, r5, r6, lr}
 80a2726:	4616      	mov	r6, r2
 80a2728:	b08e      	sub	sp, #56	; 0x38
 80a272a:	4604      	mov	r4, r0
    IPAddress addr;
 80a272c:	a808      	add	r0, sp, #32
 80a272e:	f7ff fd8b 	bl	80a2248 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2732:	2211      	movs	r2, #17
 80a2734:	2100      	movs	r1, #0
 80a2736:	a803      	add	r0, sp, #12
 80a2738:	f000 fa85 	bl	80a2c46 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a273c:	4630      	mov	r0, r6
 80a273e:	f000 faed 	bl	80a2d1c <strlen>
 80a2742:	2500      	movs	r5, #0
 80a2744:	4b0a      	ldr	r3, [pc, #40]	; (80a2770 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2746:	9500      	str	r5, [sp, #0]
 80a2748:	b281      	uxth	r1, r0
 80a274a:	685b      	ldr	r3, [r3, #4]
 80a274c:	aa03      	add	r2, sp, #12
 80a274e:	4630      	mov	r0, r6
 80a2750:	f7ff fb7a 	bl	80a1e48 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2754:	b120      	cbz	r0, 80a2760 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2756:	4629      	mov	r1, r5
 80a2758:	4620      	mov	r0, r4
 80a275a:	f7ff fd95 	bl	80a2288 <_ZN9IPAddressC1Em>
 80a275e:	e003      	b.n	80a2768 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2760:	a903      	add	r1, sp, #12
 80a2762:	4620      	mov	r0, r4
 80a2764:	f7ff fd7e 	bl	80a2264 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2768:	4620      	mov	r0, r4
 80a276a:	b00e      	add	sp, #56	; 0x38
 80a276c:	bd70      	pop	{r4, r5, r6, pc}
 80a276e:	bf00      	nop
 80a2770:	20000928 	.word	0x20000928

080a2774 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2774:	4b02      	ldr	r3, [pc, #8]	; (80a2780 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2776:	4a03      	ldr	r2, [pc, #12]	; (80a2784 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2778:	601a      	str	r2, [r3, #0]
 80a277a:	2200      	movs	r2, #0
 80a277c:	605a      	str	r2, [r3, #4]
 80a277e:	4770      	bx	lr
 80a2780:	20000930 	.word	0x20000930
 80a2784:	080a2f3c 	.word	0x080a2f3c

080a2788 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a2788:	b510      	push	{r4, lr}
 80a278a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a278c:	6880      	ldr	r0, [r0, #8]
 80a278e:	b108      	cbz	r0, 80a2794 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2790:	f7ff faa8 	bl	80a1ce4 <os_mutex_recursive_destroy>
 80a2794:	4620      	mov	r0, r4
 80a2796:	bd10      	pop	{r4, pc}

080a2798 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2798:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a279a:	4e1a      	ldr	r6, [pc, #104]	; (80a2804 <pinAvailable+0x6c>)
 80a279c:	4604      	mov	r4, r0
 80a279e:	6831      	ldr	r1, [r6, #0]
 80a27a0:	f011 0501 	ands.w	r5, r1, #1
 80a27a4:	d10f      	bne.n	80a27c6 <pinAvailable+0x2e>
 80a27a6:	4630      	mov	r0, r6
 80a27a8:	f7fd fc79 	bl	80a009e <__cxa_guard_acquire>
 80a27ac:	b158      	cbz	r0, 80a27c6 <pinAvailable+0x2e>
 80a27ae:	4629      	mov	r1, r5
 80a27b0:	4815      	ldr	r0, [pc, #84]	; (80a2808 <pinAvailable+0x70>)
 80a27b2:	f7ff fbdd 	bl	80a1f70 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a27b6:	4630      	mov	r0, r6
 80a27b8:	f7fd fc76 	bl	80a00a8 <__cxa_guard_release>
 80a27bc:	4a13      	ldr	r2, [pc, #76]	; (80a280c <pinAvailable+0x74>)
 80a27be:	4914      	ldr	r1, [pc, #80]	; (80a2810 <pinAvailable+0x78>)
 80a27c0:	4811      	ldr	r0, [pc, #68]	; (80a2808 <pinAvailable+0x70>)
 80a27c2:	f000 f8bd 	bl	80a2940 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a27c6:	4810      	ldr	r0, [pc, #64]	; (80a2808 <pinAvailable+0x70>)
 80a27c8:	f7ff fbe1 	bl	80a1f8e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a27cc:	b128      	cbz	r0, 80a27da <pinAvailable+0x42>
 80a27ce:	f1a4 030d 	sub.w	r3, r4, #13
 80a27d2:	2b02      	cmp	r3, #2
 80a27d4:	d801      	bhi.n	80a27da <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a27d6:	2000      	movs	r0, #0
 80a27d8:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a27da:	f000 f88b 	bl	80a28f4 <_Z19__fetch_global_Wirev>
 80a27de:	f7ff ff03 	bl	80a25e8 <_ZN7TwoWire9isEnabledEv>
 80a27e2:	b108      	cbz	r0, 80a27e8 <pinAvailable+0x50>
 80a27e4:	2c01      	cmp	r4, #1
 80a27e6:	d9f6      	bls.n	80a27d6 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a27e8:	f7ff fe9a 	bl	80a2520 <_Z22__fetch_global_Serial1v>
 80a27ec:	f7ff fe94 	bl	80a2518 <_ZN11USARTSerial9isEnabledEv>
 80a27f0:	b118      	cbz	r0, 80a27fa <pinAvailable+0x62>
 80a27f2:	f1a4 0312 	sub.w	r3, r4, #18
 80a27f6:	2b01      	cmp	r3, #1
 80a27f8:	d9ed      	bls.n	80a27d6 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a27fa:	2c17      	cmp	r4, #23
 80a27fc:	bf8c      	ite	hi
 80a27fe:	2000      	movhi	r0, #0
 80a2800:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2802:	bd70      	pop	{r4, r5, r6, pc}
 80a2804:	20000938 	.word	0x20000938
 80a2808:	2000093c 	.word	0x2000093c
 80a280c:	20000068 	.word	0x20000068
 80a2810:	080a2789 	.word	0x080a2789

080a2814 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2814:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2816:	b538      	push	{r3, r4, r5, lr}
 80a2818:	4604      	mov	r4, r0
 80a281a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a281c:	d80a      	bhi.n	80a2834 <pinMode+0x20>
 80a281e:	29ff      	cmp	r1, #255	; 0xff
 80a2820:	d008      	beq.n	80a2834 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2822:	f7ff ffb9 	bl	80a2798 <pinAvailable>
 80a2826:	b128      	cbz	r0, 80a2834 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2828:	4629      	mov	r1, r5
 80a282a:	4620      	mov	r0, r4
}
 80a282c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2830:	f7ff ba00 	b.w	80a1c34 <HAL_Pin_Mode>
 80a2834:	bd38      	pop	{r3, r4, r5, pc}

080a2836 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2836:	b538      	push	{r3, r4, r5, lr}
 80a2838:	4604      	mov	r4, r0
 80a283a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a283c:	f7ff fa02 	bl	80a1c44 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2840:	28ff      	cmp	r0, #255	; 0xff
 80a2842:	d010      	beq.n	80a2866 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2844:	2806      	cmp	r0, #6
 80a2846:	d804      	bhi.n	80a2852 <digitalWrite+0x1c>
 80a2848:	234d      	movs	r3, #77	; 0x4d
 80a284a:	fa23 f000 	lsr.w	r0, r3, r0
 80a284e:	07c3      	lsls	r3, r0, #31
 80a2850:	d409      	bmi.n	80a2866 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2852:	4620      	mov	r0, r4
 80a2854:	f7ff ffa0 	bl	80a2798 <pinAvailable>
 80a2858:	b128      	cbz	r0, 80a2866 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a285a:	4629      	mov	r1, r5
 80a285c:	4620      	mov	r0, r4
}
 80a285e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2862:	f7ff b9f7 	b.w	80a1c54 <HAL_GPIO_Write>
 80a2866:	bd38      	pop	{r3, r4, r5, pc}

080a2868 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2868:	b510      	push	{r4, lr}
 80a286a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a286c:	f7ff f9ea 	bl	80a1c44 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2870:	3804      	subs	r0, #4
 80a2872:	b2c0      	uxtb	r0, r0
 80a2874:	2801      	cmp	r0, #1
 80a2876:	d908      	bls.n	80a288a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2878:	4620      	mov	r0, r4
 80a287a:	f7ff ff8d 	bl	80a2798 <pinAvailable>
 80a287e:	b120      	cbz	r0, 80a288a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2880:	4620      	mov	r0, r4
}
 80a2882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2886:	f7ff b9ed 	b.w	80a1c64 <HAL_GPIO_Read>
}
 80a288a:	2000      	movs	r0, #0
 80a288c:	bd10      	pop	{r4, pc}
	...

080a2890 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2890:	b513      	push	{r0, r1, r4, lr}
 80a2892:	4c08      	ldr	r4, [pc, #32]	; (80a28b4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2894:	2300      	movs	r3, #0
 80a2896:	461a      	mov	r2, r3
 80a2898:	4619      	mov	r1, r3
 80a289a:	9300      	str	r3, [sp, #0]
 80a289c:	4620      	mov	r0, r4
 80a289e:	f7ff fd09 	bl	80a22b4 <_ZN9IPAddressC1Ehhhh>
 80a28a2:	4620      	mov	r0, r4
 80a28a4:	4a04      	ldr	r2, [pc, #16]	; (80a28b8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a28a6:	4905      	ldr	r1, [pc, #20]	; (80a28bc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a28a8:	b002      	add	sp, #8
 80a28aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a28ae:	f000 b847 	b.w	80a2940 <__aeabi_atexit>
 80a28b2:	bf00      	nop
 80a28b4:	2000094c 	.word	0x2000094c
 80a28b8:	20000068 	.word	0x20000068
 80a28bc:	080a2205 	.word	0x080a2205

080a28c0 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a28c0:	b570      	push	{r4, r5, r6, lr}
 80a28c2:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a28c4:	2514      	movs	r5, #20
 80a28c6:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a28c8:	4e09      	ldr	r6, [pc, #36]	; (80a28f0 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a28ca:	2100      	movs	r1, #0
 80a28cc:	f000 f9bb 	bl	80a2c46 <memset>
 80a28d0:	8025      	strh	r5, [r4, #0]
 80a28d2:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a28d4:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a28d6:	60a5      	str	r5, [r4, #8]
 80a28d8:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a28da:	4628      	mov	r0, r5
 80a28dc:	f000 f840 	bl	80a2960 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a28e0:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a28e2:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a28e4:	4628      	mov	r0, r5
 80a28e6:	f000 f83b 	bl	80a2960 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a28ea:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a28ec:	4620      	mov	r0, r4
 80a28ee:	bd70      	pop	{r4, r5, r6, pc}
 80a28f0:	080a2f68 	.word	0x080a2f68

080a28f4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a28f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a28f6:	4d0e      	ldr	r5, [pc, #56]	; (80a2930 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a28f8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a28fa:	6829      	ldr	r1, [r5, #0]
 80a28fc:	f011 0401 	ands.w	r4, r1, #1
 80a2900:	d113      	bne.n	80a292a <_Z19__fetch_global_Wirev+0x36>
 80a2902:	4628      	mov	r0, r5
 80a2904:	f7fd fbcb 	bl	80a009e <__cxa_guard_acquire>
 80a2908:	b178      	cbz	r0, 80a292a <_Z19__fetch_global_Wirev+0x36>
 80a290a:	a801      	add	r0, sp, #4
 80a290c:	f7ff ffd8 	bl	80a28c0 <_Z17acquireWireBufferv>
 80a2910:	aa01      	add	r2, sp, #4
 80a2912:	4621      	mov	r1, r4
 80a2914:	4807      	ldr	r0, [pc, #28]	; (80a2934 <_Z19__fetch_global_Wirev+0x40>)
 80a2916:	f7ff fe55 	bl	80a25c4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a291a:	4628      	mov	r0, r5
 80a291c:	f7fd fbc4 	bl	80a00a8 <__cxa_guard_release>
 80a2920:	4a05      	ldr	r2, [pc, #20]	; (80a2938 <_Z19__fetch_global_Wirev+0x44>)
 80a2922:	4906      	ldr	r1, [pc, #24]	; (80a293c <_Z19__fetch_global_Wirev+0x48>)
 80a2924:	4803      	ldr	r0, [pc, #12]	; (80a2934 <_Z19__fetch_global_Wirev+0x40>)
 80a2926:	f000 f80b 	bl	80a2940 <__aeabi_atexit>
	return wire;
}
 80a292a:	4802      	ldr	r0, [pc, #8]	; (80a2934 <_Z19__fetch_global_Wirev+0x40>)
 80a292c:	b007      	add	sp, #28
 80a292e:	bd30      	pop	{r4, r5, pc}
 80a2930:	20000964 	.word	0x20000964
 80a2934:	20000968 	.word	0x20000968
 80a2938:	20000068 	.word	0x20000068
 80a293c:	080a256d 	.word	0x080a256d

080a2940 <__aeabi_atexit>:
 80a2940:	460b      	mov	r3, r1
 80a2942:	4601      	mov	r1, r0
 80a2944:	4618      	mov	r0, r3
 80a2946:	f000 b965 	b.w	80a2c14 <__cxa_atexit>
	...

080a294c <_ZSt15get_new_handlerv>:
 80a294c:	4b02      	ldr	r3, [pc, #8]	; (80a2958 <_ZSt15get_new_handlerv+0xc>)
 80a294e:	6818      	ldr	r0, [r3, #0]
 80a2950:	f3bf 8f5f 	dmb	sy
 80a2954:	4770      	bx	lr
 80a2956:	bf00      	nop
 80a2958:	2000097c 	.word	0x2000097c

080a295c <_ZdlPvj>:
 80a295c:	f7fd bb9d 	b.w	80a009a <_ZdlPv>

080a2960 <_ZnajRKSt9nothrow_t>:
 80a2960:	f000 b800 	b.w	80a2964 <_ZnwjRKSt9nothrow_t>

080a2964 <_ZnwjRKSt9nothrow_t>:
 80a2964:	b510      	push	{r4, lr}
 80a2966:	2800      	cmp	r0, #0
 80a2968:	bf14      	ite	ne
 80a296a:	4604      	movne	r4, r0
 80a296c:	2401      	moveq	r4, #1
 80a296e:	4620      	mov	r0, r4
 80a2970:	f7ff faee 	bl	80a1f50 <malloc>
 80a2974:	b920      	cbnz	r0, 80a2980 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2976:	f7ff ffe9 	bl	80a294c <_ZSt15get_new_handlerv>
 80a297a:	b108      	cbz	r0, 80a2980 <_ZnwjRKSt9nothrow_t+0x1c>
 80a297c:	4780      	blx	r0
 80a297e:	e7f6      	b.n	80a296e <_ZnwjRKSt9nothrow_t+0xa>
 80a2980:	bd10      	pop	{r4, pc}
	...

080a2984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2984:	4b18      	ldr	r3, [pc, #96]	; (80a29e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2986:	681a      	ldr	r2, [r3, #0]
 80a2988:	07d1      	lsls	r1, r2, #31
 80a298a:	bf5c      	itt	pl
 80a298c:	2201      	movpl	r2, #1
 80a298e:	601a      	strpl	r2, [r3, #0]
 80a2990:	4b16      	ldr	r3, [pc, #88]	; (80a29ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2992:	681a      	ldr	r2, [r3, #0]
 80a2994:	07d2      	lsls	r2, r2, #31
 80a2996:	bf5c      	itt	pl
 80a2998:	2201      	movpl	r2, #1
 80a299a:	601a      	strpl	r2, [r3, #0]
 80a299c:	4b14      	ldr	r3, [pc, #80]	; (80a29f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a299e:	681a      	ldr	r2, [r3, #0]
 80a29a0:	07d0      	lsls	r0, r2, #31
 80a29a2:	bf5c      	itt	pl
 80a29a4:	2201      	movpl	r2, #1
 80a29a6:	601a      	strpl	r2, [r3, #0]
 80a29a8:	4b12      	ldr	r3, [pc, #72]	; (80a29f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a29aa:	681a      	ldr	r2, [r3, #0]
 80a29ac:	07d1      	lsls	r1, r2, #31
 80a29ae:	bf5c      	itt	pl
 80a29b0:	2201      	movpl	r2, #1
 80a29b2:	601a      	strpl	r2, [r3, #0]
 80a29b4:	4b10      	ldr	r3, [pc, #64]	; (80a29f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a29b6:	681a      	ldr	r2, [r3, #0]
 80a29b8:	07d2      	lsls	r2, r2, #31
 80a29ba:	bf5c      	itt	pl
 80a29bc:	2201      	movpl	r2, #1
 80a29be:	601a      	strpl	r2, [r3, #0]
 80a29c0:	4b0e      	ldr	r3, [pc, #56]	; (80a29fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a29c2:	681a      	ldr	r2, [r3, #0]
 80a29c4:	07d0      	lsls	r0, r2, #31
 80a29c6:	bf5c      	itt	pl
 80a29c8:	2201      	movpl	r2, #1
 80a29ca:	601a      	strpl	r2, [r3, #0]
 80a29cc:	4b0c      	ldr	r3, [pc, #48]	; (80a2a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a29ce:	681a      	ldr	r2, [r3, #0]
 80a29d0:	07d1      	lsls	r1, r2, #31
 80a29d2:	bf5c      	itt	pl
 80a29d4:	2201      	movpl	r2, #1
 80a29d6:	601a      	strpl	r2, [r3, #0]
 80a29d8:	4b0a      	ldr	r3, [pc, #40]	; (80a2a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a29da:	681a      	ldr	r2, [r3, #0]
 80a29dc:	07d2      	lsls	r2, r2, #31
 80a29de:	bf5c      	itt	pl
 80a29e0:	2201      	movpl	r2, #1
 80a29e2:	601a      	strpl	r2, [r3, #0]
 80a29e4:	4770      	bx	lr
 80a29e6:	bf00      	nop
 80a29e8:	2000099c 	.word	0x2000099c
 80a29ec:	20000998 	.word	0x20000998
 80a29f0:	20000994 	.word	0x20000994
 80a29f4:	20000990 	.word	0x20000990
 80a29f8:	2000098c 	.word	0x2000098c
 80a29fc:	20000988 	.word	0x20000988
 80a2a00:	20000984 	.word	0x20000984
 80a2a04:	20000980 	.word	0x20000980

080a2a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2a08:	4b24      	ldr	r3, [pc, #144]	; (80a2a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2a0a:	681a      	ldr	r2, [r3, #0]
 80a2a0c:	07d0      	lsls	r0, r2, #31
 80a2a0e:	bf5c      	itt	pl
 80a2a10:	2201      	movpl	r2, #1
 80a2a12:	601a      	strpl	r2, [r3, #0]
 80a2a14:	4b22      	ldr	r3, [pc, #136]	; (80a2aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2a16:	681a      	ldr	r2, [r3, #0]
 80a2a18:	07d1      	lsls	r1, r2, #31
 80a2a1a:	bf5c      	itt	pl
 80a2a1c:	2201      	movpl	r2, #1
 80a2a1e:	601a      	strpl	r2, [r3, #0]
 80a2a20:	4b20      	ldr	r3, [pc, #128]	; (80a2aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2a22:	681a      	ldr	r2, [r3, #0]
 80a2a24:	07d2      	lsls	r2, r2, #31
 80a2a26:	bf5c      	itt	pl
 80a2a28:	2201      	movpl	r2, #1
 80a2a2a:	601a      	strpl	r2, [r3, #0]
 80a2a2c:	4b1e      	ldr	r3, [pc, #120]	; (80a2aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2a2e:	681a      	ldr	r2, [r3, #0]
 80a2a30:	07d0      	lsls	r0, r2, #31
 80a2a32:	bf5c      	itt	pl
 80a2a34:	2201      	movpl	r2, #1
 80a2a36:	601a      	strpl	r2, [r3, #0]
 80a2a38:	4b1c      	ldr	r3, [pc, #112]	; (80a2aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2a3a:	681a      	ldr	r2, [r3, #0]
 80a2a3c:	07d1      	lsls	r1, r2, #31
 80a2a3e:	bf5c      	itt	pl
 80a2a40:	2201      	movpl	r2, #1
 80a2a42:	601a      	strpl	r2, [r3, #0]
 80a2a44:	4b1a      	ldr	r3, [pc, #104]	; (80a2ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2a46:	681a      	ldr	r2, [r3, #0]
 80a2a48:	07d2      	lsls	r2, r2, #31
 80a2a4a:	bf5c      	itt	pl
 80a2a4c:	2201      	movpl	r2, #1
 80a2a4e:	601a      	strpl	r2, [r3, #0]
 80a2a50:	4b18      	ldr	r3, [pc, #96]	; (80a2ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2a52:	681a      	ldr	r2, [r3, #0]
 80a2a54:	07d0      	lsls	r0, r2, #31
 80a2a56:	bf5c      	itt	pl
 80a2a58:	2201      	movpl	r2, #1
 80a2a5a:	601a      	strpl	r2, [r3, #0]
 80a2a5c:	4b16      	ldr	r3, [pc, #88]	; (80a2ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2a5e:	681a      	ldr	r2, [r3, #0]
 80a2a60:	07d1      	lsls	r1, r2, #31
 80a2a62:	bf5c      	itt	pl
 80a2a64:	2201      	movpl	r2, #1
 80a2a66:	601a      	strpl	r2, [r3, #0]
 80a2a68:	4b14      	ldr	r3, [pc, #80]	; (80a2abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2a6a:	681a      	ldr	r2, [r3, #0]
 80a2a6c:	07d2      	lsls	r2, r2, #31
 80a2a6e:	bf5c      	itt	pl
 80a2a70:	2201      	movpl	r2, #1
 80a2a72:	601a      	strpl	r2, [r3, #0]
 80a2a74:	4b12      	ldr	r3, [pc, #72]	; (80a2ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2a76:	681a      	ldr	r2, [r3, #0]
 80a2a78:	07d0      	lsls	r0, r2, #31
 80a2a7a:	bf5c      	itt	pl
 80a2a7c:	2201      	movpl	r2, #1
 80a2a7e:	601a      	strpl	r2, [r3, #0]
 80a2a80:	4b10      	ldr	r3, [pc, #64]	; (80a2ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2a82:	681a      	ldr	r2, [r3, #0]
 80a2a84:	07d1      	lsls	r1, r2, #31
 80a2a86:	bf5c      	itt	pl
 80a2a88:	2201      	movpl	r2, #1
 80a2a8a:	601a      	strpl	r2, [r3, #0]
 80a2a8c:	4b0e      	ldr	r3, [pc, #56]	; (80a2ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2a8e:	681a      	ldr	r2, [r3, #0]
 80a2a90:	07d2      	lsls	r2, r2, #31
 80a2a92:	bf5c      	itt	pl
 80a2a94:	2201      	movpl	r2, #1
 80a2a96:	601a      	strpl	r2, [r3, #0]
 80a2a98:	4770      	bx	lr
 80a2a9a:	bf00      	nop
 80a2a9c:	200009cc 	.word	0x200009cc
 80a2aa0:	200009c8 	.word	0x200009c8
 80a2aa4:	200009c4 	.word	0x200009c4
 80a2aa8:	200009c0 	.word	0x200009c0
 80a2aac:	200009bc 	.word	0x200009bc
 80a2ab0:	200009b8 	.word	0x200009b8
 80a2ab4:	200009b4 	.word	0x200009b4
 80a2ab8:	200009b0 	.word	0x200009b0
 80a2abc:	200009ac 	.word	0x200009ac
 80a2ac0:	200009a8 	.word	0x200009a8
 80a2ac4:	200009a4 	.word	0x200009a4
 80a2ac8:	200009a0 	.word	0x200009a0

080a2acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2acc:	4b24      	ldr	r3, [pc, #144]	; (80a2b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2ace:	681a      	ldr	r2, [r3, #0]
 80a2ad0:	07d0      	lsls	r0, r2, #31
 80a2ad2:	bf5c      	itt	pl
 80a2ad4:	2201      	movpl	r2, #1
 80a2ad6:	601a      	strpl	r2, [r3, #0]
 80a2ad8:	4b22      	ldr	r3, [pc, #136]	; (80a2b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2ada:	681a      	ldr	r2, [r3, #0]
 80a2adc:	07d1      	lsls	r1, r2, #31
 80a2ade:	bf5c      	itt	pl
 80a2ae0:	2201      	movpl	r2, #1
 80a2ae2:	601a      	strpl	r2, [r3, #0]
 80a2ae4:	4b20      	ldr	r3, [pc, #128]	; (80a2b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2ae6:	681a      	ldr	r2, [r3, #0]
 80a2ae8:	07d2      	lsls	r2, r2, #31
 80a2aea:	bf5c      	itt	pl
 80a2aec:	2201      	movpl	r2, #1
 80a2aee:	601a      	strpl	r2, [r3, #0]
 80a2af0:	4b1e      	ldr	r3, [pc, #120]	; (80a2b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2af2:	681a      	ldr	r2, [r3, #0]
 80a2af4:	07d0      	lsls	r0, r2, #31
 80a2af6:	bf5c      	itt	pl
 80a2af8:	2201      	movpl	r2, #1
 80a2afa:	601a      	strpl	r2, [r3, #0]
 80a2afc:	4b1c      	ldr	r3, [pc, #112]	; (80a2b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2afe:	681a      	ldr	r2, [r3, #0]
 80a2b00:	07d1      	lsls	r1, r2, #31
 80a2b02:	bf5c      	itt	pl
 80a2b04:	2201      	movpl	r2, #1
 80a2b06:	601a      	strpl	r2, [r3, #0]
 80a2b08:	4b1a      	ldr	r3, [pc, #104]	; (80a2b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2b0a:	681a      	ldr	r2, [r3, #0]
 80a2b0c:	07d2      	lsls	r2, r2, #31
 80a2b0e:	bf5c      	itt	pl
 80a2b10:	2201      	movpl	r2, #1
 80a2b12:	601a      	strpl	r2, [r3, #0]
 80a2b14:	4b18      	ldr	r3, [pc, #96]	; (80a2b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2b16:	681a      	ldr	r2, [r3, #0]
 80a2b18:	07d0      	lsls	r0, r2, #31
 80a2b1a:	bf5c      	itt	pl
 80a2b1c:	2201      	movpl	r2, #1
 80a2b1e:	601a      	strpl	r2, [r3, #0]
 80a2b20:	4b16      	ldr	r3, [pc, #88]	; (80a2b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2b22:	681a      	ldr	r2, [r3, #0]
 80a2b24:	07d1      	lsls	r1, r2, #31
 80a2b26:	bf5c      	itt	pl
 80a2b28:	2201      	movpl	r2, #1
 80a2b2a:	601a      	strpl	r2, [r3, #0]
 80a2b2c:	4b14      	ldr	r3, [pc, #80]	; (80a2b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2b2e:	681a      	ldr	r2, [r3, #0]
 80a2b30:	07d2      	lsls	r2, r2, #31
 80a2b32:	bf5c      	itt	pl
 80a2b34:	2201      	movpl	r2, #1
 80a2b36:	601a      	strpl	r2, [r3, #0]
 80a2b38:	4b12      	ldr	r3, [pc, #72]	; (80a2b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2b3a:	681a      	ldr	r2, [r3, #0]
 80a2b3c:	07d0      	lsls	r0, r2, #31
 80a2b3e:	bf5c      	itt	pl
 80a2b40:	2201      	movpl	r2, #1
 80a2b42:	601a      	strpl	r2, [r3, #0]
 80a2b44:	4b10      	ldr	r3, [pc, #64]	; (80a2b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2b46:	681a      	ldr	r2, [r3, #0]
 80a2b48:	07d1      	lsls	r1, r2, #31
 80a2b4a:	bf5c      	itt	pl
 80a2b4c:	2201      	movpl	r2, #1
 80a2b4e:	601a      	strpl	r2, [r3, #0]
 80a2b50:	4b0e      	ldr	r3, [pc, #56]	; (80a2b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2b52:	681a      	ldr	r2, [r3, #0]
 80a2b54:	07d2      	lsls	r2, r2, #31
 80a2b56:	bf5c      	itt	pl
 80a2b58:	2201      	movpl	r2, #1
 80a2b5a:	601a      	strpl	r2, [r3, #0]
 80a2b5c:	4770      	bx	lr
 80a2b5e:	bf00      	nop
 80a2b60:	200009fc 	.word	0x200009fc
 80a2b64:	200009f8 	.word	0x200009f8
 80a2b68:	200009f4 	.word	0x200009f4
 80a2b6c:	200009f0 	.word	0x200009f0
 80a2b70:	200009ec 	.word	0x200009ec
 80a2b74:	200009e8 	.word	0x200009e8
 80a2b78:	200009e4 	.word	0x200009e4
 80a2b7c:	200009e0 	.word	0x200009e0
 80a2b80:	200009dc 	.word	0x200009dc
 80a2b84:	200009d8 	.word	0x200009d8
 80a2b88:	200009d4 	.word	0x200009d4
 80a2b8c:	200009d0 	.word	0x200009d0

080a2b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2b90:	4b18      	ldr	r3, [pc, #96]	; (80a2bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2b92:	681a      	ldr	r2, [r3, #0]
 80a2b94:	07d1      	lsls	r1, r2, #31
 80a2b96:	bf5c      	itt	pl
 80a2b98:	2201      	movpl	r2, #1
 80a2b9a:	601a      	strpl	r2, [r3, #0]
 80a2b9c:	4b16      	ldr	r3, [pc, #88]	; (80a2bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2b9e:	681a      	ldr	r2, [r3, #0]
 80a2ba0:	07d2      	lsls	r2, r2, #31
 80a2ba2:	bf5c      	itt	pl
 80a2ba4:	2201      	movpl	r2, #1
 80a2ba6:	601a      	strpl	r2, [r3, #0]
 80a2ba8:	4b14      	ldr	r3, [pc, #80]	; (80a2bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2baa:	681a      	ldr	r2, [r3, #0]
 80a2bac:	07d0      	lsls	r0, r2, #31
 80a2bae:	bf5c      	itt	pl
 80a2bb0:	2201      	movpl	r2, #1
 80a2bb2:	601a      	strpl	r2, [r3, #0]
 80a2bb4:	4b12      	ldr	r3, [pc, #72]	; (80a2c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2bb6:	681a      	ldr	r2, [r3, #0]
 80a2bb8:	07d1      	lsls	r1, r2, #31
 80a2bba:	bf5c      	itt	pl
 80a2bbc:	2201      	movpl	r2, #1
 80a2bbe:	601a      	strpl	r2, [r3, #0]
 80a2bc0:	4b10      	ldr	r3, [pc, #64]	; (80a2c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2bc2:	681a      	ldr	r2, [r3, #0]
 80a2bc4:	07d2      	lsls	r2, r2, #31
 80a2bc6:	bf5c      	itt	pl
 80a2bc8:	2201      	movpl	r2, #1
 80a2bca:	601a      	strpl	r2, [r3, #0]
 80a2bcc:	4b0e      	ldr	r3, [pc, #56]	; (80a2c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2bce:	681a      	ldr	r2, [r3, #0]
 80a2bd0:	07d0      	lsls	r0, r2, #31
 80a2bd2:	bf5c      	itt	pl
 80a2bd4:	2201      	movpl	r2, #1
 80a2bd6:	601a      	strpl	r2, [r3, #0]
 80a2bd8:	4b0c      	ldr	r3, [pc, #48]	; (80a2c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2bda:	681a      	ldr	r2, [r3, #0]
 80a2bdc:	07d1      	lsls	r1, r2, #31
 80a2bde:	bf5c      	itt	pl
 80a2be0:	2201      	movpl	r2, #1
 80a2be2:	601a      	strpl	r2, [r3, #0]
 80a2be4:	4b0a      	ldr	r3, [pc, #40]	; (80a2c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2be6:	681a      	ldr	r2, [r3, #0]
 80a2be8:	07d2      	lsls	r2, r2, #31
 80a2bea:	bf5c      	itt	pl
 80a2bec:	2201      	movpl	r2, #1
 80a2bee:	601a      	strpl	r2, [r3, #0]
 80a2bf0:	4770      	bx	lr
 80a2bf2:	bf00      	nop
 80a2bf4:	20000a1c 	.word	0x20000a1c
 80a2bf8:	20000a18 	.word	0x20000a18
 80a2bfc:	20000a14 	.word	0x20000a14
 80a2c00:	20000a10 	.word	0x20000a10
 80a2c04:	20000a0c 	.word	0x20000a0c
 80a2c08:	20000a08 	.word	0x20000a08
 80a2c0c:	20000a04 	.word	0x20000a04
 80a2c10:	20000a00 	.word	0x20000a00

080a2c14 <__cxa_atexit>:
 80a2c14:	b510      	push	{r4, lr}
 80a2c16:	4c05      	ldr	r4, [pc, #20]	; (80a2c2c <__cxa_atexit+0x18>)
 80a2c18:	4613      	mov	r3, r2
 80a2c1a:	b12c      	cbz	r4, 80a2c28 <__cxa_atexit+0x14>
 80a2c1c:	460a      	mov	r2, r1
 80a2c1e:	4601      	mov	r1, r0
 80a2c20:	2002      	movs	r0, #2
 80a2c22:	f3af 8000 	nop.w
 80a2c26:	bd10      	pop	{r4, pc}
 80a2c28:	4620      	mov	r0, r4
 80a2c2a:	bd10      	pop	{r4, pc}
 80a2c2c:	00000000 	.word	0x00000000

080a2c30 <memcpy>:
 80a2c30:	b510      	push	{r4, lr}
 80a2c32:	1e43      	subs	r3, r0, #1
 80a2c34:	440a      	add	r2, r1
 80a2c36:	4291      	cmp	r1, r2
 80a2c38:	d004      	beq.n	80a2c44 <memcpy+0x14>
 80a2c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2c3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2c42:	e7f8      	b.n	80a2c36 <memcpy+0x6>
 80a2c44:	bd10      	pop	{r4, pc}

080a2c46 <memset>:
 80a2c46:	4603      	mov	r3, r0
 80a2c48:	4402      	add	r2, r0
 80a2c4a:	4293      	cmp	r3, r2
 80a2c4c:	d002      	beq.n	80a2c54 <memset+0xe>
 80a2c4e:	f803 1b01 	strb.w	r1, [r3], #1
 80a2c52:	e7fa      	b.n	80a2c4a <memset+0x4>
 80a2c54:	4770      	bx	lr
	...

080a2c58 <srand>:
 80a2c58:	b538      	push	{r3, r4, r5, lr}
 80a2c5a:	4b12      	ldr	r3, [pc, #72]	; (80a2ca4 <srand+0x4c>)
 80a2c5c:	4605      	mov	r5, r0
 80a2c5e:	681c      	ldr	r4, [r3, #0]
 80a2c60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2c62:	b9d3      	cbnz	r3, 80a2c9a <srand+0x42>
 80a2c64:	2018      	movs	r0, #24
 80a2c66:	f7ff f973 	bl	80a1f50 <malloc>
 80a2c6a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2c6e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2c70:	8003      	strh	r3, [r0, #0]
 80a2c72:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2c76:	8043      	strh	r3, [r0, #2]
 80a2c78:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2c7c:	8083      	strh	r3, [r0, #4]
 80a2c7e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2c82:	80c3      	strh	r3, [r0, #6]
 80a2c84:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2c88:	8103      	strh	r3, [r0, #8]
 80a2c8a:	2305      	movs	r3, #5
 80a2c8c:	8143      	strh	r3, [r0, #10]
 80a2c8e:	230b      	movs	r3, #11
 80a2c90:	8183      	strh	r3, [r0, #12]
 80a2c92:	2201      	movs	r2, #1
 80a2c94:	2300      	movs	r3, #0
 80a2c96:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2c9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2c9c:	2200      	movs	r2, #0
 80a2c9e:	611d      	str	r5, [r3, #16]
 80a2ca0:	615a      	str	r2, [r3, #20]
 80a2ca2:	bd38      	pop	{r3, r4, r5, pc}
 80a2ca4:	20000064 	.word	0x20000064

080a2ca8 <rand>:
 80a2ca8:	4b19      	ldr	r3, [pc, #100]	; (80a2d10 <rand+0x68>)
 80a2caa:	b510      	push	{r4, lr}
 80a2cac:	681c      	ldr	r4, [r3, #0]
 80a2cae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2cb0:	b9d3      	cbnz	r3, 80a2ce8 <rand+0x40>
 80a2cb2:	2018      	movs	r0, #24
 80a2cb4:	f7ff f94c 	bl	80a1f50 <malloc>
 80a2cb8:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2cbc:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2cbe:	8003      	strh	r3, [r0, #0]
 80a2cc0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2cc4:	8043      	strh	r3, [r0, #2]
 80a2cc6:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2cca:	8083      	strh	r3, [r0, #4]
 80a2ccc:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2cd0:	80c3      	strh	r3, [r0, #6]
 80a2cd2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2cd6:	8103      	strh	r3, [r0, #8]
 80a2cd8:	2305      	movs	r3, #5
 80a2cda:	8143      	strh	r3, [r0, #10]
 80a2cdc:	230b      	movs	r3, #11
 80a2cde:	8183      	strh	r3, [r0, #12]
 80a2ce0:	2201      	movs	r2, #1
 80a2ce2:	2300      	movs	r3, #0
 80a2ce4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2ce8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a2cea:	4c0a      	ldr	r4, [pc, #40]	; (80a2d14 <rand+0x6c>)
 80a2cec:	690b      	ldr	r3, [r1, #16]
 80a2cee:	6948      	ldr	r0, [r1, #20]
 80a2cf0:	435c      	muls	r4, r3
 80a2cf2:	4a09      	ldr	r2, [pc, #36]	; (80a2d18 <rand+0x70>)
 80a2cf4:	fb02 4000 	mla	r0, r2, r0, r4
 80a2cf8:	fba3 2302 	umull	r2, r3, r3, r2
 80a2cfc:	3201      	adds	r2, #1
 80a2cfe:	4403      	add	r3, r0
 80a2d00:	f143 0300 	adc.w	r3, r3, #0
 80a2d04:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a2d08:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a2d0c:	bd10      	pop	{r4, pc}
 80a2d0e:	bf00      	nop
 80a2d10:	20000064 	.word	0x20000064
 80a2d14:	5851f42d 	.word	0x5851f42d
 80a2d18:	4c957f2d 	.word	0x4c957f2d

080a2d1c <strlen>:
 80a2d1c:	4603      	mov	r3, r0
 80a2d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2d22:	2a00      	cmp	r2, #0
 80a2d24:	d1fb      	bne.n	80a2d1e <strlen+0x2>
 80a2d26:	1a18      	subs	r0, r3, r0
 80a2d28:	3801      	subs	r0, #1
 80a2d2a:	4770      	bx	lr

080a2d2c <dynalib_user>:
 80a2d2c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2d3c:	0000 0000                                   ....

080a2d40 <CSWTCH.210>:
 80a2d40:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a2d50:	0050 0000 6162 6475 5300 7265 6169 006c     P...baud.Serial.
 80a2d60:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 80a2d70:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
 80a2d80:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
 80a2d90:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
 80a2da0:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
 80a2db0:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
 80a2dc0:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
 80a2dd0:	3031 2075 5d00 0020 6425 2c00 0020 2928     10u .] .%d., .()
 80a2de0:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 80a2df0:	6400 7465 6961 736c 3d20 0020 0a0d 6600     .details = ....f
 80a2e00:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 80a2e10:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
 80a2e20:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 80a2e30:	696e 0063 6c61 006c 005a 2b25 3330 3a64     nic.all.Z.%+03d:
 80a2e40:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2e50:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2e60:	0000 0000                                   ....

080a2e64 <_ZTV9IPAddress>:
	...
 80a2e6c:	2215 080a 2205 080a 2207 080a               ."..."..."..

080a2e78 <_ZTV9USBSerial>:
	...
 80a2e80:	22d1 080a 2321 080a 232f 080a 1fcd 080a     ."..!#../#......
 80a2e90:	230d 080a 22d3 080a 22e9 080a 231b 080a     .#..."..."...#..
 80a2ea0:	22ff 080a 22cd 080a                         ."..."..

080a2ea8 <_ZTV11USARTSerial>:
	...
 80a2eb0:	2469 080a 24b9 080a 24c7 080a 1fcd 080a     i$...$...$......
 80a2ec0:	247d 080a 249f 080a 248b 080a 24b3 080a     }$...$...$...$..
 80a2ed0:	246b 080a 246f 080a                         k$..o$..

080a2ed8 <_ZTV7TwoWire>:
	...
 80a2ee0:	256d 080a 25b7 080a 258f 080a 256f 080a     m%...%...%..o%..
 80a2ef0:	2597 080a 259f 080a 25a7 080a 25af 080a     .%...%...%...%..

080a2f00 <_ZTVN5spark9WiFiClassE>:
	...
 80a2f08:	269d 080a 2693 080a 2689 080a 2607 080a     .&...&...&...&..
 80a2f18:	205d 080a 267d 080a 2671 080a 2669 080a     ] ..}&..q&..i&..
 80a2f28:	265f 080a 2655 080a 2611 080a               _&..U&...&..

080a2f34 <_ZTVN5spark12NetworkClassE>:
	...
 80a2f3c:	26bd 080a 26c7 080a 26d1 080a 26db 080a     .&...&...&...&..
 80a2f4c:	26e5 080a 26f1 080a 26fd 080a 2709 080a     .&...&...&...'..
 80a2f5c:	2711 080a 271b 080a 2725 080a               .'...'..%'..

080a2f68 <_ZSt7nothrow>:
 80a2f68:	0000 0000                                   ....

080a2f6c <__sf_fake_stdin>:
	...

080a2f8c <__sf_fake_stdout>:
	...

080a2fac <__sf_fake_stderr>:
	...
 80a2fcc:	0043                                        C.

080a2fce <link_const_variable_data_end>:
	...

080a2fd0 <link_constructors_location>:
 80a2fd0:	080a091d 	.word	0x080a091d
 80a2fd4:	080a1c11 	.word	0x080a1c11
 80a2fd8:	080a1f99 	.word	0x080a1f99
 80a2fdc:	080a2069 	.word	0x080a2069
 80a2fe0:	080a2079 	.word	0x080a2079
 80a2fe4:	080a20b1 	.word	0x080a20b1
 80a2fe8:	080a26a9 	.word	0x080a26a9
 80a2fec:	080a2775 	.word	0x080a2775
 80a2ff0:	080a2891 	.word	0x080a2891
 80a2ff4:	080a2985 	.word	0x080a2985
 80a2ff8:	080a2a09 	.word	0x080a2a09
 80a2ffc:	080a2acd 	.word	0x080a2acd
 80a3000:	080a2b91 	.word	0x080a2b91

080a3004 <link_constructors_end>:
	...
