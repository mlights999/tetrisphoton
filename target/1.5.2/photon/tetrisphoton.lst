
c:/Users/mligh/OneDrive/Particle/TetrisPhoton/tetrisphoton/target/1.5.2/photon/tetrisphoton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003904  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3920  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a3924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009c4  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a398c  080a398c  0002398c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a39b4  080a39b4  000239b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a007b  00000000  00000000  000239b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e981  00000000  00000000  000c3a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001092e  00000000  00000000  000d23b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001da8  00000000  00000000  000e2ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002e00  00000000  00000000  000e4a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024440  00000000  00000000  000e788a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021f29  00000000  00000000  0010bcca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a415b  00000000  00000000  0012dbf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b20c  00000000  00000000  001d1d50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fa89 	bl	80a3544 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fa8e 	bl	80a355a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3924 	.word	0x080a3924
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000a2c 	.word	0x20000a2c
 80a0058:	20000a2c 	.word	0x20000a2c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f93d 	bl	80a22dc <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a38e4 	.word	0x080a38e4
 80a0084:	080a3918 	.word	0x080a3918

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b81a 	b.w	80a00c0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fc55 	bl	80a093c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b8e3 	b.w	80a2260 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bff9 	b.w	80a2090 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00ae:	b510      	push	{r4, lr}
 80a00b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80a00b2:	6800      	ldr	r0, [r0, #0]
 80a00b4:	b108      	cbz	r0, 80a00ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a00b6:	f001 ffeb 	bl	80a2090 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00ba:	4620      	mov	r0, r4
 80a00bc:	bd10      	pop	{r4, pc}
	...

080a00c0 <setup>:
int score;
int currentLvl;
int tetris[PIXEL_COUNT];        //Array to hold Tetris board
int currentDelay;

void setup() {
 80a00c0:	b508      	push	{r3, lr}
    pinMode(lbtn, INPUT_PULLDOWN);
 80a00c2:	2103      	movs	r1, #3
 80a00c4:	2000      	movs	r0, #0
 80a00c6:	f002 fc3d 	bl	80a2944 <pinMode>
    pinMode(rbtn, INPUT_PULLDOWN);
 80a00ca:	2103      	movs	r1, #3
 80a00cc:	2001      	movs	r0, #1
 80a00ce:	f002 fc39 	bl	80a2944 <pinMode>
    pinMode(dnbtn, INPUT_PULLDOWN);
 80a00d2:	2103      	movs	r1, #3
 80a00d4:	2002      	movs	r0, #2
 80a00d6:	f002 fc35 	bl	80a2944 <pinMode>
    pinMode(ebtn, INPUT_PULLDOWN);
 80a00da:	2103      	movs	r1, #3
 80a00dc:	4608      	mov	r0, r1
 80a00de:	f002 fc31 	bl	80a2944 <pinMode>
    pinMode(D4, INPUT_PULLDOWN);
 80a00e2:	2103      	movs	r1, #3
 80a00e4:	2004      	movs	r0, #4
 80a00e6:	f002 fc2d 	bl	80a2944 <pinMode>
    strip.begin();
 80a00ea:	480e      	ldr	r0, [pc, #56]	; (80a0124 <setup+0x64>)
 80a00ec:	f000 fd08 	bl	80a0b00 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.show();
 80a00f0:	480c      	ldr	r0, [pc, #48]	; (80a0124 <setup+0x64>)
 80a00f2:	f000 fd3b 	bl	80a0b6c <_ZN17Adafruit_NeoPixel4showEv>
 80a00f6:	2300      	movs	r3, #0
    for(i = 0; i < PIXEL_COUNT; i++){
        tetris[i] = 0;
 80a00f8:	4618      	mov	r0, r3
 80a00fa:	490b      	ldr	r1, [pc, #44]	; (80a0128 <setup+0x68>)
 80a00fc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    pinMode(dnbtn, INPUT_PULLDOWN);
    pinMode(ebtn, INPUT_PULLDOWN);
    pinMode(D4, INPUT_PULLDOWN);
    strip.begin();
    strip.show();
    for(i = 0; i < PIXEL_COUNT; i++){
 80a0100:	3301      	adds	r3, #1
 80a0102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
        tetris[i] = 0;
 80a0106:	f04f 0200 	mov.w	r2, #0
    pinMode(dnbtn, INPUT_PULLDOWN);
    pinMode(ebtn, INPUT_PULLDOWN);
    pinMode(D4, INPUT_PULLDOWN);
    strip.begin();
    strip.show();
    for(i = 0; i < PIXEL_COUNT; i++){
 80a010a:	d1f7      	bne.n	80a00fc <setup+0x3c>
 80a010c:	4907      	ldr	r1, [pc, #28]	; (80a012c <setup+0x6c>)
 80a010e:	600b      	str	r3, [r1, #0]
        tetris[i] = 0;
    }
    pieceSpot = 8;
 80a0110:	4b07      	ldr	r3, [pc, #28]	; (80a0130 <setup+0x70>)
 80a0112:	2108      	movs	r1, #8
 80a0114:	6019      	str	r1, [r3, #0]
    pieceRotation = 0;
 80a0116:	4b07      	ldr	r3, [pc, #28]	; (80a0134 <setup+0x74>)
 80a0118:	601a      	str	r2, [r3, #0]
    score = 0;
 80a011a:	4b07      	ldr	r3, [pc, #28]	; (80a0138 <setup+0x78>)
 80a011c:	601a      	str	r2, [r3, #0]
    currentLvl = 0;
 80a011e:	4b07      	ldr	r3, [pc, #28]	; (80a013c <setup+0x7c>)
 80a0120:	601a      	str	r2, [r3, #0]
 80a0122:	bd08      	pop	{r3, pc}
 80a0124:	2000047c 	.word	0x2000047c
 80a0128:	2000007c 	.word	0x2000007c
 80a012c:	2000006c 	.word	0x2000006c
 80a0130:	20000074 	.word	0x20000074
 80a0134:	20000490 	.word	0x20000490
 80a0138:	200004a0 	.word	0x200004a0
 80a013c:	200004a4 	.word	0x200004a4

080a0140 <_Z10printBoardPi>:
    return ((colorCode/1000)%1000);
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
 80a0140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    for(i = 0; i < PIXEL_COUNT; i++){
 80a0142:	4d2d      	ldr	r5, [pc, #180]	; (80a01f8 <_Z10printBoardPi+0xb8>)
 80a0144:	2300      	movs	r3, #0
 80a0146:	4e2d      	ldr	r6, [pc, #180]	; (80a01fc <_Z10printBoardPi+0xbc>)
        else{                                                                                                       //Reversed row for S configuration (mirror function)
            if((i%16) < 8){
                strip.setPixelColor(i+15-((i%16)*2),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the right half of line, add to mirror to other side
            }
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
 80a0148:	4f2d      	ldr	r7, [pc, #180]	; (80a0200 <_Z10printBoardPi+0xc0>)
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
    for(i = 0; i < PIXEL_COUNT; i++){
 80a014a:	602b      	str	r3, [r5, #0]
 80a014c:	6829      	ldr	r1, [r5, #0]
 80a014e:	29ff      	cmp	r1, #255	; 0xff
 80a0150:	dc4c      	bgt.n	80a01ec <_Z10printBoardPi+0xac>
        if(((i/16)%2) == 0){                                                                                        //Prints standard row
 80a0152:	2310      	movs	r3, #16
 80a0154:	fb91 f3f3 	sdiv	r3, r1, r3
 80a0158:	f013 0f01 	tst.w	r3, #1
            strip.setPixelColor(i,getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));
 80a015c:	f856 c021 	ldr.w	ip, [r6, r1, lsl #2]
 80a0160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
    for(i = 0; i < PIXEL_COUNT; i++){
        if(((i/16)%2) == 0){                                                                                        //Prints standard row
 80a0164:	d116      	bne.n	80a0194 <_Z10printBoardPi+0x54>
            strip.setPixelColor(i,getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));
 80a0166:	fb9c f4f0 	sdiv	r4, ip, r0
 80a016a:	fb9c f2f7 	sdiv	r2, ip, r7
 80a016e:	fb94 f3f0 	sdiv	r3, r4, r0
 80a0172:	fb92 fef0 	sdiv	lr, r2, r0
 80a0176:	fb00 4313 	mls	r3, r0, r3, r4
 80a017a:	fb00 221e 	mls	r2, r0, lr, r2
 80a017e:	fb00 c014 	mls	r0, r0, r4, ip
 80a0182:	b2c0      	uxtb	r0, r0
 80a0184:	9000      	str	r0, [sp, #0]
 80a0186:	b2db      	uxtb	r3, r3
 80a0188:	b2d2      	uxtb	r2, r2
 80a018a:	b289      	uxth	r1, r1
 80a018c:	481d      	ldr	r0, [pc, #116]	; (80a0204 <_Z10printBoardPi+0xc4>)
 80a018e:	f001 fda7 	bl	80a1ce0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a0192:	e027      	b.n	80a01e4 <_Z10printBoardPi+0xa4>
        else{                                                                                                       //Reversed row for S configuration (mirror function)
            if((i%16) < 8){
                strip.setPixelColor(i+15-((i%16)*2),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the right half of line, add to mirror to other side
            }
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
 80a0194:	fb9c f2f0 	sdiv	r2, ip, r0
 80a0198:	fb9c f4f7 	sdiv	r4, ip, r7
 80a019c:	fb92 f3f0 	sdiv	r3, r2, r0
 80a01a0:	fb00 2313 	mls	r3, r0, r3, r2
 80a01a4:	fb94 f2f0 	sdiv	r2, r4, r0
 80a01a8:	fb00 4212 	mls	r2, r0, r2, r4
 80a01ac:	4c16      	ldr	r4, [pc, #88]	; (80a0208 <_Z10printBoardPi+0xc8>)
 80a01ae:	f101 0e0f 	add.w	lr, r1, #15
 80a01b2:	400c      	ands	r4, r1
 80a01b4:	2c00      	cmp	r4, #0
 80a01b6:	bfbc      	itt	lt
 80a01b8:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80a01bc:	f064 040f 	ornlt	r4, r4, #15
 80a01c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01c4:	bfb8      	it	lt
 80a01c6:	3401      	addlt	r4, #1
 80a01c8:	ebae 0144 	sub.w	r1, lr, r4, lsl #1
 80a01cc:	fb9c fef0 	sdiv	lr, ip, r0
 80a01d0:	fb00 c01e 	mls	r0, r0, lr, ip
 80a01d4:	b2c0      	uxtb	r0, r0
 80a01d6:	9000      	str	r0, [sp, #0]
 80a01d8:	b2db      	uxtb	r3, r3
 80a01da:	b2d2      	uxtb	r2, r2
 80a01dc:	b289      	uxth	r1, r1
 80a01de:	4809      	ldr	r0, [pc, #36]	; (80a0204 <_Z10printBoardPi+0xc4>)
 80a01e0:	f001 fd7e 	bl	80a1ce0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
    for(i = 0; i < PIXEL_COUNT; i++){
 80a01e4:	682b      	ldr	r3, [r5, #0]
 80a01e6:	3301      	adds	r3, #1
 80a01e8:	602b      	str	r3, [r5, #0]
 80a01ea:	e7af      	b.n	80a014c <_Z10printBoardPi+0xc>
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
            }
        }
    }
    strip.show();
 80a01ec:	4805      	ldr	r0, [pc, #20]	; (80a0204 <_Z10printBoardPi+0xc4>)
}
 80a01ee:	b003      	add	sp, #12
 80a01f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
            }
        }
    }
    strip.show();
 80a01f4:	f000 bcba 	b.w	80a0b6c <_ZN17Adafruit_NeoPixel4showEv>
 80a01f8:	2000006c 	.word	0x2000006c
 80a01fc:	2000007c 	.word	0x2000007c
 80a0200:	000f4240 	.word	0x000f4240
 80a0204:	2000047c 	.word	0x2000047c
 80a0208:	8000000f 	.word	0x8000000f

080a020c <_Z8gameDonev>:
}
void gameDone(){
    delay(20000);
 80a020c:	f644 6020 	movw	r0, #20000	; 0x4e20
 80a0210:	f001 bfd4 	b.w	80a21bc <delay>

080a0214 <_Z9loadPieceiiPi>:
    delay(1000);
}


void loadPiece(int pid, int orientation, int* off){
    switch (pid){
 80a0214:	2806      	cmp	r0, #6
 80a0216:	f200 80d5 	bhi.w	80a03c4 <_Z9loadPieceiiPi+0x1b0>
 80a021a:	e8df f000 	tbb	[pc, r0]
 80a021e:	0804      	.short	0x0804
 80a0220:	866a461d 	.word	0x866a461d
 80a0224:	ac          	.byte	0xac
 80a0225:	00          	.byte	0x00
        case 0:         //Square, top left corner is origin
            off[0] = 0;
 80a0226:	2300      	movs	r3, #0
 80a0228:	6013      	str	r3, [r2, #0]
            off[1] = 1;
 80a022a:	2301      	movs	r3, #1
 80a022c:	e037      	b.n	80a029e <_Z9loadPieceiiPi+0x8a>
            off[2] = 16;
            off[3] = 17;
            break;
        case 1:                                         //Vertical piece, middle block is origin
            if(orientation == 0 || orientation == 2){       //Horizontal orientation
 80a022e:	f031 0102 	bics.w	r1, r1, #2
 80a0232:	d108      	bne.n	80a0246 <_Z9loadPieceiiPi+0x32>
                off[0] = -1;                                    //
 80a0234:	f04f 33ff 	mov.w	r3, #4294967295
 80a0238:	6013      	str	r3, [r2, #0]
                off[1] = 0;                                     //
                off[2] = 1;                                     //
 80a023a:	2301      	movs	r3, #1
 80a023c:	6093      	str	r3, [r2, #8]
                off[3] = 2;                                     //
 80a023e:	2302      	movs	r3, #2
            off[3] = 17;
            break;
        case 1:                                         //Vertical piece, middle block is origin
            if(orientation == 0 || orientation == 2){       //Horizontal orientation
                off[0] = -1;                                    //
                off[1] = 0;                                     //
 80a0240:	6051      	str	r1, [r2, #4]
                off[2] = 1;                                     //
                off[3] = 2;                                     //
 80a0242:	60d3      	str	r3, [r2, #12]
 80a0244:	4770      	bx	lr
            }
            else{                                           //Vertical Orientation
                off[0] = -16;                                   //
                off[1] = 0;                                     //
                off[2] = 16;                                    //
                off[3] = 32;                                    //
 80a0246:	f06f 000f 	mvn.w	r0, #15
 80a024a:	2100      	movs	r1, #0
 80a024c:	2310      	movs	r3, #16
 80a024e:	f04f 0c20 	mov.w	ip, #32
 80a0252:	e882 100b 	stmia.w	r2, {r0, r1, r3, ip}
 80a0256:	4770      	bx	lr
            }
            break;
        case 2:                                         //L-Shape
            if(orientation == 0){                           //Horizontal orientation, middle of l is origin
 80a0258:	b941      	cbnz	r1, 80a026c <_Z9loadPieceiiPi+0x58>
                off[0] = -1;                                    //
 80a025a:	f04f 33ff 	mov.w	r3, #4294967295
 80a025e:	6013      	str	r3, [r2, #0]
                off[1] = 0;                                     //
                off[2] = 1;                                     //
 80a0260:	2301      	movs	r3, #1
 80a0262:	6093      	str	r3, [r2, #8]
                off[3] = 15;                                    //
 80a0264:	230f      	movs	r3, #15
            }
            break;
        case 2:                                         //L-Shape
            if(orientation == 0){                           //Horizontal orientation, middle of l is origin
                off[0] = -1;                                    //
                off[1] = 0;                                     //
 80a0266:	6051      	str	r1, [r2, #4]
                off[2] = 1;                                     //
                off[3] = 15;                                    //
 80a0268:	60d3      	str	r3, [r2, #12]
 80a026a:	4770      	bx	lr
            }
            else if(orientation == 1){
 80a026c:	2901      	cmp	r1, #1
 80a026e:	d105      	bne.n	80a027c <_Z9loadPieceiiPi+0x68>
                off[0] = -17;
 80a0270:	f06f 0310 	mvn.w	r3, #16
 80a0274:	6013      	str	r3, [r2, #0]
                off[1] = -16;
 80a0276:	f06f 030f 	mvn.w	r3, #15
 80a027a:	e034      	b.n	80a02e6 <_Z9loadPieceiiPi+0xd2>
                off[2] = 0;
                off[3] = 16;
            }
            else if(orientation == 2){
 80a027c:	2902      	cmp	r1, #2
 80a027e:	f04f 0300 	mov.w	r3, #0
 80a0282:	d109      	bne.n	80a0298 <_Z9loadPieceiiPi+0x84>
                off[0] = -1;
 80a0284:	f04f 31ff 	mov.w	r1, #4294967295
                off[1] = 0;
 80a0288:	e882 000a 	stmia.w	r2, {r1, r3}
                off[2] = 1;
 80a028c:	2301      	movs	r3, #1
 80a028e:	6093      	str	r3, [r2, #8]
                off[3] = -15;
 80a0290:	f06f 030e 	mvn.w	r3, #14
 80a0294:	60d3      	str	r3, [r2, #12]
 80a0296:	4770      	bx	lr
            }
            else{                                       //Vertical Orientation
                off[0] = -16;
 80a0298:	f06f 010f 	mvn.w	r1, #15
 80a029c:	6011      	str	r1, [r2, #0]
                off[1] = 0;
 80a029e:	6053      	str	r3, [r2, #4]
                off[2] = 16;
 80a02a0:	2310      	movs	r3, #16
 80a02a2:	6093      	str	r3, [r2, #8]
                off[3] = 17;
 80a02a4:	2311      	movs	r3, #17
 80a02a6:	60d3      	str	r3, [r2, #12]
 80a02a8:	4770      	bx	lr
            }
            break;
        case 3:                                         //Reverse-L
            if(orientation == 0){                       //Horizontal orientation, middle of l is origin
 80a02aa:	b941      	cbnz	r1, 80a02be <_Z9loadPieceiiPi+0xaa>
                off[0] = -1;
 80a02ac:	f04f 33ff 	mov.w	r3, #4294967295
 80a02b0:	6013      	str	r3, [r2, #0]
                off[1] = 0;
                off[2] = 1;
 80a02b2:	2301      	movs	r3, #1
 80a02b4:	6093      	str	r3, [r2, #8]
                off[3] = 17;
 80a02b6:	2311      	movs	r3, #17
            }
            break;
        case 3:                                         //Reverse-L
            if(orientation == 0){                       //Horizontal orientation, middle of l is origin
                off[0] = -1;
                off[1] = 0;
 80a02b8:	6051      	str	r1, [r2, #4]
                off[2] = 1;
                off[3] = 17;
 80a02ba:	60d3      	str	r3, [r2, #12]
 80a02bc:	4770      	bx	lr
            }
            else if(orientation == 1){
 80a02be:	2901      	cmp	r1, #1
 80a02c0:	d104      	bne.n	80a02cc <_Z9loadPieceiiPi+0xb8>
                off[0] = -16;
 80a02c2:	f06f 030f 	mvn.w	r3, #15
 80a02c6:	6013      	str	r3, [r2, #0]
                off[1] = 0;
 80a02c8:	2300      	movs	r3, #0
 80a02ca:	e031      	b.n	80a0330 <_Z9loadPieceiiPi+0x11c>
                off[2] = 16;
                off[3] = 15;
            }
            else if(orientation == 2){
 80a02cc:	2902      	cmp	r1, #2
 80a02ce:	d105      	bne.n	80a02dc <_Z9loadPieceiiPi+0xc8>
                off[0] = -17;
 80a02d0:	f06f 0310 	mvn.w	r3, #16
 80a02d4:	6013      	str	r3, [r2, #0]
                off[1] = -1;
 80a02d6:	f04f 33ff 	mov.w	r3, #4294967295
 80a02da:	e064      	b.n	80a03a6 <_Z9loadPieceiiPi+0x192>
                off[2] = 0;
                off[3] = 1;
            }
            else{                                       //Vertical Orientation
                off[0] = -16;
 80a02dc:	f06f 030f 	mvn.w	r3, #15
 80a02e0:	6013      	str	r3, [r2, #0]
                off[1] = -15;
 80a02e2:	f06f 030e 	mvn.w	r3, #14
 80a02e6:	6053      	str	r3, [r2, #4]
                off[2] = 0;
 80a02e8:	2300      	movs	r3, #0
 80a02ea:	6093      	str	r3, [r2, #8]
                off[3] = 16;
 80a02ec:	2310      	movs	r3, #16
 80a02ee:	60d3      	str	r3, [r2, #12]
 80a02f0:	4770      	bx	lr
            }
            break;
        case 4:                                         //T-Shape
            if(orientation == 0){                       
 80a02f2:	b941      	cbnz	r1, 80a0306 <_Z9loadPieceiiPi+0xf2>
                off[0] = -1;
 80a02f4:	f04f 33ff 	mov.w	r3, #4294967295
 80a02f8:	6013      	str	r3, [r2, #0]
                off[1] = 0;
                off[2] = 1;
 80a02fa:	2301      	movs	r3, #1
 80a02fc:	6093      	str	r3, [r2, #8]
                off[3] = 16;
 80a02fe:	2310      	movs	r3, #16
            }
            break;
        case 4:                                         //T-Shape
            if(orientation == 0){                       
                off[0] = -1;
                off[1] = 0;
 80a0300:	6051      	str	r1, [r2, #4]
                off[2] = 1;
                off[3] = 16;
 80a0302:	60d3      	str	r3, [r2, #12]
 80a0304:	4770      	bx	lr
 80a0306:	f06f 030f 	mvn.w	r3, #15
            }
            else if(orientation == 1){
 80a030a:	2901      	cmp	r1, #1
                off[0] = -16;
 80a030c:	6013      	str	r3, [r2, #0]
                off[0] = -1;
                off[1] = 0;
                off[2] = 1;
                off[3] = 16;
            }
            else if(orientation == 1){
 80a030e:	d107      	bne.n	80a0320 <_Z9loadPieceiiPi+0x10c>
                off[0] = -16;
                off[1] = 0;
 80a0310:	2300      	movs	r3, #0
 80a0312:	6053      	str	r3, [r2, #4]
                off[2] = -1;
 80a0314:	f04f 33ff 	mov.w	r3, #4294967295
 80a0318:	6093      	str	r3, [r2, #8]
                off[3] = 16;
 80a031a:	2310      	movs	r3, #16
 80a031c:	60d3      	str	r3, [r2, #12]
 80a031e:	4770      	bx	lr
            }
            else if(orientation == 2){
 80a0320:	2902      	cmp	r1, #2
 80a0322:	d049      	beq.n	80a03b8 <_Z9loadPieceiiPi+0x1a4>
                off[2] = 1;
                off[3] = 16;
            }
            else{                                       //Vertical Orientation
                off[0] = -16;
                off[1] = -1;
 80a0324:	f04f 33ff 	mov.w	r3, #4294967295
 80a0328:	e03d      	b.n	80a03a6 <_Z9loadPieceiiPi+0x192>
                off[2] = 0;
                off[3] = 1;
            }
            break;
        case 5:                                         //S-zig-zag
            if(orientation == 0){                       //Horizontal orientation, middle of l is origin
 80a032a:	b939      	cbnz	r1, 80a033c <_Z9loadPieceiiPi+0x128>
                off[0] = 0;
 80a032c:	6011      	str	r1, [r2, #0]
                off[1] = 1;
 80a032e:	2301      	movs	r3, #1
 80a0330:	6053      	str	r3, [r2, #4]
                off[2] = 16;
 80a0332:	2310      	movs	r3, #16
 80a0334:	6093      	str	r3, [r2, #8]
                off[3] = 15;
 80a0336:	230f      	movs	r3, #15
 80a0338:	60d3      	str	r3, [r2, #12]
 80a033a:	4770      	bx	lr
            }
            else if(orientation == 1){
 80a033c:	2901      	cmp	r1, #1
 80a033e:	d105      	bne.n	80a034c <_Z9loadPieceiiPi+0x138>
                off[0] = -17;
 80a0340:	f06f 0310 	mvn.w	r3, #16
 80a0344:	6013      	str	r3, [r2, #0]
                off[1] = -1;
 80a0346:	f04f 33ff 	mov.w	r3, #4294967295
 80a034a:	e7cc      	b.n	80a02e6 <_Z9loadPieceiiPi+0xd2>
 80a034c:	f06f 030f 	mvn.w	r3, #15
                off[2] = 0;
                off[3] = 16;
            }
            else if(orientation == 2){
 80a0350:	2902      	cmp	r1, #2
                off[0] = -16;
 80a0352:	6013      	str	r3, [r2, #0]
                off[0] = -17;
                off[1] = -1;
                off[2] = 0;
                off[3] = 16;
            }
            else if(orientation == 2){
 80a0354:	d108      	bne.n	80a0368 <_Z9loadPieceiiPi+0x154>
                off[0] = -16;
                off[1] = -15;
 80a0356:	f06f 030e 	mvn.w	r3, #14
 80a035a:	6053      	str	r3, [r2, #4]
                off[2] = 0;
 80a035c:	2300      	movs	r3, #0
 80a035e:	6093      	str	r3, [r2, #8]
                off[3] = -1;
 80a0360:	f04f 33ff 	mov.w	r3, #4294967295
 80a0364:	60d3      	str	r3, [r2, #12]
 80a0366:	4770      	bx	lr
            }
            else{                                       //Vertical Orientation
                off[0] = -16;
                off[1] = 0;
 80a0368:	2300      	movs	r3, #0
 80a036a:	6053      	str	r3, [r2, #4]
                off[2] = 1;
 80a036c:	2301      	movs	r3, #1
 80a036e:	6093      	str	r3, [r2, #8]
                off[3] = 17;
 80a0370:	2311      	movs	r3, #17
 80a0372:	60d3      	str	r3, [r2, #12]
 80a0374:	4770      	bx	lr
            }
            break;
        case 6:                                         //Z-zig-zag
            if(orientation == 0){                       //Horizontal orientation, middle of l is origin
 80a0376:	b919      	cbnz	r1, 80a0380 <_Z9loadPieceiiPi+0x16c>
                off[0] = 0;
 80a0378:	6011      	str	r1, [r2, #0]
                off[1] = -1;
 80a037a:	f04f 33ff 	mov.w	r3, #4294967295
 80a037e:	e78e      	b.n	80a029e <_Z9loadPieceiiPi+0x8a>
                off[2] = 16;
                off[3] = 17;
            }
            else if(orientation == 1){
 80a0380:	2901      	cmp	r1, #1
 80a0382:	d109      	bne.n	80a0398 <_Z9loadPieceiiPi+0x184>
                off[0] = -16;
                off[1] = -1;
                off[2] = 0;
                off[3] = 15;
 80a0384:	f06f 000f 	mvn.w	r0, #15
 80a0388:	f04f 31ff 	mov.w	r1, #4294967295
 80a038c:	2300      	movs	r3, #0
 80a038e:	f04f 0c0f 	mov.w	ip, #15
 80a0392:	e882 100b 	stmia.w	r2, {r0, r1, r3, ip}
 80a0396:	4770      	bx	lr
            }
            else if(orientation == 2){
 80a0398:	2902      	cmp	r1, #2
 80a039a:	d10a      	bne.n	80a03b2 <_Z9loadPieceiiPi+0x19e>
                off[0] = -17;
 80a039c:	f06f 0310 	mvn.w	r3, #16
 80a03a0:	6013      	str	r3, [r2, #0]
                off[1] = -16;
 80a03a2:	f06f 030f 	mvn.w	r3, #15
 80a03a6:	6053      	str	r3, [r2, #4]
                off[2] = 0;
 80a03a8:	2300      	movs	r3, #0
 80a03aa:	6093      	str	r3, [r2, #8]
                off[3] = 1;
 80a03ac:	2301      	movs	r3, #1
 80a03ae:	60d3      	str	r3, [r2, #12]
 80a03b0:	4770      	bx	lr
            }
            else{                                       //Vertical Orientation
                off[0] = -15;
 80a03b2:	f06f 030e 	mvn.w	r3, #14
 80a03b6:	6013      	str	r3, [r2, #0]
                off[1] = 0;
 80a03b8:	2300      	movs	r3, #0
 80a03ba:	6053      	str	r3, [r2, #4]
                off[2] = 1;
 80a03bc:	2301      	movs	r3, #1
 80a03be:	6093      	str	r3, [r2, #8]
                off[3] = 16;
 80a03c0:	2310      	movs	r3, #16
 80a03c2:	60d3      	str	r3, [r2, #12]
 80a03c4:	4770      	bx	lr
	...

080a03c8 <_Z13getPieceColoriii>:
        }
    }
    return;
}

int getPieceColor(int pid, int level, int brtlvl){
 80a03c8:	4603      	mov	r3, r0
 80a03ca:	b510      	push	{r4, lr}
 80a03cc:	4610      	mov	r0, r2
    if(level == 0){    
 80a03ce:	b9a1      	cbnz	r1, 80a03fa <_Z13getPieceColoriii+0x32>
        switch (pid)
 80a03d0:	2b06      	cmp	r3, #6
 80a03d2:	d851      	bhi.n	80a0478 <_Z13getPieceColoriii+0xb0>
 80a03d4:	e8df f003 	tbb	[pc, r3]
 80a03d8:	07043604 	.word	0x07043604
 80a03dc:	3607      	.short	0x3607
 80a03de:	36          	.byte	0x36
 80a03df:	00          	.byte	0x00
                break;
            case 1:
                return (1000000000+(brtlvl/4)+(1000*(brtlvl/4))+(1000000*(brtlvl/4)));
                break;
            case 2:
                return (1000000000+brtlvl);
 80a03e0:	4b27      	ldr	r3, [pc, #156]	; (80a0480 <_Z13getPieceColoriii+0xb8>)
 80a03e2:	4403      	add	r3, r0
 80a03e4:	e049      	b.n	80a047a <_Z13getPieceColoriii+0xb2>
                break;
            case 3:
                return (1000000000+(brtlvl/2)+(1000*brtlvl/2));
                break;    
            case 4:
                return (1000000000+(brtlvl/2)+(1000*brtlvl/2));
 80a03e6:	2202      	movs	r2, #2
 80a03e8:	fb90 f2f2 	sdiv	r2, r0, r2
 80a03ec:	4b24      	ldr	r3, [pc, #144]	; (80a0480 <_Z13getPieceColoriii+0xb8>)
 80a03ee:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 80a03f2:	4413      	add	r3, r2
 80a03f4:	fb04 3300 	mla	r3, r4, r0, r3
 80a03f8:	e03f      	b.n	80a047a <_Z13getPieceColoriii+0xb2>
            case 6:
                return (1000000000+(brtlvl/4)+(1000*(brtlvl/4))+(1000000*(brtlvl/4)));
                break; 
        }
    }
    else if(level == 1){
 80a03fa:	2901      	cmp	r1, #1
 80a03fc:	d13c      	bne.n	80a0478 <_Z13getPieceColoriii+0xb0>
        switch (pid)
 80a03fe:	2b06      	cmp	r3, #6
 80a0400:	d83a      	bhi.n	80a0478 <_Z13getPieceColoriii+0xb0>
 80a0402:	e8df f003 	tbb	[pc, r3]
 80a0406:	1f04      	.short	0x1f04
 80a0408:	1f0a0a04 	.word	0x1f0a0a04
 80a040c:	2c          	.byte	0x2c
 80a040d:	00          	.byte	0x00
                break;
            case 1:
                return (1000000000+(brtlvl/4)+(1000*(brtlvl/4))+(1000000*(brtlvl/4)));
                break;
            case 2:
                return (1000000000+brtlvl*1000);
 80a040e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0412:	4341      	muls	r1, r0
 80a0414:	4b1a      	ldr	r3, [pc, #104]	; (80a0480 <_Z13getPieceColoriii+0xb8>)
 80a0416:	440b      	add	r3, r1
 80a0418:	e02f      	b.n	80a047a <_Z13getPieceColoriii+0xb2>
                break;
            case 3:
                return (1000000000+(brtlvl/6)+(1000*(int)(brtlvl*0.75))+(1000000*(brtlvl/6)));
                break;    
            case 4:
                return (1000000000+(brtlvl/6)+(1000*(int)(brtlvl*0.75))+(1000000*(brtlvl/6)));
 80a041a:	2406      	movs	r4, #6
 80a041c:	fb90 f4f4 	sdiv	r4, r0, r4
 80a0420:	f002 fde2 	bl	80a2fe8 <__aeabi_i2d>
 80a0424:	2200      	movs	r2, #0
 80a0426:	4b17      	ldr	r3, [pc, #92]	; (80a0484 <_Z13getPieceColoriii+0xbc>)
 80a0428:	f002 fe44 	bl	80a30b4 <__aeabi_dmul>
 80a042c:	f003 f854 	bl	80a34d8 <__aeabi_d2iz>
 80a0430:	4a13      	ldr	r2, [pc, #76]	; (80a0480 <_Z13getPieceColoriii+0xb8>)
 80a0432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0436:	4422      	add	r2, r4
 80a0438:	fb03 2300 	mla	r3, r3, r0, r2
 80a043c:	4812      	ldr	r0, [pc, #72]	; (80a0488 <_Z13getPieceColoriii+0xc0>)
 80a043e:	fb00 3304 	mla	r3, r0, r4, r3
 80a0442:	e01a      	b.n	80a047a <_Z13getPieceColoriii+0xb2>
                break; 
            case 5:
                return (1000000000+(brtlvl/4)+(1000*(brtlvl/4))+(1000000*(brtlvl/4)));
 80a0444:	2104      	movs	r1, #4
 80a0446:	fb90 f1f1 	sdiv	r1, r0, r1
 80a044a:	480d      	ldr	r0, [pc, #52]	; (80a0480 <_Z13getPieceColoriii+0xb8>)
 80a044c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0450:	4408      	add	r0, r1
 80a0452:	fb03 0301 	mla	r3, r3, r1, r0
 80a0456:	480c      	ldr	r0, [pc, #48]	; (80a0488 <_Z13getPieceColoriii+0xc0>)
 80a0458:	fb00 3301 	mla	r3, r0, r1, r3
 80a045c:	e00d      	b.n	80a047a <_Z13getPieceColoriii+0xb2>
                break; 
            case 6:
                return (1000000000+(brtlvl/4)+(1000*(brtlvl/4))+(1000000*(brtlvl/4)));
 80a045e:	2104      	movs	r1, #4
 80a0460:	fb90 f1f1 	sdiv	r1, r0, r1
 80a0464:	4806      	ldr	r0, [pc, #24]	; (80a0480 <_Z13getPieceColoriii+0xb8>)
 80a0466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a046a:	4408      	add	r0, r1
 80a046c:	fb03 0301 	mla	r3, r3, r1, r0
 80a0470:	4c05      	ldr	r4, [pc, #20]	; (80a0488 <_Z13getPieceColoriii+0xc0>)
 80a0472:	fb04 3301 	mla	r3, r4, r1, r3
 80a0476:	e000      	b.n	80a047a <_Z13getPieceColoriii+0xb2>
                break; 
        }
    }
}
 80a0478:	bd10      	pop	{r4, pc}
 80a047a:	4618      	mov	r0, r3
 80a047c:	bd10      	pop	{r4, pc}
 80a047e:	bf00      	nop
 80a0480:	3b9aca00 	.word	0x3b9aca00
 80a0484:	3fe80000 	.word	0x3fe80000
 80a0488:	000f4240 	.word	0x000f4240

080a048c <_Z7levelUpiiiiPi>:
        return false;
    }
    
}

void levelUp(int oldLevel, int newLevel, int arraySize, int brtlvl, int* userBoard){
 80a048c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0490:	4681      	mov	r9, r0
 80a0492:	468a      	mov	sl, r1
 80a0494:	4693      	mov	fp, r2
 80a0496:	4698      	mov	r8, r3
 80a0498:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    int c1, c2;
    for(c1 = 0; c1 < 7; c1++){
 80a049a:	2400      	movs	r4, #0
 80a049c:	1f3e      	subs	r6, r7, #4
 80a049e:	2500      	movs	r5, #0
        for(c2 = 0; c2 < arraySize; c2++){
 80a04a0:	455d      	cmp	r5, fp
 80a04a2:	da10      	bge.n	80a04c6 <_Z7levelUpiiiiPi+0x3a>
            if(userBoard[c2] == getPieceColor(c1, oldLevel, brtlvl)){
 80a04a4:	4642      	mov	r2, r8
 80a04a6:	4649      	mov	r1, r9
 80a04a8:	4620      	mov	r0, r4
 80a04aa:	f7ff ff8d 	bl	80a03c8 <_Z13getPieceColoriii>
 80a04ae:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80a04b2:	4283      	cmp	r3, r0
 80a04b4:	d105      	bne.n	80a04c2 <_Z7levelUpiiiiPi+0x36>
                userBoard[c2] = getPieceColor(c1, newLevel, brtlvl);
 80a04b6:	4642      	mov	r2, r8
 80a04b8:	4651      	mov	r1, sl
 80a04ba:	4620      	mov	r0, r4
 80a04bc:	f7ff ff84 	bl	80a03c8 <_Z13getPieceColoriii>
 80a04c0:	6030      	str	r0, [r6, #0]
}

void levelUp(int oldLevel, int newLevel, int arraySize, int brtlvl, int* userBoard){
    int c1, c2;
    for(c1 = 0; c1 < 7; c1++){
        for(c2 = 0; c2 < arraySize; c2++){
 80a04c2:	3501      	adds	r5, #1
 80a04c4:	e7ec      	b.n	80a04a0 <_Z7levelUpiiiiPi+0x14>
    
}

void levelUp(int oldLevel, int newLevel, int arraySize, int brtlvl, int* userBoard){
    int c1, c2;
    for(c1 = 0; c1 < 7; c1++){
 80a04c6:	3401      	adds	r4, #1
 80a04c8:	2c07      	cmp	r4, #7
 80a04ca:	d1e7      	bne.n	80a049c <_Z7levelUpiiiiPi+0x10>
                userBoard[c2] = getPieceColor(c1, newLevel, brtlvl);
            }
        }
    }
    return;
}
 80a04cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a04d0 <_Z11isSpotLegaliiiPi>:

bool canShiftPiece(int currSpot, int direction, int pid, int orientation, int pieceColor, int* userBoard){
    return true;
}

bool isSpotLegal(int newSpot, int pid, int orientation, int* userBoard){      //Function to test if a new configuration is a legal change in the board, returns true if legal
 80a04d0:	b530      	push	{r4, r5, lr}
 80a04d2:	b085      	sub	sp, #20
 80a04d4:	4604      	mov	r4, r0
 80a04d6:	4608      	mov	r0, r1
 80a04d8:	4611      	mov	r1, r2
    int tempPiece[4];                                                               //Temporary array to hold piece configuration offsets
    loadPiece(pid, orientation, tempPiece);                                        //Populate array with offsets
 80a04da:	466a      	mov	r2, sp

bool canShiftPiece(int currSpot, int direction, int pid, int orientation, int pieceColor, int* userBoard){
    return true;
}

bool isSpotLegal(int newSpot, int pid, int orientation, int* userBoard){      //Function to test if a new configuration is a legal change in the board, returns true if legal
 80a04dc:	461d      	mov	r5, r3
    int tempPiece[4];                                                               //Temporary array to hold piece configuration offsets
    loadPiece(pid, orientation, tempPiece);                                        //Populate array with offsets
 80a04de:	f7ff fe99 	bl	80a0214 <_Z9loadPieceiiPi>
    int tempMax = tempPiece[0];
 80a04e2:	9a00      	ldr	r2, [sp, #0]
 80a04e4:	2100      	movs	r1, #0
    int tempMin = tempPiece[0];
 80a04e6:	4610      	mov	r0, r2
    for(i = 0; i < 4; i++){
        if(tempPiece[i] > tempMax){
 80a04e8:	f85d 3021 	ldr.w	r3, [sp, r1, lsl #2]
bool isSpotLegal(int newSpot, int pid, int orientation, int* userBoard){      //Function to test if a new configuration is a legal change in the board, returns true if legal
    int tempPiece[4];                                                               //Temporary array to hold piece configuration offsets
    loadPiece(pid, orientation, tempPiece);                                        //Populate array with offsets
    int tempMax = tempPiece[0];
    int tempMin = tempPiece[0];
    for(i = 0; i < 4; i++){
 80a04ec:	3101      	adds	r1, #1
 80a04ee:	429a      	cmp	r2, r3
 80a04f0:	bfb8      	it	lt
 80a04f2:	461a      	movlt	r2, r3
 80a04f4:	4298      	cmp	r0, r3
 80a04f6:	bfa8      	it	ge
 80a04f8:	4618      	movge	r0, r3
 80a04fa:	2904      	cmp	r1, #4
 80a04fc:	d1f4      	bne.n	80a04e8 <_Z11isSpotLegaliiiPi+0x18>
 80a04fe:	4b0b      	ldr	r3, [pc, #44]	; (80a052c <_Z11isSpotLegaliiiPi+0x5c>)
        }
        if(tempPiece[i] < tempMin){
            tempMin = tempPiece[i];
        }
    }
    if(newSpot + tempMax > 255 || newSpot + tempMin < 0){
 80a0500:	4422      	add	r2, r4
 80a0502:	2aff      	cmp	r2, #255	; 0xff
 80a0504:	6019      	str	r1, [r3, #0]
 80a0506:	dc0e      	bgt.n	80a0526 <_Z11isSpotLegaliiiPi+0x56>
 80a0508:	42c4      	cmn	r4, r0
 80a050a:	d40c      	bmi.n	80a0526 <_Z11isSpotLegaliiiPi+0x56>
 80a050c:	2200      	movs	r2, #0
        return false;
    }
    for(int i = 0; i < 4; i++){                                                     //Loop through each offset
        if(userBoard[newSpot + tempPiece[i]] > 0){                                      //Check if location is already occupied
 80a050e:	f85d 1022 	ldr.w	r1, [sp, r2, lsl #2]
 80a0512:	4421      	add	r1, r4
 80a0514:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 80a0518:	2b00      	cmp	r3, #0
 80a051a:	dc04      	bgt.n	80a0526 <_Z11isSpotLegaliiiPi+0x56>
        }
    }
    if(newSpot + tempMax > 255 || newSpot + tempMin < 0){
        return false;
    }
    for(int i = 0; i < 4; i++){                                                     //Loop through each offset
 80a051c:	3201      	adds	r2, #1
 80a051e:	2a04      	cmp	r2, #4
 80a0520:	d1f5      	bne.n	80a050e <_Z11isSpotLegaliiiPi+0x3e>
        if(userBoard[newSpot + tempPiece[i]] > 0){                                      //Check if location is already occupied
            return false;                                                                   //If any parts are occupied, then new location is not legal
        }
    }
    return true;
 80a0522:	2001      	movs	r0, #1
 80a0524:	e000      	b.n	80a0528 <_Z11isSpotLegaliiiPi+0x58>
        if(tempPiece[i] < tempMin){
            tempMin = tempPiece[i];
        }
    }
    if(newSpot + tempMax > 255 || newSpot + tempMin < 0){
        return false;
 80a0526:	2000      	movs	r0, #0
        if(userBoard[newSpot + tempPiece[i]] > 0){                                      //Check if location is already occupied
            return false;                                                                   //If any parts are occupied, then new location is not legal
        }
    }
    return true;
}
 80a0528:	b005      	add	sp, #20
 80a052a:	bd30      	pop	{r4, r5, pc}
 80a052c:	2000006c 	.word	0x2000006c

080a0530 <_Z10placePieceiiiPi>:
            }
            break;
    }
}

bool placePiece(int newSpot, int pid, int pieceColor, int* userBoard){
 80a0530:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0532:	460f      	mov	r7, r1
 80a0534:	4605      	mov	r5, r0
 80a0536:	461c      	mov	r4, r3
 80a0538:	b085      	sub	sp, #20
    int tempPiece[4];
    loadPiece(pid, 0, tempPiece);
 80a053a:	2100      	movs	r1, #0
 80a053c:	4638      	mov	r0, r7
            }
            break;
    }
}

bool placePiece(int newSpot, int pid, int pieceColor, int* userBoard){
 80a053e:	4616      	mov	r6, r2
    int tempPiece[4];
    loadPiece(pid, 0, tempPiece);
 80a0540:	466a      	mov	r2, sp
 80a0542:	f7ff fe67 	bl	80a0214 <_Z9loadPieceiiPi>
    if(isSpotLegal(newSpot, pid, 0, userBoard)){
 80a0546:	4623      	mov	r3, r4
 80a0548:	2200      	movs	r2, #0
 80a054a:	4639      	mov	r1, r7
 80a054c:	4628      	mov	r0, r5
 80a054e:	f7ff ffbf 	bl	80a04d0 <_Z11isSpotLegaliiiPi>
 80a0552:	b148      	cbz	r0, 80a0568 <_Z10placePieceiiiPi+0x38>
 80a0554:	2300      	movs	r3, #0
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a0556:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]

bool placePiece(int newSpot, int pid, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, 0, tempPiece);
    if(isSpotLegal(newSpot, pid, 0, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a055a:	3301      	adds	r3, #1
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a055c:	442a      	add	r2, r5

bool placePiece(int newSpot, int pid, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, 0, tempPiece);
    if(isSpotLegal(newSpot, pid, 0, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a055e:	2b04      	cmp	r3, #4
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a0560:	f844 6022 	str.w	r6, [r4, r2, lsl #2]

bool placePiece(int newSpot, int pid, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, 0, tempPiece);
    if(isSpotLegal(newSpot, pid, 0, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0564:	d1f7      	bne.n	80a0556 <_Z10placePieceiiiPi+0x26>
 80a0566:	e008      	b.n	80a057a <_Z10placePieceiiiPi+0x4a>
 80a0568:	4603      	mov	r3, r0
        }
        return true;
    }
    else{
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a056a:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
            userBoard[newSpot+tempPiece[i]] = pieceColor;
        }
        return true;
    }
    else{
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a056e:	3301      	adds	r3, #1
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a0570:	442a      	add	r2, r5
            userBoard[newSpot+tempPiece[i]] = pieceColor;
        }
        return true;
    }
    else{
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0572:	2b04      	cmp	r3, #4
            userBoard[newSpot+tempPiece[i]] = pieceColor;
 80a0574:	f844 6022 	str.w	r6, [r4, r2, lsl #2]
            userBoard[newSpot+tempPiece[i]] = pieceColor;
        }
        return true;
    }
    else{
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0578:	d1f7      	bne.n	80a056a <_Z10placePieceiiiPi+0x3a>
            userBoard[newSpot+tempPiece[i]] = pieceColor;
        }
        return false;
    }
    
}
 80a057a:	b005      	add	sp, #20
 80a057c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a057e <_Z11rotatePieceiiPiiiS_>:
            }
    }
    return false;
}

void rotatePiece(int currSpot, int pid, int* currOrientation, int newOrientation, int pieceColor, int* userBoard){
 80a057e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0582:	460f      	mov	r7, r1
 80a0584:	4690      	mov	r8, r2
 80a0586:	4606      	mov	r6, r0
    int tempPiece[4];
    loadPiece(pid, *currOrientation, tempPiece);
 80a0588:	f8d8 1000 	ldr.w	r1, [r8]
 80a058c:	466a      	mov	r2, sp
 80a058e:	4638      	mov	r0, r7
            }
    }
    return false;
}

void rotatePiece(int currSpot, int pid, int* currOrientation, int newOrientation, int pieceColor, int* userBoard){
 80a0590:	469a      	mov	sl, r3
 80a0592:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80a0596:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int tempPiece[4];
    loadPiece(pid, *currOrientation, tempPiece);
 80a0598:	f7ff fe3c 	bl	80a0214 <_Z9loadPieceiiPi>
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a059c:	2300      	movs	r3, #0
        userBoard[currSpot+tempPiece[i]] = 0;
 80a059e:	4619      	mov	r1, r3
 80a05a0:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
}

void rotatePiece(int currSpot, int pid, int* currOrientation, int newOrientation, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, *currOrientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a05a4:	3301      	adds	r3, #1
        userBoard[currSpot+tempPiece[i]] = 0;
 80a05a6:	4432      	add	r2, r6
}

void rotatePiece(int currSpot, int pid, int* currOrientation, int newOrientation, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, *currOrientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a05a8:	2b04      	cmp	r3, #4
        userBoard[currSpot+tempPiece[i]] = 0;
 80a05aa:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}

void rotatePiece(int currSpot, int pid, int* currOrientation, int newOrientation, int pieceColor, int* userBoard){
    int tempPiece[4];
    loadPiece(pid, *currOrientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a05ae:	d1f7      	bne.n	80a05a0 <_Z11rotatePieceiiPiiiS_+0x22>
        userBoard[currSpot+tempPiece[i]] = 0;
    }
    loadPiece(pid, newOrientation, tempPiece);
 80a05b0:	466a      	mov	r2, sp
 80a05b2:	4651      	mov	r1, sl
 80a05b4:	4638      	mov	r0, r7
 80a05b6:	f7ff fe2d 	bl	80a0214 <_Z9loadPieceiiPi>
    if(isSpotLegal(currSpot, pid, newOrientation, userBoard)){
 80a05ba:	462b      	mov	r3, r5
 80a05bc:	4652      	mov	r2, sl
 80a05be:	4639      	mov	r1, r7
 80a05c0:	4630      	mov	r0, r6
 80a05c2:	f7ff ff85 	bl	80a04d0 <_Z11isSpotLegaliiiPi>
 80a05c6:	4604      	mov	r4, r0
 80a05c8:	b158      	cbz	r0, 80a05e2 <_Z11rotatePieceiiPiiiS_+0x64>
 80a05ca:	2300      	movs	r3, #0
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new rotation of the piece
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a05cc:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    for(int i = 0; i < 4; i++){                                             //Erase current color value
        userBoard[currSpot+tempPiece[i]] = 0;
    }
    loadPiece(pid, newOrientation, tempPiece);
    if(isSpotLegal(currSpot, pid, newOrientation, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new rotation of the piece
 80a05d0:	3301      	adds	r3, #1
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a05d2:	4432      	add	r2, r6
    for(int i = 0; i < 4; i++){                                             //Erase current color value
        userBoard[currSpot+tempPiece[i]] = 0;
    }
    loadPiece(pid, newOrientation, tempPiece);
    if(isSpotLegal(currSpot, pid, newOrientation, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new rotation of the piece
 80a05d4:	2b04      	cmp	r3, #4
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a05d6:	f845 9022 	str.w	r9, [r5, r2, lsl #2]
    for(int i = 0; i < 4; i++){                                             //Erase current color value
        userBoard[currSpot+tempPiece[i]] = 0;
    }
    loadPiece(pid, newOrientation, tempPiece);
    if(isSpotLegal(currSpot, pid, newOrientation, userBoard)){
        for(int i = 0; i < 4; i++){                                             //Fill given color into the new rotation of the piece
 80a05da:	d1f7      	bne.n	80a05cc <_Z11rotatePieceiiPiiiS_+0x4e>
            userBoard[currSpot+tempPiece[i]] = pieceColor;
        }
        *currOrientation = newOrientation;
 80a05dc:	f8c8 a000 	str.w	sl, [r8]
        return;
 80a05e0:	e00e      	b.n	80a0600 <_Z11rotatePieceiiPiiiS_+0x82>
    }
    else{
        loadPiece(pid, *currOrientation, tempPiece);
 80a05e2:	4638      	mov	r0, r7
 80a05e4:	466a      	mov	r2, sp
 80a05e6:	f8d8 1000 	ldr.w	r1, [r8]
 80a05ea:	f7ff fe13 	bl	80a0214 <_Z9loadPieceiiPi>
        for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a05ee:	4620      	mov	r0, r4
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a05f0:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
        *currOrientation = newOrientation;
        return;
    }
    else{
        loadPiece(pid, *currOrientation, tempPiece);
        for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a05f4:	3001      	adds	r0, #1
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a05f6:	4433      	add	r3, r6
        *currOrientation = newOrientation;
        return;
    }
    else{
        loadPiece(pid, *currOrientation, tempPiece);
        for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a05f8:	2804      	cmp	r0, #4
            userBoard[currSpot+tempPiece[i]] = pieceColor;
 80a05fa:	f845 9023 	str.w	r9, [r5, r3, lsl #2]
        *currOrientation = newOrientation;
        return;
    }
    else{
        loadPiece(pid, *currOrientation, tempPiece);
        for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a05fe:	d1f7      	bne.n	80a05f0 <_Z11rotatePieceiiPiiiS_+0x72>
            userBoard[currSpot+tempPiece[i]] = pieceColor;
        }
        return;
    }
}
 80a0600:	b004      	add	sp, #16
 80a0602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0606 <_Z13shiftRowsDowniiiPi>:
    }
}

void shiftRowsDown(int emptyRow, int numRows, int numColumns, int* userBoard){        //Fucntion to shift all rows above emptyRow down 1
    int i;
    for(i = emptyRow*numColumns+numColumns-1; i >= numColumns; i--){            
 80a0606:	fb00 2002 	mla	r0, r0, r2, r2
 80a060a:	1e41      	subs	r1, r0, #1
 80a060c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80a0610:	4291      	cmp	r1, r2
 80a0612:	f1a3 0304 	sub.w	r3, r3, #4
 80a0616:	db04      	blt.n	80a0622 <_Z13shiftRowsDowniiiPi+0x1c>
        userBoard[i] = userBoard[i-16];
 80a0618:	f853 0c40 	ldr.w	r0, [r3, #-64]
    }
}

void shiftRowsDown(int emptyRow, int numRows, int numColumns, int* userBoard){        //Fucntion to shift all rows above emptyRow down 1
    int i;
    for(i = emptyRow*numColumns+numColumns-1; i >= numColumns; i--){            
 80a061c:	3901      	subs	r1, #1
        userBoard[i] = userBoard[i-16];
 80a061e:	6018      	str	r0, [r3, #0]
    }
}

void shiftRowsDown(int emptyRow, int numRows, int numColumns, int* userBoard){        //Fucntion to shift all rows above emptyRow down 1
    int i;
    for(i = emptyRow*numColumns+numColumns-1; i >= numColumns; i--){            
 80a0620:	e7f6      	b.n	80a0610 <_Z13shiftRowsDowniiiPi+0xa>
 80a0622:	4770      	bx	lr

080a0624 <_Z12checkForRowsiiPiS_S_>:
        }
    }
    return true;
}

void checkForRows(int numRows, int numColumns, int * userScore, int * currLevel, int * userBoard){               //Function to scan for any complete rows that need to be erased per game rules
 80a0624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;                                                                      //i and j are multipurpose loop variables
    int j;  
    for(i = 0; i < numRows; i++){                                               //Loop for each row of board
 80a0628:	2400      	movs	r4, #0
        }
    }
    return true;
}

void checkForRows(int numRows, int numColumns, int * userScore, int * currLevel, int * userBoard){               //Function to scan for any complete rows that need to be erased per game rules
 80a062a:	4605      	mov	r5, r0
 80a062c:	4688      	mov	r8, r1
 80a062e:	4691      	mov	r9, r2
 80a0630:	461f      	mov	r7, r3
                isEqual = false;
            }
        }
        if(isEqual){                                                                    //If there is a complete row, erase it and call the function to shift rows down
            for(j = 0; j < numRows; j++){
                userBoard[j+i*numColumns] = 0;
 80a0632:	46a2      	mov	sl, r4
 80a0634:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a0636:	ea4f 0b81 	mov.w	fp, r1, lsl #2
}

void checkForRows(int numRows, int numColumns, int * userScore, int * currLevel, int * userBoard){               //Function to scan for any complete rows that need to be erased per game rules
    int i;                                                                      //i and j are multipurpose loop variables
    int j;  
    for(i = 0; i < numRows; i++){                                               //Loop for each row of board
 80a063a:	42ac      	cmp	r4, r5
 80a063c:	da38      	bge.n	80a06b0 <_Z12checkForRowsiiPiS_S_+0x8c>
 80a063e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0640:	2201      	movs	r2, #1
 80a0642:	eb03 1084 	add.w	r0, r3, r4, lsl #6
 80a0646:	2300      	movs	r3, #0
        bool isEqual = true;                                                            //Set bool variable to check each row, gets set false if there is an empty space
        for(j = 0; j < numRows; j++){
 80a0648:	42ab      	cmp	r3, r5
 80a064a:	da06      	bge.n	80a065a <_Z12checkForRowsiiPiS_S_+0x36>
            if(userBoard[j+i*16] == 0){                                                          //If any spots are empty, then row is not complete
 80a064c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
void checkForRows(int numRows, int numColumns, int * userScore, int * currLevel, int * userBoard){               //Function to scan for any complete rows that need to be erased per game rules
    int i;                                                                      //i and j are multipurpose loop variables
    int j;  
    for(i = 0; i < numRows; i++){                                               //Loop for each row of board
        bool isEqual = true;                                                            //Set bool variable to check each row, gets set false if there is an empty space
        for(j = 0; j < numRows; j++){
 80a0650:	3301      	adds	r3, #1
            if(userBoard[j+i*16] == 0){                                                          //If any spots are empty, then row is not complete
                isEqual = false;
 80a0652:	2900      	cmp	r1, #0
 80a0654:	bf08      	it	eq
 80a0656:	2200      	moveq	r2, #0
void checkForRows(int numRows, int numColumns, int * userScore, int * currLevel, int * userBoard){               //Function to scan for any complete rows that need to be erased per game rules
    int i;                                                                      //i and j are multipurpose loop variables
    int j;  
    for(i = 0; i < numRows; i++){                                               //Loop for each row of board
        bool isEqual = true;                                                            //Set bool variable to check each row, gets set false if there is an empty space
        for(j = 0; j < numRows; j++){
 80a0658:	e7f6      	b.n	80a0648 <_Z12checkForRowsiiPiS_S_+0x24>
            if(userBoard[j+i*16] == 0){                                                          //If any spots are empty, then row is not complete
                isEqual = false;
            }
        }
        if(isEqual){                                                                    //If there is a complete row, erase it and call the function to shift rows down
 80a065a:	b332      	cbz	r2, 80a06aa <_Z12checkForRowsiiPiS_S_+0x86>
 80a065c:	2300      	movs	r3, #0
            for(j = 0; j < numRows; j++){
 80a065e:	42ab      	cmp	r3, r5
 80a0660:	da03      	bge.n	80a066a <_Z12checkForRowsiiPiS_S_+0x46>
                userBoard[j+i*numColumns] = 0;
 80a0662:	f846 a023 	str.w	sl, [r6, r3, lsl #2]
            if(userBoard[j+i*16] == 0){                                                          //If any spots are empty, then row is not complete
                isEqual = false;
            }
        }
        if(isEqual){                                                                    //If there is a complete row, erase it and call the function to shift rows down
            for(j = 0; j < numRows; j++){
 80a0666:	3301      	adds	r3, #1
 80a0668:	e7f9      	b.n	80a065e <_Z12checkForRowsiiPiS_S_+0x3a>
                userBoard[j+i*numColumns] = 0;
            }
            *userScore = *userScore+1;
 80a066a:	f8d9 2000 	ldr.w	r2, [r9]
            if(*userScore%5 == 0 && *currLevel < 1){
 80a066e:	2305      	movs	r3, #5
        }
        if(isEqual){                                                                    //If there is a complete row, erase it and call the function to shift rows down
            for(j = 0; j < numRows; j++){
                userBoard[j+i*numColumns] = 0;
            }
            *userScore = *userScore+1;
 80a0670:	3201      	adds	r2, #1
            if(*userScore%5 == 0 && *currLevel < 1){
 80a0672:	fb92 f3f3 	sdiv	r3, r2, r3
 80a0676:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a067a:	429a      	cmp	r2, r3
        }
        if(isEqual){                                                                    //If there is a complete row, erase it and call the function to shift rows down
            for(j = 0; j < numRows; j++){
                userBoard[j+i*numColumns] = 0;
            }
            *userScore = *userScore+1;
 80a067c:	f8c9 2000 	str.w	r2, [r9]
            if(*userScore%5 == 0 && *currLevel < 1){
 80a0680:	d10d      	bne.n	80a069e <_Z12checkForRowsiiPiS_S_+0x7a>
 80a0682:	6838      	ldr	r0, [r7, #0]
 80a0684:	2800      	cmp	r0, #0
 80a0686:	dc0a      	bgt.n	80a069e <_Z12checkForRowsiiPiS_S_+0x7a>
                levelUp(*currLevel,(*currLevel) + 1, 256, 20, tetris);
 80a0688:	4b0b      	ldr	r3, [pc, #44]	; (80a06b8 <_Z12checkForRowsiiPiS_S_+0x94>)
 80a068a:	f44f 7280 	mov.w	r2, #256	; 0x100
 80a068e:	9300      	str	r3, [sp, #0]
 80a0690:	1c41      	adds	r1, r0, #1
 80a0692:	2314      	movs	r3, #20
 80a0694:	f7ff fefa 	bl	80a048c <_Z7levelUpiiiiPi>
                *currLevel = *currLevel + 1;
 80a0698:	683b      	ldr	r3, [r7, #0]
 80a069a:	3301      	adds	r3, #1
 80a069c:	603b      	str	r3, [r7, #0]
            }
            shiftRowsDown(i, numRows, numColumns, userBoard);
 80a069e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a06a0:	4642      	mov	r2, r8
 80a06a2:	4629      	mov	r1, r5
 80a06a4:	4620      	mov	r0, r4
 80a06a6:	f7ff ffae 	bl	80a0606 <_Z13shiftRowsDowniiiPi>
}

void checkForRows(int numRows, int numColumns, int * userScore, int * currLevel, int * userBoard){               //Function to scan for any complete rows that need to be erased per game rules
    int i;                                                                      //i and j are multipurpose loop variables
    int j;  
    for(i = 0; i < numRows; i++){                                               //Loop for each row of board
 80a06aa:	3401      	adds	r4, #1
 80a06ac:	445e      	add	r6, fp
 80a06ae:	e7c4      	b.n	80a063a <_Z12checkForRowsiiPiS_S_+0x16>
                *currLevel = *currLevel + 1;
            }
            shiftRowsDown(i, numRows, numColumns, userBoard);
        }
    }
}
 80a06b0:	b003      	add	sp, #12
 80a06b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a06b6:	bf00      	nop
 80a06b8:	2000007c 	.word	0x2000007c

080a06bc <_Z9movePiecePiiiiiS_S_S_>:
                break; 
        }
    }
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int * userScore, int * currLevel, int* userBoard){            //Returns true if at bottom
 80a06bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a06c0:	4691      	mov	r9, r2
 80a06c2:	b086      	sub	sp, #24
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
 80a06c4:	af02      	add	r7, sp, #8
                break; 
        }
    }
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int * userScore, int * currLevel, int* userBoard){            //Returns true if at bottom
 80a06c6:	4604      	mov	r4, r0
 80a06c8:	460d      	mov	r5, r1
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
 80a06ca:	463a      	mov	r2, r7
 80a06cc:	4619      	mov	r1, r3
 80a06ce:	4648      	mov	r0, r9
                break; 
        }
    }
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int * userScore, int * currLevel, int* userBoard){            //Returns true if at bottom
 80a06d0:	469a      	mov	sl, r3
 80a06d2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80a06d6:	9e11      	ldr	r6, [sp, #68]	; 0x44
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
 80a06d8:	f7ff fd9c 	bl	80a0214 <_Z9loadPieceiiPi>
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a06dc:	2300      	movs	r3, #0
        userBoard[*currSpot+tempPiece[i]] = 0;
 80a06de:	4619      	mov	r1, r3
 80a06e0:	6820      	ldr	r0, [r4, #0]
 80a06e2:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int * userScore, int * currLevel, int* userBoard){            //Returns true if at bottom
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a06e6:	3301      	adds	r3, #1
        userBoard[*currSpot+tempPiece[i]] = 0;
 80a06e8:	4402      	add	r2, r0
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int * userScore, int * currLevel, int* userBoard){            //Returns true if at bottom
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a06ea:	2b04      	cmp	r3, #4
        userBoard[*currSpot+tempPiece[i]] = 0;
 80a06ec:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
}

bool movePiece(int* currSpot, int direction, int pid, int orientation, int pieceColor, int * userScore, int * currLevel, int* userBoard){            //Returns true if at bottom
    int tempPiece[4];
    loadPiece(pid, orientation, tempPiece);
    for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a06f0:	d1f6      	bne.n	80a06e0 <_Z9movePiecePiiiiiS_S_S_+0x24>
        userBoard[*currSpot+tempPiece[i]] = 0;
    }
    switch (direction){
 80a06f2:	2d01      	cmp	r5, #1
 80a06f4:	d038      	beq.n	80a0768 <_Z9movePiecePiiiiiS_S_S_+0xac>
 80a06f6:	2d02      	cmp	r5, #2
 80a06f8:	d063      	beq.n	80a07c2 <_Z9movePiecePiiiiiS_S_S_+0x106>
 80a06fa:	2d00      	cmp	r5, #0
 80a06fc:	f040 808f 	bne.w	80a081e <_Z9movePiecePiiiiiS_S_S_+0x162>
        case 0:                                                                 //Piece being moved down (automatic or not)
            if(!isSpotLegal(*currSpot+16, pid, orientation, userBoard)){              //Checks if piece is touching another piece along its bottom edge
 80a0700:	6820      	ldr	r0, [r4, #0]
 80a0702:	4633      	mov	r3, r6
 80a0704:	4652      	mov	r2, sl
 80a0706:	4649      	mov	r1, r9
 80a0708:	3010      	adds	r0, #16
 80a070a:	f7ff fee1 	bl	80a04d0 <_Z11isSpotLegaliiiPi>
 80a070e:	b988      	cbnz	r0, 80a0734 <_Z9movePiecePiiiiiS_S_S_+0x78>
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a0710:	6822      	ldr	r2, [r4, #0]
 80a0712:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        userBoard[*currSpot+tempPiece[i]] = 0;
    }
    switch (direction){
        case 0:                                                                 //Piece being moved down (automatic or not)
            if(!isSpotLegal(*currSpot+16, pid, orientation, userBoard)){              //Checks if piece is touching another piece along its bottom edge
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0716:	3501      	adds	r5, #1
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a0718:	4413      	add	r3, r2
        userBoard[*currSpot+tempPiece[i]] = 0;
    }
    switch (direction){
        case 0:                                                                 //Piece being moved down (automatic or not)
            if(!isSpotLegal(*currSpot+16, pid, orientation, userBoard)){              //Checks if piece is touching another piece along its bottom edge
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a071a:	2d04      	cmp	r5, #4
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a071c:	f846 8023 	str.w	r8, [r6, r3, lsl #2]
        userBoard[*currSpot+tempPiece[i]] = 0;
    }
    switch (direction){
        case 0:                                                                 //Piece being moved down (automatic or not)
            if(!isSpotLegal(*currSpot+16, pid, orientation, userBoard)){              //Checks if piece is touching another piece along its bottom edge
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0720:	d1f6      	bne.n	80a0710 <_Z9movePiecePiiiiiS_S_S_+0x54>
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
                }
                checkForRows(16,16, userScore, currLevel, userBoard);
 80a0722:	2110      	movs	r1, #16
 80a0724:	4608      	mov	r0, r1
 80a0726:	9600      	str	r6, [sp, #0]
 80a0728:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a072a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a072c:	f7ff ff7a 	bl	80a0624 <_Z12checkForRowsiiPiS_S_>
                return true;                                                            //If it is touching another piece, tell caller that it can drop next piece
 80a0730:	2001      	movs	r0, #1
 80a0732:	e075      	b.n	80a0820 <_Z9movePiecePiiiiiS_S_S_+0x164>
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a0734:	462a      	mov	r2, r5
 80a0736:	6821      	ldr	r1, [r4, #0]
 80a0738:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
                }
                checkForRows(16,16, userScore, currLevel, userBoard);
                return true;                                                            //If it is touching another piece, tell caller that it can drop next piece
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a073c:	3501      	adds	r5, #1
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a073e:	440b      	add	r3, r1
                }
                checkForRows(16,16, userScore, currLevel, userBoard);
                return true;                                                            //If it is touching another piece, tell caller that it can drop next piece
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0740:	2d04      	cmp	r5, #4
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a0742:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
                }
                checkForRows(16,16, userScore, currLevel, userBoard);
                return true;                                                            //If it is touching another piece, tell caller that it can drop next piece
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0746:	d1f6      	bne.n	80a0736 <_Z9movePiecePiiiiiS_S_S_+0x7a>
 80a0748:	2200      	movs	r2, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]+16] = pieceColor;
 80a074a:	6821      	ldr	r1, [r4, #0]
 80a074c:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0750:	3201      	adds	r2, #1
                    userBoard[*currSpot+tempPiece[i]+16] = pieceColor;
 80a0752:	440b      	add	r3, r1
 80a0754:	3310      	adds	r3, #16
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0756:	2a04      	cmp	r2, #4
                    userBoard[*currSpot+tempPiece[i]+16] = pieceColor;
 80a0758:	f846 8023 	str.w	r8, [r6, r3, lsl #2]
            }
            else{                                                                   //Otherwise, move piece down in array
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a075c:	d1f5      	bne.n	80a074a <_Z9movePiecePiiiiiS_S_S_+0x8e>
                    userBoard[*currSpot+tempPiece[i]+16] = pieceColor;
                }
                *currSpot = *currSpot+ 16;
 80a075e:	6823      	ldr	r3, [r4, #0]
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
                }
                break;
            }
    }
    return false;
 80a0760:	2000      	movs	r0, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]+16] = pieceColor;
                }
                *currSpot = *currSpot+ 16;
 80a0762:	3310      	adds	r3, #16
 80a0764:	6023      	str	r3, [r4, #0]
                break;                                                          //Caller is told that piece can keep moving
 80a0766:	e05b      	b.n	80a0820 <_Z9movePiecePiiiiiS_S_S_+0x164>
            }
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
 80a0768:	6820      	ldr	r0, [r4, #0]
 80a076a:	4633      	mov	r3, r6
 80a076c:	4652      	mov	r2, sl
 80a076e:	4649      	mov	r1, r9
 80a0770:	3001      	adds	r0, #1
 80a0772:	f7ff fead 	bl	80a04d0 <_Z11isSpotLegaliiiPi>
 80a0776:	b1d0      	cbz	r0, 80a07ae <_Z9movePiecePiiiiiS_S_S_+0xf2>
 80a0778:	2300      	movs	r3, #0
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a077a:	4619      	mov	r1, r3
 80a077c:	6820      	ldr	r0, [r4, #0]
 80a077e:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
                *currSpot = *currSpot+ 16;
                break;                                                          //Caller is told that piece can keep moving
            }
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0782:	3301      	adds	r3, #1
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a0784:	4402      	add	r2, r0
                *currSpot = *currSpot+ 16;
                break;                                                          //Caller is told that piece can keep moving
            }
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0786:	2b04      	cmp	r3, #4
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a0788:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
                *currSpot = *currSpot+ 16;
                break;                                                          //Caller is told that piece can keep moving
            }
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a078c:	d1f6      	bne.n	80a077c <_Z9movePiecePiiiiiS_S_S_+0xc0>
 80a078e:	2200      	movs	r2, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]+1] = pieceColor;
 80a0790:	6821      	ldr	r1, [r4, #0]
 80a0792:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0796:	3201      	adds	r2, #1
                    userBoard[*currSpot+tempPiece[i]+1] = pieceColor;
 80a0798:	440b      	add	r3, r1
 80a079a:	3301      	adds	r3, #1
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a079c:	2a04      	cmp	r2, #4
                    userBoard[*currSpot+tempPiece[i]+1] = pieceColor;
 80a079e:	f846 8023 	str.w	r8, [r6, r3, lsl #2]
        case 1:                                                                 //Piece being moved left
            if(isSpotLegal(*currSpot+1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 1, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a07a2:	d1f5      	bne.n	80a0790 <_Z9movePiecePiiiiiS_S_S_+0xd4>
                    userBoard[*currSpot+tempPiece[i]+1] = pieceColor;
                }
                *currSpot = *currSpot+1;
 80a07a4:	6823      	ldr	r3, [r4, #0]
                return false;
 80a07a6:	2000      	movs	r0, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]+1] = pieceColor;
                }
                *currSpot = *currSpot+1;
 80a07a8:	3301      	adds	r3, #1
 80a07aa:	6023      	str	r3, [r4, #0]
                return false;
 80a07ac:	e038      	b.n	80a0820 <_Z9movePiecePiiiiiS_S_S_+0x164>
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a07ae:	6822      	ldr	r2, [r4, #0]
 80a07b0:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
                }
                *currSpot = *currSpot+1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a07b4:	3001      	adds	r0, #1
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a07b6:	4413      	add	r3, r2
                }
                *currSpot = *currSpot+1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a07b8:	2804      	cmp	r0, #4
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a07ba:	f846 8023 	str.w	r8, [r6, r3, lsl #2]
                }
                *currSpot = *currSpot+1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a07be:	d1f6      	bne.n	80a07ae <_Z9movePiecePiiiiiS_S_S_+0xf2>
 80a07c0:	e02d      	b.n	80a081e <_Z9movePiecePiiiiiS_S_S_+0x162>
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
                }
                break;
            }
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
 80a07c2:	6820      	ldr	r0, [r4, #0]
 80a07c4:	4633      	mov	r3, r6
 80a07c6:	4652      	mov	r2, sl
 80a07c8:	4649      	mov	r1, r9
 80a07ca:	3801      	subs	r0, #1
 80a07cc:	f7ff fe80 	bl	80a04d0 <_Z11isSpotLegaliiiPi>
 80a07d0:	b1e0      	cbz	r0, 80a080c <_Z9movePiecePiiiiiS_S_S_+0x150>
 80a07d2:	2300      	movs	r3, #0
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a07d4:	4619      	mov	r1, r3
 80a07d6:	6820      	ldr	r0, [r4, #0]
 80a07d8:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
                }
                break;
            }
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a07dc:	3301      	adds	r3, #1
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a07de:	4402      	add	r2, r0
                }
                break;
            }
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a07e0:	2b04      	cmp	r3, #4
                    userBoard[*currSpot+tempPiece[i]] = 0;
 80a07e2:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
                }
                break;
            }
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a07e6:	d1f6      	bne.n	80a07d6 <_Z9movePiecePiiiiiS_S_S_+0x11a>
 80a07e8:	2200      	movs	r2, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]-1] = pieceColor;
 80a07ea:	6821      	ldr	r1, [r4, #0]
 80a07ec:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a07f0:	3201      	adds	r2, #1
                    userBoard[*currSpot+tempPiece[i]-1] = pieceColor;
 80a07f2:	440b      	add	r3, r1
 80a07f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a07f8:	3b01      	subs	r3, #1
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a07fa:	2a04      	cmp	r2, #4
                    userBoard[*currSpot+tempPiece[i]-1] = pieceColor;
 80a07fc:	f846 8023 	str.w	r8, [r6, r3, lsl #2]
        case 2:                                                                 //Piece being moved right
            if(isSpotLegal(*currSpot-1, pid, orientation, userBoard) && canShiftPiece(*currSpot, 2, pid, orientation, pieceColor, userBoard)){
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
 80a0800:	d1f3      	bne.n	80a07ea <_Z9movePiecePiiiiiS_S_S_+0x12e>
                    userBoard[*currSpot+tempPiece[i]-1] = pieceColor;
                }
                *currSpot = *currSpot-1;
 80a0802:	6823      	ldr	r3, [r4, #0]
                return false;
 80a0804:	2000      	movs	r0, #0
                    userBoard[*currSpot+tempPiece[i]] = 0;
                }
                for(int i = 0; i < 4; i++){                                             //Fill given color into the new location of the piece
                    userBoard[*currSpot+tempPiece[i]-1] = pieceColor;
                }
                *currSpot = *currSpot-1;
 80a0806:	3b01      	subs	r3, #1
 80a0808:	6023      	str	r3, [r4, #0]
                return false;
 80a080a:	e009      	b.n	80a0820 <_Z9movePiecePiiiiiS_S_S_+0x164>
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a080c:	6822      	ldr	r2, [r4, #0]
 80a080e:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
                }
                *currSpot = *currSpot-1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0812:	3001      	adds	r0, #1
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a0814:	4413      	add	r3, r2
                }
                *currSpot = *currSpot-1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a0816:	2804      	cmp	r0, #4
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
 80a0818:	f846 8023 	str.w	r8, [r6, r3, lsl #2]
                }
                *currSpot = *currSpot-1;
                return false;
            }
            else{
                for(int i = 0; i < 4; i++){                                             //Erase current color value
 80a081c:	d1f6      	bne.n	80a080c <_Z9movePiecePiiiiiS_S_S_+0x150>
                    userBoard[*currSpot+tempPiece[i]] = pieceColor;
                }
                break;
            }
    }
    return false;
 80a081e:	2000      	movs	r0, #0
}
 80a0820:	b006      	add	sp, #24
 80a0822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080a0828 <_Z13waitForButtoniPiiS_iS_S_S_>:
    strip.show();
}
void gameDone(){
    delay(20000);
}
void waitForButton(int timeDelay, int * currSpot, int pid, int * orientation, int pieceColor, int * userScore, int * currLvl, int* userBoard){
 80a0828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int myTemp;
    for(myTemp = 0; myTemp < (timeDelay/10); myTemp++){
 80a082c:	f04f 0a0a 	mov.w	sl, #10
    strip.show();
}
void gameDone(){
    delay(20000);
}
void waitForButton(int timeDelay, int * currSpot, int pid, int * orientation, int pieceColor, int * userScore, int * currLvl, int* userBoard){
 80a0830:	460e      	mov	r6, r1
 80a0832:	4617      	mov	r7, r2
 80a0834:	461d      	mov	r5, r3
    int myTemp;
    for(myTemp = 0; myTemp < (timeDelay/10); myTemp++){
 80a0836:	fb90 fafa 	sdiv	sl, r0, sl
    strip.show();
}
void gameDone(){
    delay(20000);
}
void waitForButton(int timeDelay, int * currSpot, int pid, int * orientation, int pieceColor, int * userScore, int * currLvl, int* userBoard){
 80a083a:	b085      	sub	sp, #20
 80a083c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80a0840:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80a0844:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    int myTemp;
    for(myTemp = 0; myTemp < (timeDelay/10); myTemp++){
 80a0848:	2400      	movs	r4, #0
 80a084a:	4554      	cmp	r4, sl
 80a084c:	da71      	bge.n	80a0932 <_Z13waitForButtoniPiiS_iS_S_S_+0x10a>
        if(digitalRead(lbtn) == HIGH){
 80a084e:	2000      	movs	r0, #0
 80a0850:	f002 f8a2 	bl	80a2998 <digitalRead>
 80a0854:	2801      	cmp	r0, #1
 80a0856:	4601      	mov	r1, r0
 80a0858:	d118      	bne.n	80a088c <_Z13waitForButtoniPiiS_iS_S_S_+0x64>
            movePiece(currSpot,1,pid, *orientation,pieceColor, userScore, currLvl, userBoard);
 80a085a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a085c:	f8cd 900c 	str.w	r9, [sp, #12]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	f8cd b008 	str.w	fp, [sp, #8]
 80a0866:	f8cd 8000 	str.w	r8, [sp]
 80a086a:	682b      	ldr	r3, [r5, #0]
 80a086c:	463a      	mov	r2, r7
 80a086e:	4630      	mov	r0, r6
 80a0870:	f7ff ff24 	bl	80a06bc <_Z9movePiecePiiiiiS_S_S_>
            printBoard(tetris);
 80a0874:	4830      	ldr	r0, [pc, #192]	; (80a0938 <_Z13waitForButtoniPiiS_iS_S_S_+0x110>)
 80a0876:	f7ff fc63 	bl	80a0140 <_Z10printBoardPi>
            while(digitalRead(lbtn) == HIGH){
 80a087a:	2000      	movs	r0, #0
 80a087c:	f002 f88c 	bl	80a2998 <digitalRead>
 80a0880:	2801      	cmp	r0, #1
 80a0882:	d151      	bne.n	80a0928 <_Z13waitForButtoniPiiS_iS_S_S_+0x100>
                delay(5);
 80a0884:	2005      	movs	r0, #5
 80a0886:	f001 fc99 	bl	80a21bc <delay>
    int myTemp;
    for(myTemp = 0; myTemp < (timeDelay/10); myTemp++){
        if(digitalRead(lbtn) == HIGH){
            movePiece(currSpot,1,pid, *orientation,pieceColor, userScore, currLvl, userBoard);
            printBoard(tetris);
            while(digitalRead(lbtn) == HIGH){
 80a088a:	e7f6      	b.n	80a087a <_Z13waitForButtoniPiiS_iS_S_S_+0x52>
                delay(5);
            }
        }
        else if(digitalRead(rbtn) == HIGH){
 80a088c:	2001      	movs	r0, #1
 80a088e:	f002 f883 	bl	80a2998 <digitalRead>
 80a0892:	2801      	cmp	r0, #1
 80a0894:	d119      	bne.n	80a08ca <_Z13waitForButtoniPiiS_iS_S_S_+0xa2>
            movePiece(currSpot, 2, pid, *orientation, pieceColor, userScore, currLvl, userBoard);
 80a0896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a0898:	f8cd 900c 	str.w	r9, [sp, #12]
 80a089c:	9301      	str	r3, [sp, #4]
 80a089e:	f8cd b008 	str.w	fp, [sp, #8]
 80a08a2:	f8cd 8000 	str.w	r8, [sp]
 80a08a6:	682b      	ldr	r3, [r5, #0]
 80a08a8:	463a      	mov	r2, r7
 80a08aa:	2102      	movs	r1, #2
 80a08ac:	4630      	mov	r0, r6
 80a08ae:	f7ff ff05 	bl	80a06bc <_Z9movePiecePiiiiiS_S_S_>
            printBoard(tetris);
 80a08b2:	4821      	ldr	r0, [pc, #132]	; (80a0938 <_Z13waitForButtoniPiiS_iS_S_S_+0x110>)
 80a08b4:	f7ff fc44 	bl	80a0140 <_Z10printBoardPi>
            while(digitalRead(rbtn) == HIGH){
 80a08b8:	2001      	movs	r0, #1
 80a08ba:	f002 f86d 	bl	80a2998 <digitalRead>
 80a08be:	2801      	cmp	r0, #1
 80a08c0:	d132      	bne.n	80a0928 <_Z13waitForButtoniPiiS_iS_S_S_+0x100>
                delay(5);
 80a08c2:	2005      	movs	r0, #5
 80a08c4:	f001 fc7a 	bl	80a21bc <delay>
            }
        }
        else if(digitalRead(rbtn) == HIGH){
            movePiece(currSpot, 2, pid, *orientation, pieceColor, userScore, currLvl, userBoard);
            printBoard(tetris);
            while(digitalRead(rbtn) == HIGH){
 80a08c8:	e7f6      	b.n	80a08b8 <_Z13waitForButtoniPiiS_iS_S_S_+0x90>
                delay(5);
            }
        }
        else if(digitalRead(dnbtn) == HIGH){
 80a08ca:	2002      	movs	r0, #2
 80a08cc:	f002 f864 	bl	80a2998 <digitalRead>
 80a08d0:	2801      	cmp	r0, #1
 80a08d2:	d104      	bne.n	80a08de <_Z13waitForButtoniPiiS_iS_S_S_+0xb6>
            myTemp += 10;
            delay(5);
 80a08d4:	2005      	movs	r0, #5
            while(digitalRead(rbtn) == HIGH){
                delay(5);
            }
        }
        else if(digitalRead(dnbtn) == HIGH){
            myTemp += 10;
 80a08d6:	340a      	adds	r4, #10
            delay(5);
 80a08d8:	f001 fc70 	bl	80a21bc <delay>
 80a08dc:	e024      	b.n	80a0928 <_Z13waitForButtoniPiiS_iS_S_S_+0x100>
        }
        else if(digitalRead(ebtn) == HIGH){
 80a08de:	2003      	movs	r0, #3
 80a08e0:	f002 f85a 	bl	80a2998 <digitalRead>
 80a08e4:	2801      	cmp	r0, #1
 80a08e6:	d117      	bne.n	80a0918 <_Z13waitForButtoniPiiS_iS_S_S_+0xf0>
            if(*orientation < 3){
 80a08e8:	682b      	ldr	r3, [r5, #0]
                rotatePiece(*currSpot, pid, orientation, (*orientation)+1, pieceColor, userBoard);
            }
            else{
                rotatePiece(*currSpot, pid, orientation, 0, pieceColor, userBoard);
 80a08ea:	6830      	ldr	r0, [r6, #0]
        else if(digitalRead(dnbtn) == HIGH){
            myTemp += 10;
            delay(5);
        }
        else if(digitalRead(ebtn) == HIGH){
            if(*orientation < 3){
 80a08ec:	2b02      	cmp	r3, #2
                rotatePiece(*currSpot, pid, orientation, (*orientation)+1, pieceColor, userBoard);
 80a08ee:	e88d 0300 	stmia.w	sp, {r8, r9}
 80a08f2:	bfd4      	ite	le
 80a08f4:	3301      	addle	r3, #1
            }
            else{
                rotatePiece(*currSpot, pid, orientation, 0, pieceColor, userBoard);
 80a08f6:	2300      	movgt	r3, #0
 80a08f8:	462a      	mov	r2, r5
 80a08fa:	4639      	mov	r1, r7
 80a08fc:	f7ff fe3f 	bl	80a057e <_Z11rotatePieceiiPiiiS_>
            }
            printBoard(tetris);
 80a0900:	480d      	ldr	r0, [pc, #52]	; (80a0938 <_Z13waitForButtoniPiiS_iS_S_S_+0x110>)
 80a0902:	f7ff fc1d 	bl	80a0140 <_Z10printBoardPi>
            while(digitalRead(ebtn) == HIGH){
 80a0906:	2003      	movs	r0, #3
 80a0908:	f002 f846 	bl	80a2998 <digitalRead>
 80a090c:	2801      	cmp	r0, #1
 80a090e:	d10b      	bne.n	80a0928 <_Z13waitForButtoniPiiS_iS_S_S_+0x100>
                delay(5);
 80a0910:	2005      	movs	r0, #5
 80a0912:	f001 fc53 	bl	80a21bc <delay>
            }
            else{
                rotatePiece(*currSpot, pid, orientation, 0, pieceColor, userBoard);
            }
            printBoard(tetris);
            while(digitalRead(ebtn) == HIGH){
 80a0916:	e7f6      	b.n	80a0906 <_Z13waitForButtoniPiiS_iS_S_S_+0xde>
                delay(5);
            }
        }
        else if(digitalRead(D4) == HIGH){
 80a0918:	2004      	movs	r0, #4
 80a091a:	f002 f83d 	bl	80a2998 <digitalRead>
 80a091e:	2801      	cmp	r0, #1
 80a0920:	d102      	bne.n	80a0928 <_Z13waitForButtoniPiiS_iS_S_S_+0x100>
            System.dfu();
 80a0922:	2000      	movs	r0, #0
 80a0924:	f001 fbce 	bl	80a20c4 <_ZN11SystemClass3dfuEb>
        }
        delay(10);
 80a0928:	200a      	movs	r0, #10
 80a092a:	f001 fc47 	bl	80a21bc <delay>
void gameDone(){
    delay(20000);
}
void waitForButton(int timeDelay, int * currSpot, int pid, int * orientation, int pieceColor, int * userScore, int * currLvl, int* userBoard){
    int myTemp;
    for(myTemp = 0; myTemp < (timeDelay/10); myTemp++){
 80a092e:	3401      	adds	r4, #1
 80a0930:	e78b      	b.n	80a084a <_Z13waitForButtoniPiiS_iS_S_S_+0x22>
            System.dfu();
        }
        delay(10);
    }
    return;
}
 80a0932:	b005      	add	sp, #20
 80a0934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0938:	2000007c 	.word	0x2000007c

080a093c <loop>:
void loop() {
 80a093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentDelay = 1500 - (currentLvl*200);
 80a0940:	4c3b      	ldr	r4, [pc, #236]	; (80a0a30 <loop+0xf4>)
 80a0942:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 80a0946:	6822      	ldr	r2, [r4, #0]
 80a0948:	4e3a      	ldr	r6, [pc, #232]	; (80a0a34 <loop+0xf8>)
 80a094a:	4353      	muls	r3, r2
        }
        delay(10);
    }
    return;
}
void loop() {
 80a094c:	b087      	sub	sp, #28
    currentDelay = 1500 - (currentLvl*200);
 80a094e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
    currentPiece = random(7);
 80a0952:	2007      	movs	r0, #7
        delay(10);
    }
    return;
}
void loop() {
    currentDelay = 1500 - (currentLvl*200);
 80a0954:	6033      	str	r3, [r6, #0]
    currentPiece = random(7);
 80a0956:	f001 fee3 	bl	80a2720 <_Z6randomi>
    pieceSpot = 8;
 80a095a:	4b37      	ldr	r3, [pc, #220]	; (80a0a38 <loop+0xfc>)
 80a095c:	f04f 0808 	mov.w	r8, #8
    pieceRotation = 0;
 80a0960:	4d36      	ldr	r5, [pc, #216]	; (80a0a3c <loop+0x100>)
    }
    return;
}
void loop() {
    currentDelay = 1500 - (currentLvl*200);
    currentPiece = random(7);
 80a0962:	4f37      	ldr	r7, [pc, #220]	; (80a0a40 <loop+0x104>)
    pieceSpot = 8;
    pieceRotation = 0;
    if(!placePiece(pieceSpot,currentPiece,getPieceColor(currentPiece, currentLvl, 20),tetris)){
 80a0964:	6821      	ldr	r1, [r4, #0]
    return;
}
void loop() {
    currentDelay = 1500 - (currentLvl*200);
    currentPiece = random(7);
    pieceSpot = 8;
 80a0966:	f8c3 8000 	str.w	r8, [r3]
    pieceRotation = 0;
    if(!placePiece(pieceSpot,currentPiece,getPieceColor(currentPiece, currentLvl, 20),tetris)){
 80a096a:	2214      	movs	r2, #20
}
void loop() {
    currentDelay = 1500 - (currentLvl*200);
    currentPiece = random(7);
    pieceSpot = 8;
    pieceRotation = 0;
 80a096c:	2300      	movs	r3, #0
    }
    return;
}
void loop() {
    currentDelay = 1500 - (currentLvl*200);
    currentPiece = random(7);
 80a096e:	4681      	mov	r9, r0
    pieceSpot = 8;
    pieceRotation = 0;
 80a0970:	602b      	str	r3, [r5, #0]
    }
    return;
}
void loop() {
    currentDelay = 1500 - (currentLvl*200);
    currentPiece = random(7);
 80a0972:	6038      	str	r0, [r7, #0]
    pieceSpot = 8;
    pieceRotation = 0;
    if(!placePiece(pieceSpot,currentPiece,getPieceColor(currentPiece, currentLvl, 20),tetris)){
 80a0974:	f7ff fd28 	bl	80a03c8 <_Z13getPieceColoriii>
 80a0978:	4b32      	ldr	r3, [pc, #200]	; (80a0a44 <loop+0x108>)
 80a097a:	4602      	mov	r2, r0
 80a097c:	4649      	mov	r1, r9
 80a097e:	4640      	mov	r0, r8
 80a0980:	f7ff fdd6 	bl	80a0530 <_Z10placePieceiiiPi>
 80a0984:	9505      	str	r5, [sp, #20]
 80a0986:	b908      	cbnz	r0, 80a098c <loop+0x50>
        gameDone();
 80a0988:	f7ff fc40 	bl	80a020c <_Z8gameDonev>
    }
    printBoard(tetris);
 80a098c:	4d2d      	ldr	r5, [pc, #180]	; (80a0a44 <loop+0x108>)
    waitForButton(currentDelay, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris);
    while(!movePiece(&pieceSpot, 0, currentPiece, pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris)){
 80a098e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 80a0a30 <loop+0xf4>
    pieceSpot = 8;
    pieceRotation = 0;
    if(!placePiece(pieceSpot,currentPiece,getPieceColor(currentPiece, currentLvl, 20),tetris)){
        gameDone();
    }
    printBoard(tetris);
 80a0992:	4628      	mov	r0, r5
 80a0994:	f7ff fbd4 	bl	80a0140 <_Z10printBoardPi>
    waitForButton(currentDelay, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris);
 80a0998:	f8d7 8000 	ldr.w	r8, [r7]
 80a099c:	6821      	ldr	r1, [r4, #0]
 80a099e:	2214      	movs	r2, #20
 80a09a0:	4640      	mov	r0, r8
 80a09a2:	f7ff fd11 	bl	80a03c8 <_Z13getPieceColoriii>
 80a09a6:	f8d6 9000 	ldr.w	r9, [r6]
 80a09aa:	4b27      	ldr	r3, [pc, #156]	; (80a0a48 <loop+0x10c>)
 80a09ac:	9503      	str	r5, [sp, #12]
 80a09ae:	e88d 0009 	stmia.w	sp, {r0, r3}
 80a09b2:	9402      	str	r4, [sp, #8]
 80a09b4:	4b21      	ldr	r3, [pc, #132]	; (80a0a3c <loop+0x100>)
 80a09b6:	4642      	mov	r2, r8
 80a09b8:	491f      	ldr	r1, [pc, #124]	; (80a0a38 <loop+0xfc>)
 80a09ba:	4648      	mov	r0, r9
 80a09bc:	f7ff ff34 	bl	80a0828 <_Z13waitForButtoniPiiS_iS_S_S_>
    while(!movePiece(&pieceSpot, 0, currentPiece, pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris)){
 80a09c0:	f8d7 8000 	ldr.w	r8, [r7]
 80a09c4:	9b05      	ldr	r3, [sp, #20]
 80a09c6:	2214      	movs	r2, #20
 80a09c8:	6821      	ldr	r1, [r4, #0]
 80a09ca:	4640      	mov	r0, r8
 80a09cc:	f8d3 b000 	ldr.w	fp, [r3]
 80a09d0:	f7ff fcfa 	bl	80a03c8 <_Z13getPieceColoriii>
 80a09d4:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80a0a48 <loop+0x10c>
 80a09d8:	9503      	str	r5, [sp, #12]
 80a09da:	e88d 0201 	stmia.w	sp, {r0, r9}
 80a09de:	9402      	str	r4, [sp, #8]
 80a09e0:	465b      	mov	r3, fp
 80a09e2:	4642      	mov	r2, r8
 80a09e4:	2100      	movs	r1, #0
 80a09e6:	4814      	ldr	r0, [pc, #80]	; (80a0a38 <loop+0xfc>)
 80a09e8:	f7ff fe68 	bl	80a06bc <_Z9movePiecePiiiiiS_S_S_>
 80a09ec:	b9c0      	cbnz	r0, 80a0a20 <loop+0xe4>
        waitForButton(currentDelay, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris);
 80a09ee:	4b14      	ldr	r3, [pc, #80]	; (80a0a40 <loop+0x104>)
 80a09f0:	f8da 1000 	ldr.w	r1, [sl]
 80a09f4:	f8d3 8000 	ldr.w	r8, [r3]
 80a09f8:	2214      	movs	r2, #20
 80a09fa:	4640      	mov	r0, r8
 80a09fc:	f7ff fce4 	bl	80a03c8 <_Z13getPieceColoriii>
 80a0a00:	f8d6 b000 	ldr.w	fp, [r6]
 80a0a04:	4b0f      	ldr	r3, [pc, #60]	; (80a0a44 <loop+0x108>)
 80a0a06:	e88d 0601 	stmia.w	sp, {r0, r9, sl}
 80a0a0a:	9303      	str	r3, [sp, #12]
 80a0a0c:	4658      	mov	r0, fp
 80a0a0e:	4b0b      	ldr	r3, [pc, #44]	; (80a0a3c <loop+0x100>)
 80a0a10:	4642      	mov	r2, r8
 80a0a12:	4909      	ldr	r1, [pc, #36]	; (80a0a38 <loop+0xfc>)
 80a0a14:	f7ff ff08 	bl	80a0828 <_Z13waitForButtoniPiiS_iS_S_S_>
        printBoard(tetris);
 80a0a18:	480a      	ldr	r0, [pc, #40]	; (80a0a44 <loop+0x108>)
 80a0a1a:	f7ff fb91 	bl	80a0140 <_Z10printBoardPi>
    if(!placePiece(pieceSpot,currentPiece,getPieceColor(currentPiece, currentLvl, 20),tetris)){
        gameDone();
    }
    printBoard(tetris);
    waitForButton(currentDelay, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris);
    while(!movePiece(&pieceSpot, 0, currentPiece, pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris)){
 80a0a1e:	e7cf      	b.n	80a09c0 <loop+0x84>
        waitForButton(currentDelay, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris);
        printBoard(tetris);
    }
    delay(1000);
 80a0a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80a0a24:	b007      	add	sp, #28
 80a0a26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    waitForButton(currentDelay, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris);
    while(!movePiece(&pieceSpot, 0, currentPiece, pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris)){
        waitForButton(currentDelay, &pieceSpot, currentPiece, &pieceRotation, getPieceColor(currentPiece, currentLvl, 20), &score, &currentLvl, tetris);
        printBoard(tetris);
    }
    delay(1000);
 80a0a2a:	f001 bbc7 	b.w	80a21bc <delay>
 80a0a2e:	bf00      	nop
 80a0a30:	200004a4 	.word	0x200004a4
 80a0a34:	20000070 	.word	0x20000070
 80a0a38:	20000074 	.word	0x20000074
 80a0a3c:	20000490 	.word	0x20000490
 80a0a40:	20000078 	.word	0x20000078
 80a0a44:	2000007c 	.word	0x2000007c
 80a0a48:	200004a0 	.word	0x200004a0

080a0a4c <_GLOBAL__sub_I_strip>:
void shiftRowsDown(int emptyRow, int numRows, int numColumns, int* userBoard){        //Fucntion to shift all rows above emptyRow down 1
    int i;
    for(i = emptyRow*numColumns+numColumns-1; i >= numColumns; i--){            
        userBoard[i] = userBoard[i-16];
    }
 80a0a4c:	b538      	push	{r3, r4, r5, lr}

#define PIXEL_PIN A2            //Define Hardware pin used for data

#define PIXEL_TYPE WS2812B       //Define LED Type

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);    //Initialize neopixel function
 80a0a4e:	4c11      	ldr	r4, [pc, #68]	; (80a0a94 <_GLOBAL__sub_I_strip+0x48>)
 80a0a50:	4d11      	ldr	r5, [pc, #68]	; (80a0a98 <_GLOBAL__sub_I_strip+0x4c>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0a52:	f001 f97f 	bl	80a1d54 <HAL_Pin_Map>
 80a0a56:	2302      	movs	r3, #2
 80a0a58:	220c      	movs	r2, #12
 80a0a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0a5e:	4620      	mov	r0, r4
 80a0a60:	f000 f873 	bl	80a0b4a <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0a64:	462a      	mov	r2, r5
 80a0a66:	490d      	ldr	r1, [pc, #52]	; (80a0a9c <_GLOBAL__sub_I_strip+0x50>)
 80a0a68:	4620      	mov	r0, r4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0a6a:	4c0d      	ldr	r4, [pc, #52]	; (80a0aa0 <_GLOBAL__sub_I_strip+0x54>)
 80a0a6c:	f002 f800 	bl	80a2a70 <__aeabi_atexit>
 80a0a70:	2300      	movs	r3, #0
 80a0a72:	6023      	str	r3, [r4, #0]
 80a0a74:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0a76:	71a3      	strb	r3, [r4, #6]
 80a0a78:	8123      	strh	r3, [r4, #8]
 80a0a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0a7e:	2003      	movs	r0, #3
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0a80:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0a82:	f001 fa81 	bl	80a1f88 <set_system_mode>

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(MANUAL);         //Tells device to use WiFi by default
 80a0a86:	462a      	mov	r2, r5
 80a0a88:	4620      	mov	r0, r4
void shiftRowsDown(int emptyRow, int numRows, int numColumns, int* userBoard){        //Fucntion to shift all rows above emptyRow down 1
    int i;
    for(i = emptyRow*numColumns+numColumns-1; i >= numColumns; i--){            
        userBoard[i] = userBoard[i-16];
    }
 80a0a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(MANUAL);         //Tells device to use WiFi by default
 80a0a8e:	4905      	ldr	r1, [pc, #20]	; (80a0aa4 <_GLOBAL__sub_I_strip+0x58>)
 80a0a90:	f001 bfee 	b.w	80a2a70 <__aeabi_atexit>
 80a0a94:	2000047c 	.word	0x2000047c
 80a0a98:	20000068 	.word	0x20000068
 80a0a9c:	080a0aad 	.word	0x080a0aad
 80a0aa0:	20000494 	.word	0x20000494
 80a0aa4:	080a00af 	.word	0x080a00af

080a0aa8 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0aa8:	f001 b994 	b.w	80a1dd4 <HAL_Timer_Get_Micro_Seconds>

080a0aac <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0aac:	b510      	push	{r4, lr}
 80a0aae:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0ab0:	68c0      	ldr	r0, [r0, #12]
 80a0ab2:	b108      	cbz	r0, 80a0ab8 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0ab4:	f001 faec 	bl	80a2090 <free>
  if (begun) pinMode(pin, INPUT);
 80a0ab8:	7823      	ldrb	r3, [r4, #0]
 80a0aba:	b11b      	cbz	r3, 80a0ac4 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0abc:	2100      	movs	r1, #0
 80a0abe:	79e0      	ldrb	r0, [r4, #7]
 80a0ac0:	f001 ff40 	bl	80a2944 <pinMode>
}
 80a0ac4:	4620      	mov	r0, r4
 80a0ac6:	bd10      	pop	{r4, pc}

080a0ac8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0ac8:	b538      	push	{r3, r4, r5, lr}
 80a0aca:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0acc:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0ace:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0ad0:	b108      	cbz	r0, 80a0ad6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0ad2:	f001 fadd 	bl	80a2090 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0ad6:	79a3      	ldrb	r3, [r4, #6]
 80a0ad8:	2b06      	cmp	r3, #6
 80a0ada:	bf0c      	ite	eq
 80a0adc:	2004      	moveq	r0, #4
 80a0ade:	2003      	movne	r0, #3
 80a0ae0:	4368      	muls	r0, r5
 80a0ae2:	b280      	uxth	r0, r0
 80a0ae4:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0ae6:	f001 facb 	bl	80a2080 <malloc>
 80a0aea:	60e0      	str	r0, [r4, #12]
 80a0aec:	b128      	cbz	r0, 80a0afa <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0aee:	88a2      	ldrh	r2, [r4, #4]
 80a0af0:	2100      	movs	r1, #0
 80a0af2:	f002 fd32 	bl	80a355a <memset>
    numLEDs = n;
 80a0af6:	8065      	strh	r5, [r4, #2]
 80a0af8:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0afa:	80a0      	strh	r0, [r4, #4]
 80a0afc:	8060      	strh	r0, [r4, #2]
 80a0afe:	bd38      	pop	{r3, r4, r5, pc}

080a0b00 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0b00:	b510      	push	{r4, lr}
 80a0b02:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0b04:	2101      	movs	r1, #1
 80a0b06:	79c0      	ldrb	r0, [r0, #7]
 80a0b08:	f001 ff1c 	bl	80a2944 <pinMode>
  digitalWrite(pin, LOW);
 80a0b0c:	2100      	movs	r1, #0
 80a0b0e:	79e0      	ldrb	r0, [r4, #7]
 80a0b10:	f001 ff29 	bl	80a2966 <digitalWrite>
  begun = true;
 80a0b14:	2301      	movs	r3, #1
 80a0b16:	7023      	strb	r3, [r4, #0]
 80a0b18:	bd10      	pop	{r4, pc}

080a0b1a <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0b1a:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0b1c:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0b1e:	4605      	mov	r5, r0
 80a0b20:	460c      	mov	r4, r1
    if (begun) {
 80a0b22:	b11b      	cbz	r3, 80a0b2c <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0b24:	2100      	movs	r1, #0
 80a0b26:	79c0      	ldrb	r0, [r0, #7]
 80a0b28:	f001 ff0c 	bl	80a2944 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0b2c:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0b2e:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0b30:	b153      	cbz	r3, 80a0b48 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0b32:	b2a4      	uxth	r4, r4
 80a0b34:	4620      	mov	r0, r4
 80a0b36:	2101      	movs	r1, #1
 80a0b38:	f001 ff04 	bl	80a2944 <pinMode>
        digitalWrite(p, LOW);
 80a0b3c:	4620      	mov	r0, r4
    }
}
 80a0b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a0b42:	2100      	movs	r1, #0
 80a0b44:	f001 bf0f 	b.w	80a2966 <digitalWrite>
 80a0b48:	bd38      	pop	{r3, r4, r5, pc}

080a0b4a <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0b4a:	b570      	push	{r4, r5, r6, lr}
 80a0b4c:	4604      	mov	r4, r0
 80a0b4e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0b50:	2500      	movs	r5, #0
 80a0b52:	7183      	strb	r3, [r0, #6]
 80a0b54:	7005      	strb	r5, [r0, #0]
 80a0b56:	7205      	strb	r5, [r0, #8]
 80a0b58:	60c5      	str	r5, [r0, #12]
 80a0b5a:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0b5c:	f7ff ffb4 	bl	80a0ac8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0b60:	4620      	mov	r0, r4
 80a0b62:	4631      	mov	r1, r6
 80a0b64:	f7ff ffd9 	bl	80a0b1a <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0b68:	4620      	mov	r0, r4
 80a0b6a:	bd70      	pop	{r4, r5, r6, pc}

080a0b6c <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0b6c:	68c3      	ldr	r3, [r0, #12]
 80a0b6e:	2b00      	cmp	r3, #0
 80a0b70:	f000 858e 	beq.w	80a1690 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0b78:	4604      	mov	r4, r0
 80a0b7a:	7983      	ldrb	r3, [r0, #6]
 80a0b7c:	b086      	sub	sp, #24
 80a0b7e:	3b02      	subs	r3, #2
 80a0b80:	b2db      	uxtb	r3, r3
 80a0b82:	2b04      	cmp	r3, #4
 80a0b84:	bf96      	itet	ls
 80a0b86:	4a29      	ldrls	r2, [pc, #164]	; (80a0c2c <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0b88:	2532      	movhi	r5, #50	; 0x32
 80a0b8a:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0b8e:	f7ff ff8b 	bl	80a0aa8 <micros>
 80a0b92:	6923      	ldr	r3, [r4, #16]
 80a0b94:	1ac0      	subs	r0, r0, r3
 80a0b96:	42a8      	cmp	r0, r5
 80a0b98:	d3f9      	bcc.n	80a0b8e <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0b9a:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0b9c:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0b9e:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0ba0:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0ba2:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a0ba6:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0baa:	f000 8272 	beq.w	80a1092 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0bae:	2907      	cmp	r1, #7
 80a0bb0:	f000 826f 	beq.w	80a1092 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0bb4:	2906      	cmp	r1, #6
 80a0bb6:	f000 8432 	beq.w	80a141e <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0bba:	2905      	cmp	r1, #5
 80a0bbc:	f000 83ab 	beq.w	80a1316 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0bc0:	2908      	cmp	r1, #8
 80a0bc2:	f000 83a8 	beq.w	80a1316 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0bc6:	2900      	cmp	r1, #0
 80a0bc8:	f040 8563 	bne.w	80a1692 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0bcc:	4a18      	ldr	r2, [pc, #96]	; (80a0c30 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0bce:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bd2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0bd6:	b29b      	uxth	r3, r3
 80a0bd8:	2b00      	cmp	r3, #0
 80a0bda:	f000 8395 	beq.w	80a1308 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0bde:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0be0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0be4:	f10e 0503 	add.w	r5, lr, #3
 80a0be8:	3b03      	subs	r3, #3
 80a0bea:	b29b      	uxth	r3, r3
 80a0bec:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0bf0:	f89e 3000 	ldrb.w	r3, [lr]
 80a0bf4:	b2db      	uxtb	r3, r3
 80a0bf6:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0bfa:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0bfe:	b2db      	uxtb	r3, r3
 80a0c00:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0c04:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0c08:	b2db      	uxtb	r3, r3
 80a0c0a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0c0e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0c12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0c16:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0c1a:	021b      	lsls	r3, r3, #8
 80a0c1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0c20:	4303      	orrs	r3, r0
 80a0c22:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0c24:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0c28:	e11b      	b.n	80a0e62 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0c2a:	bf00      	nop
 80a0c2c:	080a3654 	.word	0x080a3654
 80a0c30:	200004a8 	.word	0x200004a8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c34:	4600      	mov	r0, r0
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0d3c:	79e3      	ldrb	r3, [r4, #7]
 80a0d3e:	6810      	ldr	r0, [r2, #0]
 80a0d40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d44:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d48:	88bf      	ldrh	r7, [r7, #4]
 80a0d4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d4e:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d50:	4600      	mov	r0, r0
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0e4a:	9b04      	ldr	r3, [sp, #16]
 80a0e4c:	085b      	lsrs	r3, r3, #1
 80a0e4e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0e50:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0e54:	3301      	adds	r3, #1
 80a0e56:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0e58:	2b17      	cmp	r3, #23
 80a0e5a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0e5e:	f200 82db 	bhi.w	80a1418 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0e62:	79e3      	ldrb	r3, [r4, #7]
 80a0e64:	6810      	ldr	r0, [r2, #0]
 80a0e66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e6a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e6e:	88bf      	ldrh	r7, [r7, #4]
 80a0e70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e74:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0e76:	9803      	ldr	r0, [sp, #12]
 80a0e78:	9b04      	ldr	r3, [sp, #16]
 80a0e7a:	4218      	tst	r0, r3
 80a0e7c:	f47f aeda 	bne.w	80a0c34 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0e80:	4600      	mov	r0, r0
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0ed2:	79e3      	ldrb	r3, [r4, #7]
 80a0ed4:	6810      	ldr	r0, [r2, #0]
 80a0ed6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0eda:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ede:	88bf      	ldrh	r7, [r7, #4]
 80a0ee0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ee4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ee6:	4600      	mov	r0, r0
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	e6db      	b.n	80a0e4a <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1092:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1096:	4a17      	ldr	r2, [pc, #92]	; (80a10f4 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a1098:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a109a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a109e:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10a0:	2b00      	cmp	r3, #0
 80a10a2:	f000 8131 	beq.w	80a1308 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a10a6:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a10a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a10ac:	f10e 0103 	add.w	r1, lr, #3
 80a10b0:	3b03      	subs	r3, #3
 80a10b2:	b29b      	uxth	r3, r3
 80a10b4:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a10b8:	f89e 3000 	ldrb.w	r3, [lr]
 80a10bc:	b2db      	uxtb	r3, r3
 80a10be:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a10c2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a10c6:	b2db      	uxtb	r3, r3
 80a10c8:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a10cc:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a10d0:	b2db      	uxtb	r3, r3
 80a10d2:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a10d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a10da:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a10de:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a10e2:	0200      	lsls	r0, r0, #8
 80a10e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a10e8:	433b      	orrs	r3, r7
 80a10ea:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a10ec:	f88d 6005 	strb.w	r6, [sp, #5]
 80a10f0:	e080      	b.n	80a11f4 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a10f2:	bf00      	nop
 80a10f4:	200004a8 	.word	0x200004a8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a10f8:	4600      	mov	r0, r0
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a1192:	79e3      	ldrb	r3, [r4, #7]
 80a1194:	6810      	ldr	r0, [r2, #0]
 80a1196:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a119a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a119e:	88bf      	ldrh	r7, [r7, #4]
 80a11a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a11a4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11a6:	4600      	mov	r0, r0
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a11dc:	9b04      	ldr	r3, [sp, #16]
 80a11de:	085b      	lsrs	r3, r3, #1
 80a11e0:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a11e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a11e6:	3301      	adds	r3, #1
 80a11e8:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a11ea:	2b17      	cmp	r3, #23
 80a11ec:	f88d 3005 	strb.w	r3, [sp, #5]
 80a11f0:	f200 8083 	bhi.w	80a12fa <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a11f4:	79e3      	ldrb	r3, [r4, #7]
 80a11f6:	6810      	ldr	r0, [r2, #0]
 80a11f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a11fc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1200:	88bf      	ldrh	r7, [r7, #4]
 80a1202:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1206:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1208:	9803      	ldr	r0, [sp, #12]
 80a120a:	9b04      	ldr	r3, [sp, #16]
 80a120c:	4218      	tst	r0, r3
 80a120e:	f47f af73 	bne.w	80a10f8 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1212:	4600      	mov	r0, r0
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a123a:	79e3      	ldrb	r3, [r4, #7]
 80a123c:	6810      	ldr	r0, [r2, #0]
 80a123e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1242:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1246:	88bf      	ldrh	r7, [r7, #4]
 80a1248:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a124c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a124e:	4600      	mov	r0, r0
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	e770      	b.n	80a11dc <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a12fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a12fe:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1300:	b29b      	uxth	r3, r3
 80a1302:	2b00      	cmp	r3, #0
 80a1304:	f47f aecf 	bne.w	80a10a6 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a1308:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a130a:	f7ff fbcd 	bl	80a0aa8 <micros>
 80a130e:	6120      	str	r0, [r4, #16]
}
 80a1310:	b006      	add	sp, #24
 80a1312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1316:	4b5e      	ldr	r3, [pc, #376]	; (80a1490 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a1318:	4a5e      	ldr	r2, [pc, #376]	; (80a1494 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a131a:	4618      	mov	r0, r3
 80a131c:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a131e:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1322:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1324:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1328:	b292      	uxth	r2, r2
 80a132a:	2a00      	cmp	r2, #0
 80a132c:	d0ec      	beq.n	80a1308 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a132e:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1332:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1336:	f10e 0503 	add.w	r5, lr, #3
 80a133a:	3a03      	subs	r2, #3
 80a133c:	b292      	uxth	r2, r2
 80a133e:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1342:	f89e 2000 	ldrb.w	r2, [lr]
 80a1346:	b2d2      	uxtb	r2, r2
 80a1348:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a134c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1350:	b2d2      	uxtb	r2, r2
 80a1352:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1356:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a135a:	b2d2      	uxtb	r2, r2
 80a135c:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1360:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a1364:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a1368:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a136c:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1370:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1374:	ea42 020c 	orr.w	r2, r2, ip
 80a1378:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a137a:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a137e:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1380:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1382:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1386:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a138a:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a138e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1392:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1394:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1398:	9e03      	ldr	r6, [sp, #12]
 80a139a:	9a04      	ldr	r2, [sp, #16]
 80a139c:	4216      	tst	r6, r2
 80a139e:	d023      	beq.n	80a13e8 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a13a0:	685a      	ldr	r2, [r3, #4]
 80a13a2:	9e05      	ldr	r6, [sp, #20]
 80a13a4:	1b92      	subs	r2, r2, r6
 80a13a6:	2a4f      	cmp	r2, #79	; 0x4f
 80a13a8:	d9fa      	bls.n	80a13a0 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a13aa:	79e2      	ldrb	r2, [r4, #7]
 80a13ac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a13b0:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a13b4:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a13b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a13bc:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a13c0:	6842      	ldr	r2, [r0, #4]
 80a13c2:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a13c4:	685a      	ldr	r2, [r3, #4]
 80a13c6:	9e05      	ldr	r6, [sp, #20]
 80a13c8:	1b92      	subs	r2, r2, r6
 80a13ca:	2a07      	cmp	r2, #7
 80a13cc:	d9fa      	bls.n	80a13c4 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a13ce:	9a04      	ldr	r2, [sp, #16]
 80a13d0:	0852      	lsrs	r2, r2, #1
 80a13d2:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a13d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a13d8:	3201      	adds	r2, #1
 80a13da:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a13dc:	2a17      	cmp	r2, #23
 80a13de:	f88d 2005 	strb.w	r2, [sp, #5]
 80a13e2:	d9cc      	bls.n	80a137e <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a13e4:	46ae      	mov	lr, r5
 80a13e6:	e79d      	b.n	80a1324 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a13e8:	685a      	ldr	r2, [r3, #4]
 80a13ea:	9e05      	ldr	r6, [sp, #20]
 80a13ec:	1b92      	subs	r2, r2, r6
 80a13ee:	2a18      	cmp	r2, #24
 80a13f0:	d9fa      	bls.n	80a13e8 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a13f2:	79e2      	ldrb	r2, [r4, #7]
 80a13f4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a13f8:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a13fc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1400:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1404:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1408:	6842      	ldr	r2, [r0, #4]
 80a140a:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a140c:	685a      	ldr	r2, [r3, #4]
 80a140e:	9e05      	ldr	r6, [sp, #20]
 80a1410:	1b92      	subs	r2, r2, r6
 80a1412:	2a45      	cmp	r2, #69	; 0x45
 80a1414:	d9fa      	bls.n	80a140c <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a1416:	e7da      	b.n	80a13ce <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a1418:	46ae      	mov	lr, r5
 80a141a:	f7ff bbda 	b.w	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a141e:	4a1d      	ldr	r2, [pc, #116]	; (80a1494 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a1420:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a1424:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1426:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a142a:	b29b      	uxth	r3, r3
 80a142c:	2b00      	cmp	r3, #0
 80a142e:	f43f af6b 	beq.w	80a1308 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1432:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1434:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1438:	f10e 0104 	add.w	r1, lr, #4
 80a143c:	3b04      	subs	r3, #4
 80a143e:	b29b      	uxth	r3, r3
 80a1440:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1444:	f89e 3000 	ldrb.w	r3, [lr]
 80a1448:	b2db      	uxtb	r3, r3
 80a144a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a144e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1452:	b2db      	uxtb	r3, r3
 80a1454:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1458:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a145c:	b2db      	uxtb	r3, r3
 80a145e:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1462:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a1466:	b2db      	uxtb	r3, r3
 80a1468:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a146c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1470:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1474:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1478:	043f      	lsls	r7, r7, #16
 80a147a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a147e:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1482:	4303      	orrs	r3, r0
 80a1484:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1488:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a148a:	f88d 6005 	strb.w	r6, [sp, #5]
 80a148e:	e07e      	b.n	80a158e <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1490:	e0001000 	.word	0xe0001000
 80a1494:	200004a8 	.word	0x200004a8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1498:	4600      	mov	r0, r0
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a1506:	79e3      	ldrb	r3, [r4, #7]
 80a1508:	6810      	ldr	r0, [r2, #0]
 80a150a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a150e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1512:	88bf      	ldrh	r7, [r7, #4]
 80a1514:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1518:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a151a:	4600      	mov	r0, r0
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1578:	9b04      	ldr	r3, [sp, #16]
 80a157a:	085b      	lsrs	r3, r3, #1
 80a157c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a157e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1582:	3301      	adds	r3, #1
 80a1584:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a1586:	2b1f      	cmp	r3, #31
 80a1588:	f88d 3005 	strb.w	r3, [sp, #5]
 80a158c:	d87e      	bhi.n	80a168c <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a158e:	79e3      	ldrb	r3, [r4, #7]
 80a1590:	6810      	ldr	r0, [r2, #0]
 80a1592:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1596:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a159a:	88bf      	ldrh	r7, [r7, #4]
 80a159c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15a0:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a15a2:	9803      	ldr	r0, [sp, #12]
 80a15a4:	9b04      	ldr	r3, [sp, #16]
 80a15a6:	4218      	tst	r0, r3
 80a15a8:	f47f af76 	bne.w	80a1498 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a15ac:	4600      	mov	r0, r0
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a15d4:	79e3      	ldrb	r3, [r4, #7]
 80a15d6:	6810      	ldr	r0, [r2, #0]
 80a15d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15dc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a15e0:	88bf      	ldrh	r7, [r7, #4]
 80a15e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15e6:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a15e8:	4600      	mov	r0, r0
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	e775      	b.n	80a1578 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a168c:	468e      	mov	lr, r1
 80a168e:	e6ca      	b.n	80a1426 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1690:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1692:	2903      	cmp	r1, #3
 80a1694:	f000 812e 	beq.w	80a18f4 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1698:	4a1e      	ldr	r2, [pc, #120]	; (80a1714 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a169a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a169e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a16a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a16a4:	b29b      	uxth	r3, r3
 80a16a6:	2b00      	cmp	r3, #0
 80a16a8:	f43f ae2e 	beq.w	80a1308 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a16ac:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a16ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a16b2:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a16b4:	3b03      	subs	r3, #3
 80a16b6:	b29b      	uxth	r3, r3
 80a16b8:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a16bc:	f89e 3000 	ldrb.w	r3, [lr]
 80a16c0:	f10e 0103 	add.w	r1, lr, #3
 80a16c4:	b2db      	uxtb	r3, r3
 80a16c6:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a16ca:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a16ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a16d2:	b2db      	uxtb	r3, r3
 80a16d4:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a16d8:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a16dc:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a16e0:	b2db      	uxtb	r3, r3
 80a16e2:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a16e6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a16ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a16ee:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a16f2:	021b      	lsls	r3, r3, #8
 80a16f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a16f8:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a16fc:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1700:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1704:	433b      	orrs	r3, r7
 80a1706:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1708:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a170c:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a1710:	e07d      	b.n	80a180e <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a1712:	bf00      	nop
 80a1714:	200004a8 	.word	0x200004a8
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a1718:	9b04      	ldr	r3, [sp, #16]
 80a171a:	085b      	lsrs	r3, r3, #1
 80a171c:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a171e:	4600      	mov	r0, r0
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a17a4:	79e0      	ldrb	r0, [r4, #7]
 80a17a6:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a17a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a17ac:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a17b0:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a17b4:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a17b8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a17bc:	3301      	adds	r3, #1
 80a17be:	b2db      	uxtb	r3, r3
 80a17c0:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a17c4:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a17c8:	4600      	mov	r0, r0
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
          if(j==24) break;
 80a17f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a17f6:	2b18      	cmp	r3, #24
 80a17f8:	d07a      	beq.n	80a18f0 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a17fa:	79e3      	ldrb	r3, [r4, #7]
 80a17fc:	6810      	ldr	r0, [r2, #0]
 80a17fe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1802:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1806:	88bf      	ldrh	r7, [r7, #4]
 80a1808:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a180c:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a180e:	9803      	ldr	r0, [sp, #12]
 80a1810:	9b04      	ldr	r3, [sp, #16]
 80a1812:	4218      	tst	r0, r3
 80a1814:	d180      	bne.n	80a1718 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1816:	4600      	mov	r0, r0
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1838:	79e3      	ldrb	r3, [r4, #7]
 80a183a:	6810      	ldr	r0, [r2, #0]
 80a183c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1840:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1844:	88bf      	ldrh	r7, [r7, #4]
 80a1846:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a184a:	831f      	strh	r7, [r3, #24]
          j++;
 80a184c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1850:	3301      	adds	r3, #1
 80a1852:	b2db      	uxtb	r3, r3
 80a1854:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1858:	9b04      	ldr	r3, [sp, #16]
 80a185a:	085b      	lsrs	r3, r3, #1
 80a185c:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a185e:	4600      	mov	r0, r0
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
          if(j==24) break;
 80a18e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a18ec:	2b18      	cmp	r3, #24
 80a18ee:	d184      	bne.n	80a17fa <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a18f0:	468e      	mov	lr, r1
 80a18f2:	e6d5      	b.n	80a16a0 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a18f4:	4a17      	ldr	r2, [pc, #92]	; (80a1954 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a18f6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a18fa:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a18fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1900:	b29b      	uxth	r3, r3
 80a1902:	2b00      	cmp	r3, #0
 80a1904:	f43f ad00 	beq.w	80a1308 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1908:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a190a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a190e:	f10e 0103 	add.w	r1, lr, #3
 80a1912:	3b03      	subs	r3, #3
 80a1914:	b29b      	uxth	r3, r3
 80a1916:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a191a:	f89e 3000 	ldrb.w	r3, [lr]
 80a191e:	b2db      	uxtb	r3, r3
 80a1920:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1924:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1928:	b2db      	uxtb	r3, r3
 80a192a:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a192e:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1932:	b2db      	uxtb	r3, r3
 80a1934:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1938:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a193c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1940:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1944:	021b      	lsls	r3, r3, #8
 80a1946:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a194a:	4303      	orrs	r3, r0
 80a194c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a194e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1952:	e0e0      	b.n	80a1b16 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1954:	200004a8 	.word	0x200004a8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1958:	4600      	mov	r0, r0
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1a7a:	79e3      	ldrb	r3, [r4, #7]
 80a1a7c:	6810      	ldr	r0, [r2, #0]
 80a1a7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1a82:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1a86:	88bf      	ldrh	r7, [r7, #4]
 80a1a88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1a8c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1a8e:	4600      	mov	r0, r0
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1afe:	9b04      	ldr	r3, [sp, #16]
 80a1b00:	085b      	lsrs	r3, r3, #1
 80a1b02:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1b04:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1b08:	3301      	adds	r3, #1
 80a1b0a:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1b0c:	2b17      	cmp	r3, #23
 80a1b0e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1b12:	f200 80e3 	bhi.w	80a1cdc <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a1b16:	79e3      	ldrb	r3, [r4, #7]
 80a1b18:	6810      	ldr	r0, [r2, #0]
 80a1b1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b1e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b22:	88bf      	ldrh	r7, [r7, #4]
 80a1b24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b28:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1b2a:	9803      	ldr	r0, [sp, #12]
 80a1b2c:	9b04      	ldr	r3, [sp, #16]
 80a1b2e:	4218      	tst	r0, r3
 80a1b30:	f47f af12 	bne.w	80a1958 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b34:	4600      	mov	r0, r0
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
 80a1b80:	bf00      	nop
 80a1b82:	bf00      	nop
 80a1b84:	bf00      	nop
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	bf00      	nop
 80a1baa:	bf00      	nop
 80a1bac:	bf00      	nop
 80a1bae:	bf00      	nop
 80a1bb0:	bf00      	nop
 80a1bb2:	bf00      	nop
 80a1bb4:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a1bb6:	79e3      	ldrb	r3, [r4, #7]
 80a1bb8:	6810      	ldr	r0, [r2, #0]
 80a1bba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1bbe:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1bc2:	88bf      	ldrh	r7, [r7, #4]
 80a1bc4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1bc8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1bca:	4600      	mov	r0, r0
 80a1bcc:	bf00      	nop
 80a1bce:	bf00      	nop
 80a1bd0:	bf00      	nop
 80a1bd2:	bf00      	nop
 80a1bd4:	bf00      	nop
 80a1bd6:	bf00      	nop
 80a1bd8:	bf00      	nop
 80a1bda:	bf00      	nop
 80a1bdc:	bf00      	nop
 80a1bde:	bf00      	nop
 80a1be0:	bf00      	nop
 80a1be2:	bf00      	nop
 80a1be4:	bf00      	nop
 80a1be6:	bf00      	nop
 80a1be8:	bf00      	nop
 80a1bea:	bf00      	nop
 80a1bec:	bf00      	nop
 80a1bee:	bf00      	nop
 80a1bf0:	bf00      	nop
 80a1bf2:	bf00      	nop
 80a1bf4:	bf00      	nop
 80a1bf6:	bf00      	nop
 80a1bf8:	bf00      	nop
 80a1bfa:	bf00      	nop
 80a1bfc:	bf00      	nop
 80a1bfe:	bf00      	nop
 80a1c00:	bf00      	nop
 80a1c02:	bf00      	nop
 80a1c04:	bf00      	nop
 80a1c06:	bf00      	nop
 80a1c08:	bf00      	nop
 80a1c0a:	bf00      	nop
 80a1c0c:	bf00      	nop
 80a1c0e:	bf00      	nop
 80a1c10:	bf00      	nop
 80a1c12:	bf00      	nop
 80a1c14:	bf00      	nop
 80a1c16:	bf00      	nop
 80a1c18:	bf00      	nop
 80a1c1a:	bf00      	nop
 80a1c1c:	bf00      	nop
 80a1c1e:	bf00      	nop
 80a1c20:	bf00      	nop
 80a1c22:	bf00      	nop
 80a1c24:	bf00      	nop
 80a1c26:	bf00      	nop
 80a1c28:	bf00      	nop
 80a1c2a:	bf00      	nop
 80a1c2c:	bf00      	nop
 80a1c2e:	bf00      	nop
 80a1c30:	bf00      	nop
 80a1c32:	bf00      	nop
 80a1c34:	bf00      	nop
 80a1c36:	bf00      	nop
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
 80a1c4a:	bf00      	nop
 80a1c4c:	bf00      	nop
 80a1c4e:	bf00      	nop
 80a1c50:	bf00      	nop
 80a1c52:	bf00      	nop
 80a1c54:	bf00      	nop
 80a1c56:	bf00      	nop
 80a1c58:	bf00      	nop
 80a1c5a:	bf00      	nop
 80a1c5c:	bf00      	nop
 80a1c5e:	bf00      	nop
 80a1c60:	bf00      	nop
 80a1c62:	bf00      	nop
 80a1c64:	bf00      	nop
 80a1c66:	bf00      	nop
 80a1c68:	bf00      	nop
 80a1c6a:	bf00      	nop
 80a1c6c:	bf00      	nop
 80a1c6e:	bf00      	nop
 80a1c70:	bf00      	nop
 80a1c72:	bf00      	nop
 80a1c74:	bf00      	nop
 80a1c76:	bf00      	nop
 80a1c78:	bf00      	nop
 80a1c7a:	bf00      	nop
 80a1c7c:	bf00      	nop
 80a1c7e:	bf00      	nop
 80a1c80:	bf00      	nop
 80a1c82:	bf00      	nop
 80a1c84:	bf00      	nop
 80a1c86:	bf00      	nop
 80a1c88:	bf00      	nop
 80a1c8a:	bf00      	nop
 80a1c8c:	bf00      	nop
 80a1c8e:	bf00      	nop
 80a1c90:	bf00      	nop
 80a1c92:	bf00      	nop
 80a1c94:	bf00      	nop
 80a1c96:	bf00      	nop
 80a1c98:	bf00      	nop
 80a1c9a:	bf00      	nop
 80a1c9c:	bf00      	nop
 80a1c9e:	bf00      	nop
 80a1ca0:	bf00      	nop
 80a1ca2:	bf00      	nop
 80a1ca4:	bf00      	nop
 80a1ca6:	bf00      	nop
 80a1ca8:	bf00      	nop
 80a1caa:	bf00      	nop
 80a1cac:	bf00      	nop
 80a1cae:	bf00      	nop
 80a1cb0:	bf00      	nop
 80a1cb2:	bf00      	nop
 80a1cb4:	bf00      	nop
 80a1cb6:	bf00      	nop
 80a1cb8:	bf00      	nop
 80a1cba:	bf00      	nop
 80a1cbc:	bf00      	nop
 80a1cbe:	bf00      	nop
 80a1cc0:	bf00      	nop
 80a1cc2:	bf00      	nop
 80a1cc4:	bf00      	nop
 80a1cc6:	bf00      	nop
 80a1cc8:	bf00      	nop
 80a1cca:	bf00      	nop
 80a1ccc:	bf00      	nop
 80a1cce:	bf00      	nop
 80a1cd0:	bf00      	nop
 80a1cd2:	bf00      	nop
 80a1cd4:	bf00      	nop
 80a1cd6:	bf00      	nop
 80a1cd8:	bf00      	nop
 80a1cda:	e710      	b.n	80a1afe <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1cdc:	468e      	mov	lr, r1
 80a1cde:	e60d      	b.n	80a18fc <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1ce0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a1ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1ce2:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a1ce4:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
 80a1ce8:	428c      	cmp	r4, r1
 80a1cea:	d927      	bls.n	80a1d3c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
 80a1cec:	7a04      	ldrb	r4, [r0, #8]
 80a1cee:	b144      	cbz	r4, 80a1d02 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
 80a1cf0:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a1cf2:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a1cf4:	436c      	muls	r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1cf6:	f3c2 2207 	ubfx	r2, r2, #8, #8
      g = (g * brightness) >> 8;
 80a1cfa:	f3c3 2307 	ubfx	r3, r3, #8, #8
      b = (b * brightness) >> 8;
 80a1cfe:	f3c4 2507 	ubfx	r5, r4, #8, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
 80a1d02:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
 80a1d04:	68c6      	ldr	r6, [r0, #12]
 80a1d06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a1d0a:	2f08      	cmp	r7, #8
 80a1d0c:	eb06 0401 	add.w	r4, r6, r1
 80a1d10:	d811      	bhi.n	80a1d36 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
 80a1d12:	2001      	movs	r0, #1
 80a1d14:	40b8      	lsls	r0, r7
 80a1d16:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
 80a1d1a:	d108      	bne.n	80a1d2e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a1d1c:	06c0      	lsls	r0, r0, #27
 80a1d1e:	d50a      	bpl.n	80a1d36 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1d20:	2aff      	cmp	r2, #255	; 0xff
 80a1d22:	bf08      	it	eq
 80a1d24:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
 80a1d26:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a1d28:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a1d2a:	70a3      	strb	r3, [r4, #2]
 80a1d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1d2e:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a1d30:	7062      	strb	r2, [r4, #1]
          *p = b;
 80a1d32:	70a5      	strb	r5, [r4, #2]
 80a1d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1d36:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a1d38:	7063      	strb	r3, [r4, #1]
          *p = b;
 80a1d3a:	70a5      	strb	r5, [r4, #2]
 80a1d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a1d40 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1d40:	b508      	push	{r3, lr}
 80a1d42:	f000 f807 	bl	80a1d54 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1d46:	f000 f805 	bl	80a1d54 <HAL_Pin_Map>
 80a1d4a:	4b01      	ldr	r3, [pc, #4]	; (80a1d50 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1d4c:	6018      	str	r0, [r3, #0]
 80a1d4e:	bd08      	pop	{r3, pc}
 80a1d50:	200004a8 	.word	0x200004a8

080a1d54 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1d54:	b508      	push	{r3, lr}
 80a1d56:	4b02      	ldr	r3, [pc, #8]	; (80a1d60 <HAL_Pin_Map+0xc>)
 80a1d58:	681b      	ldr	r3, [r3, #0]
 80a1d5a:	681b      	ldr	r3, [r3, #0]
 80a1d5c:	9301      	str	r3, [sp, #4]
 80a1d5e:	bd08      	pop	{r3, pc}
 80a1d60:	080601b0 	.word	0x080601b0

080a1d64 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1d64:	b508      	push	{r3, lr}
 80a1d66:	4b02      	ldr	r3, [pc, #8]	; (80a1d70 <HAL_Pin_Mode+0xc>)
 80a1d68:	681b      	ldr	r3, [r3, #0]
 80a1d6a:	689b      	ldr	r3, [r3, #8]
 80a1d6c:	9301      	str	r3, [sp, #4]
 80a1d6e:	bd08      	pop	{r3, pc}
 80a1d70:	080601b0 	.word	0x080601b0

080a1d74 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1d74:	b508      	push	{r3, lr}
 80a1d76:	4b02      	ldr	r3, [pc, #8]	; (80a1d80 <HAL_Get_Pin_Mode+0xc>)
 80a1d78:	681b      	ldr	r3, [r3, #0]
 80a1d7a:	68db      	ldr	r3, [r3, #12]
 80a1d7c:	9301      	str	r3, [sp, #4]
 80a1d7e:	bd08      	pop	{r3, pc}
 80a1d80:	080601b0 	.word	0x080601b0

080a1d84 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1d84:	b508      	push	{r3, lr}
 80a1d86:	4b02      	ldr	r3, [pc, #8]	; (80a1d90 <HAL_GPIO_Write+0xc>)
 80a1d88:	681b      	ldr	r3, [r3, #0]
 80a1d8a:	691b      	ldr	r3, [r3, #16]
 80a1d8c:	9301      	str	r3, [sp, #4]
 80a1d8e:	bd08      	pop	{r3, pc}
 80a1d90:	080601b0 	.word	0x080601b0

080a1d94 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1d94:	b508      	push	{r3, lr}
 80a1d96:	4b02      	ldr	r3, [pc, #8]	; (80a1da0 <HAL_GPIO_Read+0xc>)
 80a1d98:	681b      	ldr	r3, [r3, #0]
 80a1d9a:	695b      	ldr	r3, [r3, #20]
 80a1d9c:	9301      	str	r3, [sp, #4]
 80a1d9e:	bd08      	pop	{r3, pc}
 80a1da0:	080601b0 	.word	0x080601b0

080a1da4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1da4:	b508      	push	{r3, lr}
 80a1da6:	4b02      	ldr	r3, [pc, #8]	; (80a1db0 <HAL_SPI_Init+0xc>)
 80a1da8:	681b      	ldr	r3, [r3, #0]
 80a1daa:	69db      	ldr	r3, [r3, #28]
 80a1dac:	9301      	str	r3, [sp, #4]
 80a1dae:	bd08      	pop	{r3, pc}
 80a1db0:	080601b4 	.word	0x080601b4

080a1db4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1db4:	b508      	push	{r3, lr}
 80a1db6:	4b02      	ldr	r3, [pc, #8]	; (80a1dc0 <HAL_SPI_Is_Enabled+0xc>)
 80a1db8:	681b      	ldr	r3, [r3, #0]
 80a1dba:	6a1b      	ldr	r3, [r3, #32]
 80a1dbc:	9301      	str	r3, [sp, #4]
 80a1dbe:	bd08      	pop	{r3, pc}
 80a1dc0:	080601b4 	.word	0x080601b4

080a1dc4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1dc4:	b508      	push	{r3, lr}
 80a1dc6:	4b02      	ldr	r3, [pc, #8]	; (80a1dd0 <HAL_RNG_GetRandomNumber+0xc>)
 80a1dc8:	681b      	ldr	r3, [r3, #0]
 80a1dca:	685b      	ldr	r3, [r3, #4]
 80a1dcc:	9301      	str	r3, [sp, #4]
 80a1dce:	bd08      	pop	{r3, pc}
 80a1dd0:	0806019c 	.word	0x0806019c

080a1dd4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1dd4:	b508      	push	{r3, lr}
 80a1dd6:	4b02      	ldr	r3, [pc, #8]	; (80a1de0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1dd8:	681b      	ldr	r3, [r3, #0]
 80a1dda:	691b      	ldr	r3, [r3, #16]
 80a1ddc:	9301      	str	r3, [sp, #4]
 80a1dde:	bd08      	pop	{r3, pc}
 80a1de0:	0806019c 	.word	0x0806019c

080a1de4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1de4:	b508      	push	{r3, lr}
 80a1de6:	4b02      	ldr	r3, [pc, #8]	; (80a1df0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1de8:	681b      	ldr	r3, [r3, #0]
 80a1dea:	695b      	ldr	r3, [r3, #20]
 80a1dec:	9301      	str	r3, [sp, #4]
 80a1dee:	bd08      	pop	{r3, pc}
 80a1df0:	0806019c 	.word	0x0806019c

080a1df4 <HAL_Core_Enter_Bootloader>:
DYNALIB_FN(2, hal_core, HAL_Core_Config, void(void))
DYNALIB_FN(3, hal_core, HAL_Core_Mode_Button_Pressed, bool(uint16_t))
DYNALIB_FN(4, hal_core, HAL_Core_Mode_Button_Reset, void(uint16_t))
DYNALIB_FN(5, hal_core, HAL_Core_System_Reset, void(void))
DYNALIB_FN(6, hal_core, HAL_Core_Factory_Reset, void(void))
DYNALIB_FN(7, hal_core, HAL_Core_Enter_Bootloader, void(bool))
 80a1df4:	b508      	push	{r3, lr}
 80a1df6:	4b02      	ldr	r3, [pc, #8]	; (80a1e00 <HAL_Core_Enter_Bootloader+0xc>)
 80a1df8:	681b      	ldr	r3, [r3, #0]
 80a1dfa:	69db      	ldr	r3, [r3, #28]
 80a1dfc:	9301      	str	r3, [sp, #4]
 80a1dfe:	bd08      	pop	{r3, pc}
 80a1e00:	080601b8 	.word	0x080601b8

080a1e04 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1e04:	b508      	push	{r3, lr}
 80a1e06:	4b02      	ldr	r3, [pc, #8]	; (80a1e10 <os_mutex_recursive_create+0xc>)
 80a1e08:	681b      	ldr	r3, [r3, #0]
 80a1e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1e0c:	9301      	str	r3, [sp, #4]
 80a1e0e:	bd08      	pop	{r3, pc}
 80a1e10:	080601d0 	.word	0x080601d0

080a1e14 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1e14:	b508      	push	{r3, lr}
 80a1e16:	4b02      	ldr	r3, [pc, #8]	; (80a1e20 <os_mutex_recursive_destroy+0xc>)
 80a1e18:	681b      	ldr	r3, [r3, #0]
 80a1e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1e1c:	9301      	str	r3, [sp, #4]
 80a1e1e:	bd08      	pop	{r3, pc}
 80a1e20:	080601d0 	.word	0x080601d0

080a1e24 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1e24:	b508      	push	{r3, lr}
 80a1e26:	4b02      	ldr	r3, [pc, #8]	; (80a1e30 <HAL_USART_Init+0xc>)
 80a1e28:	681b      	ldr	r3, [r3, #0]
 80a1e2a:	699b      	ldr	r3, [r3, #24]
 80a1e2c:	9301      	str	r3, [sp, #4]
 80a1e2e:	bd08      	pop	{r3, pc}
 80a1e30:	080601c4 	.word	0x080601c4

080a1e34 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1e34:	b508      	push	{r3, lr}
 80a1e36:	4b02      	ldr	r3, [pc, #8]	; (80a1e40 <HAL_USART_Write_Data+0xc>)
 80a1e38:	681b      	ldr	r3, [r3, #0]
 80a1e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1e3c:	9301      	str	r3, [sp, #4]
 80a1e3e:	bd08      	pop	{r3, pc}
 80a1e40:	080601c4 	.word	0x080601c4

080a1e44 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1e44:	b508      	push	{r3, lr}
 80a1e46:	4b02      	ldr	r3, [pc, #8]	; (80a1e50 <HAL_USART_Available_Data+0xc>)
 80a1e48:	681b      	ldr	r3, [r3, #0]
 80a1e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1e4c:	9301      	str	r3, [sp, #4]
 80a1e4e:	bd08      	pop	{r3, pc}
 80a1e50:	080601c4 	.word	0x080601c4

080a1e54 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1e54:	b508      	push	{r3, lr}
 80a1e56:	4b02      	ldr	r3, [pc, #8]	; (80a1e60 <HAL_USART_Read_Data+0xc>)
 80a1e58:	681b      	ldr	r3, [r3, #0]
 80a1e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1e5c:	9301      	str	r3, [sp, #4]
 80a1e5e:	bd08      	pop	{r3, pc}
 80a1e60:	080601c4 	.word	0x080601c4

080a1e64 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1e64:	b508      	push	{r3, lr}
 80a1e66:	4b02      	ldr	r3, [pc, #8]	; (80a1e70 <HAL_USART_Peek_Data+0xc>)
 80a1e68:	681b      	ldr	r3, [r3, #0]
 80a1e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1e6c:	9301      	str	r3, [sp, #4]
 80a1e6e:	bd08      	pop	{r3, pc}
 80a1e70:	080601c4 	.word	0x080601c4

080a1e74 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1e74:	b508      	push	{r3, lr}
 80a1e76:	4b02      	ldr	r3, [pc, #8]	; (80a1e80 <HAL_USART_Flush_Data+0xc>)
 80a1e78:	681b      	ldr	r3, [r3, #0]
 80a1e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1e7c:	9301      	str	r3, [sp, #4]
 80a1e7e:	bd08      	pop	{r3, pc}
 80a1e80:	080601c4 	.word	0x080601c4

080a1e84 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1e84:	b508      	push	{r3, lr}
 80a1e86:	4b02      	ldr	r3, [pc, #8]	; (80a1e90 <HAL_USART_Is_Enabled+0xc>)
 80a1e88:	681b      	ldr	r3, [r3, #0]
 80a1e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1e8c:	9301      	str	r3, [sp, #4]
 80a1e8e:	bd08      	pop	{r3, pc}
 80a1e90:	080601c4 	.word	0x080601c4

080a1e94 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1e94:	b508      	push	{r3, lr}
 80a1e96:	4b02      	ldr	r3, [pc, #8]	; (80a1ea0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1e98:	681b      	ldr	r3, [r3, #0]
 80a1e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1e9c:	9301      	str	r3, [sp, #4]
 80a1e9e:	bd08      	pop	{r3, pc}
 80a1ea0:	080601c4 	.word	0x080601c4

080a1ea4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1ea4:	b508      	push	{r3, lr}
 80a1ea6:	4b02      	ldr	r3, [pc, #8]	; (80a1eb0 <HAL_I2C_Write_Data+0xc>)
 80a1ea8:	681b      	ldr	r3, [r3, #0]
 80a1eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1eac:	9301      	str	r3, [sp, #4]
 80a1eae:	bd08      	pop	{r3, pc}
 80a1eb0:	080601ac 	.word	0x080601ac

080a1eb4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1eb4:	b508      	push	{r3, lr}
 80a1eb6:	4b02      	ldr	r3, [pc, #8]	; (80a1ec0 <HAL_I2C_Available_Data+0xc>)
 80a1eb8:	681b      	ldr	r3, [r3, #0]
 80a1eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1ebc:	9301      	str	r3, [sp, #4]
 80a1ebe:	bd08      	pop	{r3, pc}
 80a1ec0:	080601ac 	.word	0x080601ac

080a1ec4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1ec4:	b508      	push	{r3, lr}
 80a1ec6:	4b02      	ldr	r3, [pc, #8]	; (80a1ed0 <HAL_I2C_Read_Data+0xc>)
 80a1ec8:	681b      	ldr	r3, [r3, #0]
 80a1eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1ecc:	9301      	str	r3, [sp, #4]
 80a1ece:	bd08      	pop	{r3, pc}
 80a1ed0:	080601ac 	.word	0x080601ac

080a1ed4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1ed4:	b508      	push	{r3, lr}
 80a1ed6:	4b02      	ldr	r3, [pc, #8]	; (80a1ee0 <HAL_I2C_Peek_Data+0xc>)
 80a1ed8:	681b      	ldr	r3, [r3, #0]
 80a1eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1edc:	9301      	str	r3, [sp, #4]
 80a1ede:	bd08      	pop	{r3, pc}
 80a1ee0:	080601ac 	.word	0x080601ac

080a1ee4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1ee4:	b508      	push	{r3, lr}
 80a1ee6:	4b02      	ldr	r3, [pc, #8]	; (80a1ef0 <HAL_I2C_Flush_Data+0xc>)
 80a1ee8:	681b      	ldr	r3, [r3, #0]
 80a1eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1eec:	9301      	str	r3, [sp, #4]
 80a1eee:	bd08      	pop	{r3, pc}
 80a1ef0:	080601ac 	.word	0x080601ac

080a1ef4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1ef4:	b508      	push	{r3, lr}
 80a1ef6:	4b02      	ldr	r3, [pc, #8]	; (80a1f00 <HAL_I2C_Is_Enabled+0xc>)
 80a1ef8:	681b      	ldr	r3, [r3, #0]
 80a1efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1efc:	9301      	str	r3, [sp, #4]
 80a1efe:	bd08      	pop	{r3, pc}
 80a1f00:	080601ac 	.word	0x080601ac

080a1f04 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a1f04:	b508      	push	{r3, lr}
 80a1f06:	4b03      	ldr	r3, [pc, #12]	; (80a1f14 <HAL_I2C_Init+0x10>)
 80a1f08:	681b      	ldr	r3, [r3, #0]
 80a1f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1f0e:	9301      	str	r3, [sp, #4]
 80a1f10:	bd08      	pop	{r3, pc}
 80a1f12:	0000      	.short	0x0000
 80a1f14:	080601ac 	.word	0x080601ac

080a1f18 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1f18:	b508      	push	{r3, lr}
 80a1f1a:	4b02      	ldr	r3, [pc, #8]	; (80a1f24 <HAL_USB_USART_Init+0xc>)
 80a1f1c:	681b      	ldr	r3, [r3, #0]
 80a1f1e:	681b      	ldr	r3, [r3, #0]
 80a1f20:	9301      	str	r3, [sp, #4]
 80a1f22:	bd08      	pop	{r3, pc}
 80a1f24:	080601d8 	.word	0x080601d8

080a1f28 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1f28:	b508      	push	{r3, lr}
 80a1f2a:	4b02      	ldr	r3, [pc, #8]	; (80a1f34 <HAL_USB_USART_Available_Data+0xc>)
 80a1f2c:	681b      	ldr	r3, [r3, #0]
 80a1f2e:	691b      	ldr	r3, [r3, #16]
 80a1f30:	9301      	str	r3, [sp, #4]
 80a1f32:	bd08      	pop	{r3, pc}
 80a1f34:	080601d8 	.word	0x080601d8

080a1f38 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1f38:	b508      	push	{r3, lr}
 80a1f3a:	4b02      	ldr	r3, [pc, #8]	; (80a1f44 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1f3c:	681b      	ldr	r3, [r3, #0]
 80a1f3e:	695b      	ldr	r3, [r3, #20]
 80a1f40:	9301      	str	r3, [sp, #4]
 80a1f42:	bd08      	pop	{r3, pc}
 80a1f44:	080601d8 	.word	0x080601d8

080a1f48 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1f48:	b508      	push	{r3, lr}
 80a1f4a:	4b02      	ldr	r3, [pc, #8]	; (80a1f54 <HAL_USB_USART_Receive_Data+0xc>)
 80a1f4c:	681b      	ldr	r3, [r3, #0]
 80a1f4e:	699b      	ldr	r3, [r3, #24]
 80a1f50:	9301      	str	r3, [sp, #4]
 80a1f52:	bd08      	pop	{r3, pc}
 80a1f54:	080601d8 	.word	0x080601d8

080a1f58 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1f58:	b508      	push	{r3, lr}
 80a1f5a:	4b02      	ldr	r3, [pc, #8]	; (80a1f64 <HAL_USB_USART_Send_Data+0xc>)
 80a1f5c:	681b      	ldr	r3, [r3, #0]
 80a1f5e:	69db      	ldr	r3, [r3, #28]
 80a1f60:	9301      	str	r3, [sp, #4]
 80a1f62:	bd08      	pop	{r3, pc}
 80a1f64:	080601d8 	.word	0x080601d8

080a1f68 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1f68:	b508      	push	{r3, lr}
 80a1f6a:	4b02      	ldr	r3, [pc, #8]	; (80a1f74 <HAL_USB_USART_Flush_Data+0xc>)
 80a1f6c:	681b      	ldr	r3, [r3, #0]
 80a1f6e:	6a1b      	ldr	r3, [r3, #32]
 80a1f70:	9301      	str	r3, [sp, #4]
 80a1f72:	bd08      	pop	{r3, pc}
 80a1f74:	080601d8 	.word	0x080601d8

080a1f78 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1f78:	b508      	push	{r3, lr}
 80a1f7a:	4b02      	ldr	r3, [pc, #8]	; (80a1f84 <inet_gethostbyname+0xc>)
 80a1f7c:	681b      	ldr	r3, [r3, #0]
 80a1f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1f80:	9301      	str	r3, [sp, #4]
 80a1f82:	bd08      	pop	{r3, pc}
 80a1f84:	080601c0 	.word	0x080601c0

080a1f88 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1f88:	b508      	push	{r3, lr}
 80a1f8a:	4b02      	ldr	r3, [pc, #8]	; (80a1f94 <set_system_mode+0xc>)
 80a1f8c:	681b      	ldr	r3, [r3, #0]
 80a1f8e:	685b      	ldr	r3, [r3, #4]
 80a1f90:	9301      	str	r3, [sp, #4]
 80a1f92:	bd08      	pop	{r3, pc}
 80a1f94:	080601a4 	.word	0x080601a4

080a1f98 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1f98:	b508      	push	{r3, lr}
 80a1f9a:	4b02      	ldr	r3, [pc, #8]	; (80a1fa4 <system_delay_ms+0xc>)
 80a1f9c:	681b      	ldr	r3, [r3, #0]
 80a1f9e:	695b      	ldr	r3, [r3, #20]
 80a1fa0:	9301      	str	r3, [sp, #4]
 80a1fa2:	bd08      	pop	{r3, pc}
 80a1fa4:	080601a4 	.word	0x080601a4

080a1fa8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1fa8:	b508      	push	{r3, lr}
 80a1faa:	4b03      	ldr	r3, [pc, #12]	; (80a1fb8 <system_ctrl_set_app_request_handler+0x10>)
 80a1fac:	681b      	ldr	r3, [r3, #0]
 80a1fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1fb2:	9301      	str	r3, [sp, #4]
 80a1fb4:	bd08      	pop	{r3, pc}
 80a1fb6:	0000      	.short	0x0000
 80a1fb8:	080601a4 	.word	0x080601a4

080a1fbc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1fbc:	b508      	push	{r3, lr}
 80a1fbe:	4b03      	ldr	r3, [pc, #12]	; (80a1fcc <system_ctrl_set_result+0x10>)
 80a1fc0:	681b      	ldr	r3, [r3, #0]
 80a1fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1fc6:	9301      	str	r3, [sp, #4]
 80a1fc8:	bd08      	pop	{r3, pc}
 80a1fca:	0000      	.short	0x0000
 80a1fcc:	080601a4 	.word	0x080601a4

080a1fd0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1fd0:	b508      	push	{r3, lr}
 80a1fd2:	4b02      	ldr	r3, [pc, #8]	; (80a1fdc <network_connect+0xc>)
 80a1fd4:	681b      	ldr	r3, [r3, #0]
 80a1fd6:	685b      	ldr	r3, [r3, #4]
 80a1fd8:	9301      	str	r3, [sp, #4]
 80a1fda:	bd08      	pop	{r3, pc}
 80a1fdc:	080601c8 	.word	0x080601c8

080a1fe0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1fe0:	b508      	push	{r3, lr}
 80a1fe2:	4b02      	ldr	r3, [pc, #8]	; (80a1fec <network_connecting+0xc>)
 80a1fe4:	681b      	ldr	r3, [r3, #0]
 80a1fe6:	689b      	ldr	r3, [r3, #8]
 80a1fe8:	9301      	str	r3, [sp, #4]
 80a1fea:	bd08      	pop	{r3, pc}
 80a1fec:	080601c8 	.word	0x080601c8

080a1ff0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1ff0:	b508      	push	{r3, lr}
 80a1ff2:	4b02      	ldr	r3, [pc, #8]	; (80a1ffc <network_disconnect+0xc>)
 80a1ff4:	681b      	ldr	r3, [r3, #0]
 80a1ff6:	68db      	ldr	r3, [r3, #12]
 80a1ff8:	9301      	str	r3, [sp, #4]
 80a1ffa:	bd08      	pop	{r3, pc}
 80a1ffc:	080601c8 	.word	0x080601c8

080a2000 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2000:	b508      	push	{r3, lr}
 80a2002:	4b02      	ldr	r3, [pc, #8]	; (80a200c <network_ready+0xc>)
 80a2004:	681b      	ldr	r3, [r3, #0]
 80a2006:	691b      	ldr	r3, [r3, #16]
 80a2008:	9301      	str	r3, [sp, #4]
 80a200a:	bd08      	pop	{r3, pc}
 80a200c:	080601c8 	.word	0x080601c8

080a2010 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2010:	b508      	push	{r3, lr}
 80a2012:	4b02      	ldr	r3, [pc, #8]	; (80a201c <network_on+0xc>)
 80a2014:	681b      	ldr	r3, [r3, #0]
 80a2016:	695b      	ldr	r3, [r3, #20]
 80a2018:	9301      	str	r3, [sp, #4]
 80a201a:	bd08      	pop	{r3, pc}
 80a201c:	080601c8 	.word	0x080601c8

080a2020 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2020:	b508      	push	{r3, lr}
 80a2022:	4b02      	ldr	r3, [pc, #8]	; (80a202c <network_off+0xc>)
 80a2024:	681b      	ldr	r3, [r3, #0]
 80a2026:	699b      	ldr	r3, [r3, #24]
 80a2028:	9301      	str	r3, [sp, #4]
 80a202a:	bd08      	pop	{r3, pc}
 80a202c:	080601c8 	.word	0x080601c8

080a2030 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2030:	b508      	push	{r3, lr}
 80a2032:	4b02      	ldr	r3, [pc, #8]	; (80a203c <network_listen+0xc>)
 80a2034:	681b      	ldr	r3, [r3, #0]
 80a2036:	69db      	ldr	r3, [r3, #28]
 80a2038:	9301      	str	r3, [sp, #4]
 80a203a:	bd08      	pop	{r3, pc}
 80a203c:	080601c8 	.word	0x080601c8

080a2040 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2040:	b508      	push	{r3, lr}
 80a2042:	4b02      	ldr	r3, [pc, #8]	; (80a204c <network_listening+0xc>)
 80a2044:	681b      	ldr	r3, [r3, #0]
 80a2046:	6a1b      	ldr	r3, [r3, #32]
 80a2048:	9301      	str	r3, [sp, #4]
 80a204a:	bd08      	pop	{r3, pc}
 80a204c:	080601c8 	.word	0x080601c8

080a2050 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2050:	b508      	push	{r3, lr}
 80a2052:	4b02      	ldr	r3, [pc, #8]	; (80a205c <network_set_listen_timeout+0xc>)
 80a2054:	681b      	ldr	r3, [r3, #0]
 80a2056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2058:	9301      	str	r3, [sp, #4]
 80a205a:	bd08      	pop	{r3, pc}
 80a205c:	080601c8 	.word	0x080601c8

080a2060 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2060:	b508      	push	{r3, lr}
 80a2062:	4b02      	ldr	r3, [pc, #8]	; (80a206c <network_get_listen_timeout+0xc>)
 80a2064:	681b      	ldr	r3, [r3, #0]
 80a2066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2068:	9301      	str	r3, [sp, #4]
 80a206a:	bd08      	pop	{r3, pc}
 80a206c:	080601c8 	.word	0x080601c8

080a2070 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2070:	b508      	push	{r3, lr}
 80a2072:	4b02      	ldr	r3, [pc, #8]	; (80a207c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2074:	681b      	ldr	r3, [r3, #0]
 80a2076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2078:	9301      	str	r3, [sp, #4]
 80a207a:	bd08      	pop	{r3, pc}
 80a207c:	080601cc 	.word	0x080601cc

080a2080 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2080:	b508      	push	{r3, lr}
 80a2082:	4b02      	ldr	r3, [pc, #8]	; (80a208c <malloc+0xc>)
 80a2084:	681b      	ldr	r3, [r3, #0]
 80a2086:	681b      	ldr	r3, [r3, #0]
 80a2088:	9301      	str	r3, [sp, #4]
 80a208a:	bd08      	pop	{r3, pc}
 80a208c:	080601a0 	.word	0x080601a0

080a2090 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2090:	b508      	push	{r3, lr}
 80a2092:	4b02      	ldr	r3, [pc, #8]	; (80a209c <free+0xc>)
 80a2094:	681b      	ldr	r3, [r3, #0]
 80a2096:	685b      	ldr	r3, [r3, #4]
 80a2098:	9301      	str	r3, [sp, #4]
 80a209a:	bd08      	pop	{r3, pc}
 80a209c:	080601a0 	.word	0x080601a0

080a20a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a20a0:	b570      	push	{r4, r5, r6, lr}
 80a20a2:	4604      	mov	r4, r0
 80a20a4:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a20a6:	2500      	movs	r5, #0
 80a20a8:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a20ac:	f7ff feaa 	bl	80a1e04 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a20b0:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a20b2:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a20b4:	f7ff fe76 	bl	80a1da4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a20b8:	6065      	str	r5, [r4, #4]
}
 80a20ba:	4620      	mov	r0, r4
 80a20bc:	bd70      	pop	{r4, r5, r6, pc}

080a20be <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a20be:	7800      	ldrb	r0, [r0, #0]
 80a20c0:	f7ff be78 	b.w	80a1db4 <HAL_SPI_Is_Enabled>

080a20c4 <_ZN11SystemClass3dfuEb>:
void SystemClass::dfu(bool persist)
{
    // true  - DFU mode persist if firmware upgrade is not completed
    // false - Briefly enter DFU bootloader mode (works with latest bootloader only )
    //         Subsequent reset or power off-on will execute normal firmware
    HAL_Core_Enter_Bootloader(persist);
 80a20c4:	f7ff be96 	b.w	80a1df4 <HAL_Core_Enter_Bootloader>

080a20c8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a20c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a20cc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a20ce:	4c08      	ldr	r4, [pc, #32]	; (80a20f0 <_GLOBAL__sub_I_System+0x28>)
 80a20d0:	2000      	movs	r0, #0
 80a20d2:	6020      	str	r0, [r4, #0]
 80a20d4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a20d6:	71a0      	strb	r0, [r4, #6]
 80a20d8:	8120      	strh	r0, [r4, #8]
 80a20da:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a20dc:	f7ff ff54 	bl	80a1f88 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a20e0:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a20e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a20e6:	4a03      	ldr	r2, [pc, #12]	; (80a20f4 <_GLOBAL__sub_I_System+0x2c>)
 80a20e8:	4903      	ldr	r1, [pc, #12]	; (80a20f8 <_GLOBAL__sub_I_System+0x30>)
 80a20ea:	f000 bcc1 	b.w	80a2a70 <__aeabi_atexit>
 80a20ee:	bf00      	nop
 80a20f0:	200004ac 	.word	0x200004ac
 80a20f4:	20000068 	.word	0x20000068
 80a20f8:	080a00af 	.word	0x080a00af

080a20fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a20fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20fe:	4606      	mov	r6, r0
 80a2100:	460d      	mov	r5, r1
 80a2102:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2104:	2400      	movs	r4, #0
  while (size--) {
 80a2106:	42bd      	cmp	r5, r7
 80a2108:	d00c      	beq.n	80a2124 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a210a:	6833      	ldr	r3, [r6, #0]
 80a210c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2110:	689b      	ldr	r3, [r3, #8]
 80a2112:	4630      	mov	r0, r6
 80a2114:	4798      	blx	r3
     if (chunk>=0)
 80a2116:	2800      	cmp	r0, #0
 80a2118:	db01      	blt.n	80a211e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a211a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a211c:	e7f3      	b.n	80a2106 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a211e:	2c00      	cmp	r4, #0
 80a2120:	bf08      	it	eq
 80a2122:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2124:	4620      	mov	r0, r4
 80a2126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2128 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2128:	b570      	push	{r4, r5, r6, lr}
 80a212a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a212c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a212e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2130:	b149      	cbz	r1, 80a2146 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2132:	f001 fa7d 	bl	80a3630 <strlen>
 80a2136:	682b      	ldr	r3, [r5, #0]
 80a2138:	4602      	mov	r2, r0
 80a213a:	4621      	mov	r1, r4
 80a213c:	4628      	mov	r0, r5
    }
 80a213e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2142:	68db      	ldr	r3, [r3, #12]
 80a2144:	4718      	bx	r3
    }
 80a2146:	bd70      	pop	{r4, r5, r6, pc}

080a2148 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2148:	6803      	ldr	r3, [r0, #0]
 80a214a:	689b      	ldr	r3, [r3, #8]
 80a214c:	4718      	bx	r3

080a214e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a214e:	2a01      	cmp	r2, #1
 80a2150:	bf98      	it	ls
 80a2152:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2154:	b530      	push	{r4, r5, lr}
 80a2156:	460b      	mov	r3, r1
 80a2158:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a215a:	2100      	movs	r1, #0
 80a215c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2160:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a2164:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a2168:	fb05 3312 	mls	r3, r5, r2, r3
 80a216c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a216e:	2b09      	cmp	r3, #9
 80a2170:	bf94      	ite	ls
 80a2172:	3330      	addls	r3, #48	; 0x30
 80a2174:	3337      	addhi	r3, #55	; 0x37
 80a2176:	b2db      	uxtb	r3, r3
 80a2178:	4621      	mov	r1, r4
 80a217a:	f804 3901 	strb.w	r3, [r4], #-1
 80a217e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2180:	2d00      	cmp	r5, #0
 80a2182:	d1ef      	bne.n	80a2164 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2184:	f7ff ffd0 	bl	80a2128 <_ZN5Print5writeEPKc>
}
 80a2188:	b00b      	add	sp, #44	; 0x2c
 80a218a:	bd30      	pop	{r4, r5, pc}

080a218c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a218c:	2300      	movs	r3, #0
 80a218e:	461a      	mov	r2, r3
 80a2190:	4619      	mov	r1, r3
 80a2192:	6840      	ldr	r0, [r0, #4]
 80a2194:	f7ff bf3c 	b.w	80a2010 <network_on>

080a2198 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2198:	4a01      	ldr	r2, [pc, #4]	; (80a21a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a219a:	4b02      	ldr	r3, [pc, #8]	; (80a21a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a219c:	601a      	str	r2, [r3, #0]
 80a219e:	4770      	bx	lr
 80a21a0:	080a36de 	.word	0x080a36de
 80a21a4:	200004b8 	.word	0x200004b8

080a21a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a21a8:	4b02      	ldr	r3, [pc, #8]	; (80a21b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a21aa:	681a      	ldr	r2, [r3, #0]
 80a21ac:	4b02      	ldr	r3, [pc, #8]	; (80a21b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a21ae:	601a      	str	r2, [r3, #0]
 80a21b0:	4770      	bx	lr
 80a21b2:	bf00      	nop
 80a21b4:	20000000 	.word	0x20000000
 80a21b8:	200004bc 	.word	0x200004bc

080a21bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a21bc:	2100      	movs	r1, #0
 80a21be:	f7ff beeb 	b.w	80a1f98 <system_delay_ms>

080a21c2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a21c2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a21c4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a21c6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a21c8:	b113      	cbz	r3, 80a21d0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a21ca:	2203      	movs	r2, #3
 80a21cc:	4601      	mov	r1, r0
 80a21ce:	4798      	blx	r3
    }
 80a21d0:	4620      	mov	r0, r4
 80a21d2:	bd10      	pop	{r4, pc}

080a21d4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a21d4:	b510      	push	{r4, lr}
 80a21d6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a21d8:	f7ff fff3 	bl	80a21c2 <_ZNSt14_Function_baseD1Ev>
 80a21dc:	4620      	mov	r0, r4
 80a21de:	bd10      	pop	{r4, pc}

080a21e0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a21e0:	4803      	ldr	r0, [pc, #12]	; (80a21f0 <_GLOBAL__sub_I_RGB+0x10>)
 80a21e2:	2300      	movs	r3, #0
 80a21e4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a21e6:	4a03      	ldr	r2, [pc, #12]	; (80a21f4 <_GLOBAL__sub_I_RGB+0x14>)
 80a21e8:	4903      	ldr	r1, [pc, #12]	; (80a21f8 <_GLOBAL__sub_I_RGB+0x18>)
 80a21ea:	f000 bc41 	b.w	80a2a70 <__aeabi_atexit>
 80a21ee:	bf00      	nop
 80a21f0:	200004c0 	.word	0x200004c0
 80a21f4:	20000068 	.word	0x20000068
 80a21f8:	080a21d5 	.word	0x080a21d5

080a21fc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a21fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a21fe:	4b14      	ldr	r3, [pc, #80]	; (80a2250 <serialEventRun+0x54>)
 80a2200:	b133      	cbz	r3, 80a2210 <serialEventRun+0x14>
 80a2202:	f000 f967 	bl	80a24d4 <_Z16_fetch_usbserialv>
 80a2206:	6803      	ldr	r3, [r0, #0]
 80a2208:	691b      	ldr	r3, [r3, #16]
 80a220a:	4798      	blx	r3
 80a220c:	2800      	cmp	r0, #0
 80a220e:	dc16      	bgt.n	80a223e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2210:	4b10      	ldr	r3, [pc, #64]	; (80a2254 <serialEventRun+0x58>)
 80a2212:	b133      	cbz	r3, 80a2222 <serialEventRun+0x26>
 80a2214:	f000 fa1c 	bl	80a2650 <_Z22__fetch_global_Serial1v>
 80a2218:	6803      	ldr	r3, [r0, #0]
 80a221a:	691b      	ldr	r3, [r3, #16]
 80a221c:	4798      	blx	r3
 80a221e:	2800      	cmp	r0, #0
 80a2220:	dc10      	bgt.n	80a2244 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2222:	4b0d      	ldr	r3, [pc, #52]	; (80a2258 <serialEventRun+0x5c>)
 80a2224:	b10b      	cbz	r3, 80a222a <serialEventRun+0x2e>
 80a2226:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a222a:	4b0c      	ldr	r3, [pc, #48]	; (80a225c <serialEventRun+0x60>)
 80a222c:	b17b      	cbz	r3, 80a224e <serialEventRun+0x52>
 80a222e:	f000 f98d 	bl	80a254c <_Z17_fetch_usbserial1v>
 80a2232:	6803      	ldr	r3, [r0, #0]
 80a2234:	691b      	ldr	r3, [r3, #16]
 80a2236:	4798      	blx	r3
 80a2238:	2800      	cmp	r0, #0
 80a223a:	dc06      	bgt.n	80a224a <serialEventRun+0x4e>
 80a223c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a223e:	f3af 8000 	nop.w
 80a2242:	e7e5      	b.n	80a2210 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2244:	f3af 8000 	nop.w
 80a2248:	e7eb      	b.n	80a2222 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a224a:	f3af 8000 	nop.w
 80a224e:	bd08      	pop	{r3, pc}
	...

080a2260 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2260:	b508      	push	{r3, lr}
	serialEventRun();
 80a2262:	f7ff ffcb 	bl	80a21fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2266:	f7ff fdbd 	bl	80a1de4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a226a:	4b01      	ldr	r3, [pc, #4]	; (80a2270 <_post_loop+0x10>)
 80a226c:	6018      	str	r0, [r3, #0]
 80a226e:	bd08      	pop	{r3, pc}
 80a2270:	20000954 	.word	0x20000954

080a2274 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2274:	4802      	ldr	r0, [pc, #8]	; (80a2280 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2276:	4a03      	ldr	r2, [pc, #12]	; (80a2284 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2278:	4903      	ldr	r1, [pc, #12]	; (80a2288 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a227a:	1a12      	subs	r2, r2, r0
 80a227c:	f001 b962 	b.w	80a3544 <memcpy>
 80a2280:	40024000 	.word	0x40024000
 80a2284:	40024004 	.word	0x40024004
 80a2288:	080a3920 	.word	0x080a3920

080a228c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a228c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a228e:	2300      	movs	r3, #0
 80a2290:	9300      	str	r3, [sp, #0]
 80a2292:	461a      	mov	r2, r3
 80a2294:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2298:	f7ff fe90 	bl	80a1fbc <system_ctrl_set_result>
}
 80a229c:	b003      	add	sp, #12
 80a229e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a22a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a22a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a22a6:	8843      	ldrh	r3, [r0, #2]
 80a22a8:	2b0a      	cmp	r3, #10
 80a22aa:	d008      	beq.n	80a22be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a22ac:	2b50      	cmp	r3, #80	; 0x50
 80a22ae:	d109      	bne.n	80a22c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a22b0:	4b09      	ldr	r3, [pc, #36]	; (80a22d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a22b2:	681b      	ldr	r3, [r3, #0]
 80a22b4:	b13b      	cbz	r3, 80a22c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a22b6:	b003      	add	sp, #12
 80a22b8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a22bc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a22be:	f7ff ffe5 	bl	80a228c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a22c2:	e006      	b.n	80a22d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a22c4:	2300      	movs	r3, #0
 80a22c6:	9300      	str	r3, [sp, #0]
 80a22c8:	461a      	mov	r2, r3
 80a22ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a22ce:	f7ff fe75 	bl	80a1fbc <system_ctrl_set_result>
        break;
    }
}
 80a22d2:	b003      	add	sp, #12
 80a22d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a22d8:	200004d0 	.word	0x200004d0

080a22dc <module_user_init_hook>:

void module_user_init_hook()
{
 80a22dc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a22de:	4c10      	ldr	r4, [pc, #64]	; (80a2320 <module_user_init_hook+0x44>)
 80a22e0:	4d10      	ldr	r5, [pc, #64]	; (80a2324 <module_user_init_hook+0x48>)
 80a22e2:	6823      	ldr	r3, [r4, #0]
 80a22e4:	42ab      	cmp	r3, r5
 80a22e6:	4b10      	ldr	r3, [pc, #64]	; (80a2328 <module_user_init_hook+0x4c>)
 80a22e8:	bf0c      	ite	eq
 80a22ea:	2201      	moveq	r2, #1
 80a22ec:	2200      	movne	r2, #0
 80a22ee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a22f0:	d002      	beq.n	80a22f8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a22f2:	f7ff ffbf 	bl	80a2274 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a22f6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a22f8:	f7ff fd64 	bl	80a1dc4 <HAL_RNG_GetRandomNumber>
 80a22fc:	4604      	mov	r4, r0
    srand(seed);
 80a22fe:	f001 f935 	bl	80a356c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2302:	4b0a      	ldr	r3, [pc, #40]	; (80a232c <module_user_init_hook+0x50>)
 80a2304:	b113      	cbz	r3, 80a230c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2306:	4620      	mov	r0, r4
 80a2308:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a230c:	2100      	movs	r1, #0
 80a230e:	4807      	ldr	r0, [pc, #28]	; (80a232c <module_user_init_hook+0x50>)
 80a2310:	f7ff feae 	bl	80a2070 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2318:	2100      	movs	r1, #0
 80a231a:	4805      	ldr	r0, [pc, #20]	; (80a2330 <module_user_init_hook+0x54>)
 80a231c:	f7ff be44 	b.w	80a1fa8 <system_ctrl_set_app_request_handler>
 80a2320:	40024000 	.word	0x40024000
 80a2324:	9a271c1e 	.word	0x9a271c1e
 80a2328:	200004d4 	.word	0x200004d4
 80a232c:	00000000 	.word	0x00000000
 80a2330:	080a22a5 	.word	0x080a22a5

080a2334 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2334:	4770      	bx	lr

080a2336 <_ZN9IPAddressD0Ev>:
 80a2336:	b510      	push	{r4, lr}
 80a2338:	4604      	mov	r4, r0
 80a233a:	2118      	movs	r1, #24
 80a233c:	f000 fba6 	bl	80a2a8c <_ZdlPvj>
 80a2340:	4620      	mov	r0, r4
 80a2342:	bd10      	pop	{r4, pc}

080a2344 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2346:	460f      	mov	r7, r1
 80a2348:	f100 0608 	add.w	r6, r0, #8
 80a234c:	1d05      	adds	r5, r0, #4
 80a234e:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a2350:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2354:	220a      	movs	r2, #10
 80a2356:	4638      	mov	r0, r7
 80a2358:	f7ff fef9 	bl	80a214e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a235c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a235e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2360:	d007      	beq.n	80a2372 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2362:	2c00      	cmp	r4, #0
 80a2364:	d0f4      	beq.n	80a2350 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2366:	212e      	movs	r1, #46	; 0x2e
 80a2368:	4638      	mov	r0, r7
 80a236a:	f7ff feed 	bl	80a2148 <_ZN5Print5printEc>
 80a236e:	4404      	add	r4, r0
 80a2370:	e7ee      	b.n	80a2350 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2372:	4620      	mov	r0, r4
 80a2374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2378 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2378:	b510      	push	{r4, lr}
 80a237a:	4604      	mov	r4, r0
 80a237c:	4b04      	ldr	r3, [pc, #16]	; (80a2390 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a237e:	2211      	movs	r2, #17
 80a2380:	f840 3b04 	str.w	r3, [r0], #4
 80a2384:	2100      	movs	r1, #0
 80a2386:	f001 f8e8 	bl	80a355a <memset>
{
    clear();
}
 80a238a:	4620      	mov	r0, r4
 80a238c:	bd10      	pop	{r4, pc}
 80a238e:	bf00      	nop
 80a2390:	080a3780 	.word	0x080a3780

080a2394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2394:	4603      	mov	r3, r0
 80a2396:	4a07      	ldr	r2, [pc, #28]	; (80a23b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2398:	b510      	push	{r4, lr}
 80a239a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a239e:	f101 0210 	add.w	r2, r1, #16
 80a23a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a23a6:	4291      	cmp	r1, r2
 80a23a8:	f843 4b04 	str.w	r4, [r3], #4
 80a23ac:	d1f9      	bne.n	80a23a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a23ae:	780a      	ldrb	r2, [r1, #0]
 80a23b0:	701a      	strb	r2, [r3, #0]
}
 80a23b2:	bd10      	pop	{r4, pc}
 80a23b4:	080a3780 	.word	0x080a3780

080a23b8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a23b8:	4a02      	ldr	r2, [pc, #8]	; (80a23c4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a23ba:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a23bc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a23be:	2204      	movs	r2, #4
 80a23c0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a23c2:	4770      	bx	lr
 80a23c4:	080a3780 	.word	0x080a3780

080a23c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a23c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a23ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a23ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a23d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a23d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a23da:	2304      	movs	r3, #4
 80a23dc:	6041      	str	r1, [r0, #4]
 80a23de:	7503      	strb	r3, [r0, #20]
 80a23e0:	bd10      	pop	{r4, pc}
	...

080a23e4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a23e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a23e6:	4d04      	ldr	r5, [pc, #16]	; (80a23f8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a23e8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a23ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a23ee:	9500      	str	r5, [sp, #0]
 80a23f0:	f7ff ffea 	bl	80a23c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a23f4:	b003      	add	sp, #12
 80a23f6:	bd30      	pop	{r4, r5, pc}
 80a23f8:	080a3780 	.word	0x080a3780

080a23fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a23fc:	7441      	strb	r1, [r0, #17]
 80a23fe:	4770      	bx	lr

080a2400 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2400:	4770      	bx	lr

080a2402 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2402:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2404:	2100      	movs	r1, #0
 80a2406:	7c00      	ldrb	r0, [r0, #16]
 80a2408:	f7ff fd9e 	bl	80a1f48 <HAL_USB_USART_Receive_Data>
}
 80a240c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2410:	bf28      	it	cs
 80a2412:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2416:	bd08      	pop	{r3, pc}

080a2418 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2418:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a241a:	2101      	movs	r1, #1
 80a241c:	7c00      	ldrb	r0, [r0, #16]
 80a241e:	f7ff fd93 	bl	80a1f48 <HAL_USB_USART_Receive_Data>
}
 80a2422:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2426:	bf28      	it	cs
 80a2428:	f04f 30ff 	movcs.w	r0, #4294967295
 80a242c:	bd08      	pop	{r3, pc}

080a242e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a242e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2430:	7c00      	ldrb	r0, [r0, #16]
 80a2432:	f7ff fd81 	bl	80a1f38 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2436:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a243a:	bd08      	pop	{r3, pc}

080a243c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a243c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a243e:	7c00      	ldrb	r0, [r0, #16]
 80a2440:	f7ff fd72 	bl	80a1f28 <HAL_USB_USART_Available_Data>
}
 80a2444:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2448:	bd08      	pop	{r3, pc}

080a244a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a244a:	7c00      	ldrb	r0, [r0, #16]
 80a244c:	f7ff bd8c 	b.w	80a1f68 <HAL_USB_USART_Flush_Data>

080a2450 <_ZN9USBSerialD0Ev>:
 80a2450:	b510      	push	{r4, lr}
 80a2452:	4604      	mov	r4, r0
 80a2454:	2114      	movs	r1, #20
 80a2456:	f000 fb19 	bl	80a2a8c <_ZdlPvj>
 80a245a:	4620      	mov	r0, r4
 80a245c:	bd10      	pop	{r4, pc}

080a245e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a245e:	b538      	push	{r3, r4, r5, lr}
 80a2460:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2462:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2464:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2466:	f7ff fd67 	bl	80a1f38 <HAL_USB_USART_Available_Data_For_Write>
 80a246a:	2800      	cmp	r0, #0
 80a246c:	dc01      	bgt.n	80a2472 <_ZN9USBSerial5writeEh+0x14>
 80a246e:	7c60      	ldrb	r0, [r4, #17]
 80a2470:	b128      	cbz	r0, 80a247e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2472:	4629      	mov	r1, r5
 80a2474:	7c20      	ldrb	r0, [r4, #16]
 80a2476:	f7ff fd6f 	bl	80a1f58 <HAL_USB_USART_Send_Data>
 80a247a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a247e:	bd38      	pop	{r3, r4, r5, pc}

080a2480 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2480:	b510      	push	{r4, lr}
 80a2482:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2484:	2300      	movs	r3, #0
 80a2486:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a248c:	60a3      	str	r3, [r4, #8]
 80a248e:	4b05      	ldr	r3, [pc, #20]	; (80a24a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2490:	4608      	mov	r0, r1
 80a2492:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2494:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2496:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2498:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a249a:	4611      	mov	r1, r2
 80a249c:	f7ff fd3c 	bl	80a1f18 <HAL_USB_USART_Init>
}
 80a24a0:	4620      	mov	r0, r4
 80a24a2:	bd10      	pop	{r4, pc}
 80a24a4:	080a3794 	.word	0x080a3794

080a24a8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a24a8:	b510      	push	{r4, lr}
 80a24aa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a24ac:	2214      	movs	r2, #20
 80a24ae:	2100      	movs	r1, #0
 80a24b0:	f001 f853 	bl	80a355a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a24b4:	4b05      	ldr	r3, [pc, #20]	; (80a24cc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a24b6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a24b8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a24ba:	4b05      	ldr	r3, [pc, #20]	; (80a24d0 <_Z19acquireSerialBufferv+0x28>)
 80a24bc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a24be:	f240 1301 	movw	r3, #257	; 0x101
 80a24c2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a24c4:	2381      	movs	r3, #129	; 0x81
 80a24c6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a24c8:	bd10      	pop	{r4, pc}
 80a24ca:	bf00      	nop
 80a24cc:	2000055d 	.word	0x2000055d
 80a24d0:	200004dc 	.word	0x200004dc

080a24d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a24d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a24d6:	4d0e      	ldr	r5, [pc, #56]	; (80a2510 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a24d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a24da:	a801      	add	r0, sp, #4
 80a24dc:	f7ff ffe4 	bl	80a24a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a24e0:	6829      	ldr	r1, [r5, #0]
 80a24e2:	f011 0401 	ands.w	r4, r1, #1
 80a24e6:	d110      	bne.n	80a250a <_Z16_fetch_usbserialv+0x36>
 80a24e8:	4628      	mov	r0, r5
 80a24ea:	f7fd fdd8 	bl	80a009e <__cxa_guard_acquire>
 80a24ee:	b160      	cbz	r0, 80a250a <_Z16_fetch_usbserialv+0x36>
 80a24f0:	aa01      	add	r2, sp, #4
 80a24f2:	4621      	mov	r1, r4
 80a24f4:	4807      	ldr	r0, [pc, #28]	; (80a2514 <_Z16_fetch_usbserialv+0x40>)
 80a24f6:	f7ff ffc3 	bl	80a2480 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a24fa:	4628      	mov	r0, r5
 80a24fc:	f7fd fdd4 	bl	80a00a8 <__cxa_guard_release>
 80a2500:	4a05      	ldr	r2, [pc, #20]	; (80a2518 <_Z16_fetch_usbserialv+0x44>)
 80a2502:	4906      	ldr	r1, [pc, #24]	; (80a251c <_Z16_fetch_usbserialv+0x48>)
 80a2504:	4803      	ldr	r0, [pc, #12]	; (80a2514 <_Z16_fetch_usbserialv+0x40>)
 80a2506:	f000 fab3 	bl	80a2a70 <__aeabi_atexit>
	return _usbserial;
}
 80a250a:	4802      	ldr	r0, [pc, #8]	; (80a2514 <_Z16_fetch_usbserialv+0x40>)
 80a250c:	b007      	add	sp, #28
 80a250e:	bd30      	pop	{r4, r5, pc}
 80a2510:	200004d8 	.word	0x200004d8
 80a2514:	20000660 	.word	0x20000660
 80a2518:	20000068 	.word	0x20000068
 80a251c:	080a2401 	.word	0x080a2401

080a2520 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2520:	b510      	push	{r4, lr}
 80a2522:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2524:	2214      	movs	r2, #20
 80a2526:	2100      	movs	r1, #0
 80a2528:	f001 f817 	bl	80a355a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a252c:	4b05      	ldr	r3, [pc, #20]	; (80a2544 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a252e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2530:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2532:	4b05      	ldr	r3, [pc, #20]	; (80a2548 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2534:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2536:	f240 1301 	movw	r3, #257	; 0x101
 80a253a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a253c:	2381      	movs	r3, #129	; 0x81
 80a253e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2540:	bd10      	pop	{r4, pc}
 80a2542:	bf00      	nop
 80a2544:	20000710 	.word	0x20000710
 80a2548:	20000678 	.word	0x20000678

080a254c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a254c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a254e:	4c0e      	ldr	r4, [pc, #56]	; (80a2588 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2550:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2552:	a801      	add	r0, sp, #4
 80a2554:	f7ff ffe4 	bl	80a2520 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2558:	6823      	ldr	r3, [r4, #0]
 80a255a:	07db      	lsls	r3, r3, #31
 80a255c:	d410      	bmi.n	80a2580 <_Z17_fetch_usbserial1v+0x34>
 80a255e:	4620      	mov	r0, r4
 80a2560:	f7fd fd9d 	bl	80a009e <__cxa_guard_acquire>
 80a2564:	b160      	cbz	r0, 80a2580 <_Z17_fetch_usbserial1v+0x34>
 80a2566:	aa01      	add	r2, sp, #4
 80a2568:	2101      	movs	r1, #1
 80a256a:	4808      	ldr	r0, [pc, #32]	; (80a258c <_Z17_fetch_usbserial1v+0x40>)
 80a256c:	f7ff ff88 	bl	80a2480 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2570:	4620      	mov	r0, r4
 80a2572:	f7fd fd99 	bl	80a00a8 <__cxa_guard_release>
 80a2576:	4a06      	ldr	r2, [pc, #24]	; (80a2590 <_Z17_fetch_usbserial1v+0x44>)
 80a2578:	4906      	ldr	r1, [pc, #24]	; (80a2594 <_Z17_fetch_usbserial1v+0x48>)
 80a257a:	4804      	ldr	r0, [pc, #16]	; (80a258c <_Z17_fetch_usbserial1v+0x40>)
 80a257c:	f000 fa78 	bl	80a2a70 <__aeabi_atexit>
  return _usbserial1;
}
 80a2580:	4802      	ldr	r0, [pc, #8]	; (80a258c <_Z17_fetch_usbserial1v+0x40>)
 80a2582:	b006      	add	sp, #24
 80a2584:	bd10      	pop	{r4, pc}
 80a2586:	bf00      	nop
 80a2588:	20000674 	.word	0x20000674
 80a258c:	200006fc 	.word	0x200006fc
 80a2590:	20000068 	.word	0x20000068
 80a2594:	080a2401 	.word	0x080a2401

080a2598 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2598:	4770      	bx	lr

080a259a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a259a:	7441      	strb	r1, [r0, #17]
 80a259c:	4770      	bx	lr

080a259e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a259e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a25a0:	7c00      	ldrb	r0, [r0, #16]
 80a25a2:	f7ff fc77 	bl	80a1e94 <HAL_USART_Available_Data_For_Write>
}
 80a25a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a25aa:	bd08      	pop	{r3, pc}

080a25ac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a25ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a25ae:	7c00      	ldrb	r0, [r0, #16]
 80a25b0:	f7ff fc48 	bl	80a1e44 <HAL_USART_Available_Data>
}
 80a25b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a25b8:	bd08      	pop	{r3, pc}

080a25ba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a25ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a25bc:	7c00      	ldrb	r0, [r0, #16]
 80a25be:	f7ff fc51 	bl	80a1e64 <HAL_USART_Peek_Data>
}
 80a25c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a25c6:	bf28      	it	cs
 80a25c8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a25cc:	bd08      	pop	{r3, pc}

080a25ce <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a25ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a25d0:	7c00      	ldrb	r0, [r0, #16]
 80a25d2:	f7ff fc3f 	bl	80a1e54 <HAL_USART_Read_Data>
}
 80a25d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a25da:	bf28      	it	cs
 80a25dc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a25e0:	bd08      	pop	{r3, pc}

080a25e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a25e2:	7c00      	ldrb	r0, [r0, #16]
 80a25e4:	f7ff bc46 	b.w	80a1e74 <HAL_USART_Flush_Data>

080a25e8 <_ZN11USARTSerialD0Ev>:
 80a25e8:	b510      	push	{r4, lr}
 80a25ea:	4604      	mov	r4, r0
 80a25ec:	2114      	movs	r1, #20
 80a25ee:	f000 fa4d 	bl	80a2a8c <_ZdlPvj>
 80a25f2:	4620      	mov	r0, r4
 80a25f4:	bd10      	pop	{r4, pc}

080a25f6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a25f6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a25f8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a25fa:	4604      	mov	r4, r0
 80a25fc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a25fe:	b925      	cbnz	r5, 80a260a <_ZN11USARTSerial5writeEh+0x14>
 80a2600:	7c00      	ldrb	r0, [r0, #16]
 80a2602:	f7ff fc47 	bl	80a1e94 <HAL_USART_Available_Data_For_Write>
 80a2606:	2800      	cmp	r0, #0
 80a2608:	dd05      	ble.n	80a2616 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a260a:	4631      	mov	r1, r6
 80a260c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a260e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2612:	f7ff bc0f 	b.w	80a1e34 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2616:	4628      	mov	r0, r5
 80a2618:	bd70      	pop	{r4, r5, r6, pc}
	...

080a261c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a261c:	b510      	push	{r4, lr}
 80a261e:	4604      	mov	r4, r0
 80a2620:	4608      	mov	r0, r1
 80a2622:	4611      	mov	r1, r2
 80a2624:	2200      	movs	r2, #0
 80a2626:	6062      	str	r2, [r4, #4]
 80a2628:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a262c:	60a2      	str	r2, [r4, #8]
 80a262e:	4a05      	ldr	r2, [pc, #20]	; (80a2644 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2630:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2632:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2634:	2201      	movs	r2, #1
 80a2636:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2638:	461a      	mov	r2, r3
 80a263a:	f7ff fbf3 	bl	80a1e24 <HAL_USART_Init>
}
 80a263e:	4620      	mov	r0, r4
 80a2640:	bd10      	pop	{r4, pc}
 80a2642:	bf00      	nop
 80a2644:	080a37c4 	.word	0x080a37c4

080a2648 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2648:	7c00      	ldrb	r0, [r0, #16]
 80a264a:	f7ff bc1b 	b.w	80a1e84 <HAL_USART_Is_Enabled>
	...

080a2650 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2650:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2652:	4d0c      	ldr	r5, [pc, #48]	; (80a2684 <_Z22__fetch_global_Serial1v+0x34>)
 80a2654:	6829      	ldr	r1, [r5, #0]
 80a2656:	f011 0401 	ands.w	r4, r1, #1
 80a265a:	d111      	bne.n	80a2680 <_Z22__fetch_global_Serial1v+0x30>
 80a265c:	4628      	mov	r0, r5
 80a265e:	f7fd fd1e 	bl	80a009e <__cxa_guard_acquire>
 80a2662:	b168      	cbz	r0, 80a2680 <_Z22__fetch_global_Serial1v+0x30>
 80a2664:	4a08      	ldr	r2, [pc, #32]	; (80a2688 <_Z22__fetch_global_Serial1v+0x38>)
 80a2666:	4621      	mov	r1, r4
 80a2668:	4b08      	ldr	r3, [pc, #32]	; (80a268c <_Z22__fetch_global_Serial1v+0x3c>)
 80a266a:	4809      	ldr	r0, [pc, #36]	; (80a2690 <_Z22__fetch_global_Serial1v+0x40>)
 80a266c:	f7ff ffd6 	bl	80a261c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2670:	4628      	mov	r0, r5
 80a2672:	f7fd fd19 	bl	80a00a8 <__cxa_guard_release>
 80a2676:	4a07      	ldr	r2, [pc, #28]	; (80a2694 <_Z22__fetch_global_Serial1v+0x44>)
 80a2678:	4907      	ldr	r1, [pc, #28]	; (80a2698 <_Z22__fetch_global_Serial1v+0x48>)
 80a267a:	4805      	ldr	r0, [pc, #20]	; (80a2690 <_Z22__fetch_global_Serial1v+0x40>)
 80a267c:	f000 f9f8 	bl	80a2a70 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2680:	4803      	ldr	r0, [pc, #12]	; (80a2690 <_Z22__fetch_global_Serial1v+0x40>)
 80a2682:	bd38      	pop	{r3, r4, r5, pc}
 80a2684:	200008ac 	.word	0x200008ac
 80a2688:	200008b0 	.word	0x200008b0
 80a268c:	20000828 	.word	0x20000828
 80a2690:	20000814 	.word	0x20000814
 80a2694:	20000068 	.word	0x20000068
 80a2698:	080a2599 	.word	0x080a2599

080a269c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a269c:	4770      	bx	lr

080a269e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a269e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a26a0:	4606      	mov	r6, r0
 80a26a2:	4615      	mov	r5, r2
 80a26a4:	460c      	mov	r4, r1
 80a26a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a26a8:	42bc      	cmp	r4, r7
 80a26aa:	d006      	beq.n	80a26ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a26ac:	6833      	ldr	r3, [r6, #0]
 80a26ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a26b2:	689b      	ldr	r3, [r3, #8]
 80a26b4:	4630      	mov	r0, r6
 80a26b6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a26b8:	e7f6      	b.n	80a26a8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a26ba:	4628      	mov	r0, r5
 80a26bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a26be <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a26be:	2200      	movs	r2, #0
 80a26c0:	7c00      	ldrb	r0, [r0, #16]
 80a26c2:	f7ff bbef 	b.w	80a1ea4 <HAL_I2C_Write_Data>

080a26c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a26c6:	2100      	movs	r1, #0
 80a26c8:	7c00      	ldrb	r0, [r0, #16]
 80a26ca:	f7ff bbf3 	b.w	80a1eb4 <HAL_I2C_Available_Data>

080a26ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a26ce:	2100      	movs	r1, #0
 80a26d0:	7c00      	ldrb	r0, [r0, #16]
 80a26d2:	f7ff bbf7 	b.w	80a1ec4 <HAL_I2C_Read_Data>

080a26d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a26d6:	2100      	movs	r1, #0
 80a26d8:	7c00      	ldrb	r0, [r0, #16]
 80a26da:	f7ff bbfb 	b.w	80a1ed4 <HAL_I2C_Peek_Data>

080a26de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a26de:	2100      	movs	r1, #0
 80a26e0:	7c00      	ldrb	r0, [r0, #16]
 80a26e2:	f7ff bbff 	b.w	80a1ee4 <HAL_I2C_Flush_Data>

080a26e6 <_ZN7TwoWireD0Ev>:
 80a26e6:	b510      	push	{r4, lr}
 80a26e8:	4604      	mov	r4, r0
 80a26ea:	2114      	movs	r1, #20
 80a26ec:	f000 f9ce 	bl	80a2a8c <_ZdlPvj>
 80a26f0:	4620      	mov	r0, r4
 80a26f2:	bd10      	pop	{r4, pc}

080a26f4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a26f4:	b510      	push	{r4, lr}
 80a26f6:	4604      	mov	r4, r0
 80a26f8:	2300      	movs	r3, #0
 80a26fa:	6063      	str	r3, [r4, #4]
 80a26fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2700:	60a3      	str	r3, [r4, #8]
 80a2702:	4b04      	ldr	r3, [pc, #16]	; (80a2714 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a2704:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a2706:	4608      	mov	r0, r1
 80a2708:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a270a:	4611      	mov	r1, r2
 80a270c:	f7ff fbfa 	bl	80a1f04 <HAL_I2C_Init>
}
 80a2710:	4620      	mov	r0, r4
 80a2712:	bd10      	pop	{r4, pc}
 80a2714:	080a37f4 	.word	0x080a37f4

080a2718 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2718:	2100      	movs	r1, #0
 80a271a:	7c00      	ldrb	r0, [r0, #16]
 80a271c:	f7ff bbea 	b.w	80a1ef4 <HAL_I2C_Is_Enabled>

080a2720 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a2720:	b510      	push	{r4, lr}
  if (0 == max) {
 80a2722:	4604      	mov	r4, r0
 80a2724:	b130      	cbz	r0, 80a2734 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
 80a2726:	f000 ff49 	bl	80a35bc <rand>
 80a272a:	fb90 f3f4 	sdiv	r3, r0, r4
 80a272e:	fb03 0014 	mls	r0, r3, r4, r0
 80a2732:	bd10      	pop	{r4, pc}
}
 80a2734:	bd10      	pop	{r4, pc}

080a2736 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2736:	2200      	movs	r2, #0
 80a2738:	4611      	mov	r1, r2
 80a273a:	6840      	ldr	r0, [r0, #4]
 80a273c:	f7ff bc60 	b.w	80a2000 <network_ready>

080a2740 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2740:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2742:	4616      	mov	r6, r2
 80a2744:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2746:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2748:	460f      	mov	r7, r1
 80a274a:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a274c:	2100      	movs	r1, #0
 80a274e:	a803      	add	r0, sp, #12
 80a2750:	f000 ff03 	bl	80a355a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2754:	4630      	mov	r0, r6
 80a2756:	f000 ff6b 	bl	80a3630 <strlen>
 80a275a:	2500      	movs	r5, #0
 80a275c:	9500      	str	r5, [sp, #0]
 80a275e:	b281      	uxth	r1, r0
 80a2760:	687b      	ldr	r3, [r7, #4]
 80a2762:	aa03      	add	r2, sp, #12
 80a2764:	4630      	mov	r0, r6
 80a2766:	f7ff fc07 	bl	80a1f78 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a276a:	b120      	cbz	r0, 80a2776 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a276c:	4629      	mov	r1, r5
 80a276e:	4620      	mov	r0, r4
 80a2770:	f7ff fe22 	bl	80a23b8 <_ZN9IPAddressC1Em>
 80a2774:	e003      	b.n	80a277e <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2776:	a903      	add	r1, sp, #12
 80a2778:	4620      	mov	r0, r4
 80a277a:	f7ff fe0b 	bl	80a2394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a277e:	4620      	mov	r0, r4
 80a2780:	b009      	add	sp, #36	; 0x24
 80a2782:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2784 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2784:	2200      	movs	r2, #0
 80a2786:	4611      	mov	r1, r2
 80a2788:	6840      	ldr	r0, [r0, #4]
 80a278a:	f7ff bc59 	b.w	80a2040 <network_listening>

080a278e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a278e:	2200      	movs	r2, #0
 80a2790:	4611      	mov	r1, r2
 80a2792:	6840      	ldr	r0, [r0, #4]
 80a2794:	f7ff bc64 	b.w	80a2060 <network_get_listen_timeout>

080a2798 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2798:	2200      	movs	r2, #0
 80a279a:	6840      	ldr	r0, [r0, #4]
 80a279c:	f7ff bc58 	b.w	80a2050 <network_set_listen_timeout>

080a27a0 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a27a0:	2200      	movs	r2, #0
 80a27a2:	f081 0101 	eor.w	r1, r1, #1
 80a27a6:	6840      	ldr	r0, [r0, #4]
 80a27a8:	f7ff bc42 	b.w	80a2030 <network_listen>

080a27ac <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a27ac:	2300      	movs	r3, #0
 80a27ae:	461a      	mov	r2, r3
 80a27b0:	4619      	mov	r1, r3
 80a27b2:	6840      	ldr	r0, [r0, #4]
 80a27b4:	f7ff bc34 	b.w	80a2020 <network_off>

080a27b8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a27b8:	2200      	movs	r2, #0
 80a27ba:	4611      	mov	r1, r2
 80a27bc:	6840      	ldr	r0, [r0, #4]
 80a27be:	f7ff bc0f 	b.w	80a1fe0 <network_connecting>

080a27c2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a27c2:	2200      	movs	r2, #0
 80a27c4:	2102      	movs	r1, #2
 80a27c6:	6840      	ldr	r0, [r0, #4]
 80a27c8:	f7ff bc12 	b.w	80a1ff0 <network_disconnect>

080a27cc <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a27cc:	2300      	movs	r3, #0
 80a27ce:	461a      	mov	r2, r3
 80a27d0:	6840      	ldr	r0, [r0, #4]
 80a27d2:	f7ff bbfd 	b.w	80a1fd0 <network_connect>
	...

080a27d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a27d8:	4b02      	ldr	r3, [pc, #8]	; (80a27e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a27da:	2204      	movs	r2, #4
 80a27dc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a27de:	4a02      	ldr	r2, [pc, #8]	; (80a27e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a27e0:	601a      	str	r2, [r3, #0]
 80a27e2:	4770      	bx	lr
 80a27e4:	20000934 	.word	0x20000934
 80a27e8:	080a381c 	.word	0x080a381c

080a27ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a27ec:	2300      	movs	r3, #0
 80a27ee:	461a      	mov	r2, r3
 80a27f0:	6840      	ldr	r0, [r0, #4]
 80a27f2:	f7ff bbed 	b.w	80a1fd0 <network_connect>

080a27f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a27f6:	2200      	movs	r2, #0
 80a27f8:	2102      	movs	r1, #2
 80a27fa:	6840      	ldr	r0, [r0, #4]
 80a27fc:	f7ff bbf8 	b.w	80a1ff0 <network_disconnect>

080a2800 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2800:	2200      	movs	r2, #0
 80a2802:	4611      	mov	r1, r2
 80a2804:	6840      	ldr	r0, [r0, #4]
 80a2806:	f7ff bbeb 	b.w	80a1fe0 <network_connecting>

080a280a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a280a:	2200      	movs	r2, #0
 80a280c:	4611      	mov	r1, r2
 80a280e:	6840      	ldr	r0, [r0, #4]
 80a2810:	f7ff bbf6 	b.w	80a2000 <network_ready>

080a2814 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2814:	2300      	movs	r3, #0
 80a2816:	461a      	mov	r2, r3
 80a2818:	4619      	mov	r1, r3
 80a281a:	6840      	ldr	r0, [r0, #4]
 80a281c:	f7ff bbf8 	b.w	80a2010 <network_on>

080a2820 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2820:	2300      	movs	r3, #0
 80a2822:	461a      	mov	r2, r3
 80a2824:	4619      	mov	r1, r3
 80a2826:	6840      	ldr	r0, [r0, #4]
 80a2828:	f7ff bbfa 	b.w	80a2020 <network_off>

080a282c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a282c:	2200      	movs	r2, #0
 80a282e:	f081 0101 	eor.w	r1, r1, #1
 80a2832:	6840      	ldr	r0, [r0, #4]
 80a2834:	f7ff bbfc 	b.w	80a2030 <network_listen>

080a2838 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2838:	2200      	movs	r2, #0
 80a283a:	6840      	ldr	r0, [r0, #4]
 80a283c:	f7ff bc08 	b.w	80a2050 <network_set_listen_timeout>

080a2840 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2840:	2200      	movs	r2, #0
 80a2842:	4611      	mov	r1, r2
 80a2844:	6840      	ldr	r0, [r0, #4]
 80a2846:	f7ff bc0b 	b.w	80a2060 <network_get_listen_timeout>

080a284a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a284a:	2200      	movs	r2, #0
 80a284c:	4611      	mov	r1, r2
 80a284e:	6840      	ldr	r0, [r0, #4]
 80a2850:	f7ff bbf6 	b.w	80a2040 <network_listening>

080a2854 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2854:	b570      	push	{r4, r5, r6, lr}
 80a2856:	4616      	mov	r6, r2
 80a2858:	b08e      	sub	sp, #56	; 0x38
 80a285a:	4604      	mov	r4, r0
    IPAddress addr;
 80a285c:	a808      	add	r0, sp, #32
 80a285e:	f7ff fd8b 	bl	80a2378 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2862:	2211      	movs	r2, #17
 80a2864:	2100      	movs	r1, #0
 80a2866:	a803      	add	r0, sp, #12
 80a2868:	f000 fe77 	bl	80a355a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a286c:	4630      	mov	r0, r6
 80a286e:	f000 fedf 	bl	80a3630 <strlen>
 80a2872:	2500      	movs	r5, #0
 80a2874:	4b0a      	ldr	r3, [pc, #40]	; (80a28a0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2876:	9500      	str	r5, [sp, #0]
 80a2878:	b281      	uxth	r1, r0
 80a287a:	685b      	ldr	r3, [r3, #4]
 80a287c:	aa03      	add	r2, sp, #12
 80a287e:	4630      	mov	r0, r6
 80a2880:	f7ff fb7a 	bl	80a1f78 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2884:	b120      	cbz	r0, 80a2890 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2886:	4629      	mov	r1, r5
 80a2888:	4620      	mov	r0, r4
 80a288a:	f7ff fd95 	bl	80a23b8 <_ZN9IPAddressC1Em>
 80a288e:	e003      	b.n	80a2898 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2890:	a903      	add	r1, sp, #12
 80a2892:	4620      	mov	r0, r4
 80a2894:	f7ff fd7e 	bl	80a2394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2898:	4620      	mov	r0, r4
 80a289a:	b00e      	add	sp, #56	; 0x38
 80a289c:	bd70      	pop	{r4, r5, r6, pc}
 80a289e:	bf00      	nop
 80a28a0:	20000934 	.word	0x20000934

080a28a4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a28a4:	4b02      	ldr	r3, [pc, #8]	; (80a28b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a28a6:	4a03      	ldr	r2, [pc, #12]	; (80a28b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a28a8:	601a      	str	r2, [r3, #0]
 80a28aa:	2200      	movs	r2, #0
 80a28ac:	605a      	str	r2, [r3, #4]
 80a28ae:	4770      	bx	lr
 80a28b0:	2000093c 	.word	0x2000093c
 80a28b4:	080a3850 	.word	0x080a3850

080a28b8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a28b8:	b510      	push	{r4, lr}
 80a28ba:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a28bc:	6880      	ldr	r0, [r0, #8]
 80a28be:	b108      	cbz	r0, 80a28c4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a28c0:	f7ff faa8 	bl	80a1e14 <os_mutex_recursive_destroy>
 80a28c4:	4620      	mov	r0, r4
 80a28c6:	bd10      	pop	{r4, pc}

080a28c8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a28c8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a28ca:	4e1a      	ldr	r6, [pc, #104]	; (80a2934 <pinAvailable+0x6c>)
 80a28cc:	4604      	mov	r4, r0
 80a28ce:	6831      	ldr	r1, [r6, #0]
 80a28d0:	f011 0501 	ands.w	r5, r1, #1
 80a28d4:	d10f      	bne.n	80a28f6 <pinAvailable+0x2e>
 80a28d6:	4630      	mov	r0, r6
 80a28d8:	f7fd fbe1 	bl	80a009e <__cxa_guard_acquire>
 80a28dc:	b158      	cbz	r0, 80a28f6 <pinAvailable+0x2e>
 80a28de:	4629      	mov	r1, r5
 80a28e0:	4815      	ldr	r0, [pc, #84]	; (80a2938 <pinAvailable+0x70>)
 80a28e2:	f7ff fbdd 	bl	80a20a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a28e6:	4630      	mov	r0, r6
 80a28e8:	f7fd fbde 	bl	80a00a8 <__cxa_guard_release>
 80a28ec:	4a13      	ldr	r2, [pc, #76]	; (80a293c <pinAvailable+0x74>)
 80a28ee:	4914      	ldr	r1, [pc, #80]	; (80a2940 <pinAvailable+0x78>)
 80a28f0:	4811      	ldr	r0, [pc, #68]	; (80a2938 <pinAvailable+0x70>)
 80a28f2:	f000 f8bd 	bl	80a2a70 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a28f6:	4810      	ldr	r0, [pc, #64]	; (80a2938 <pinAvailable+0x70>)
 80a28f8:	f7ff fbe1 	bl	80a20be <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a28fc:	b128      	cbz	r0, 80a290a <pinAvailable+0x42>
 80a28fe:	f1a4 030d 	sub.w	r3, r4, #13
 80a2902:	2b02      	cmp	r3, #2
 80a2904:	d801      	bhi.n	80a290a <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a2906:	2000      	movs	r0, #0
 80a2908:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a290a:	f000 f88b 	bl	80a2a24 <_Z19__fetch_global_Wirev>
 80a290e:	f7ff ff03 	bl	80a2718 <_ZN7TwoWire9isEnabledEv>
 80a2912:	b108      	cbz	r0, 80a2918 <pinAvailable+0x50>
 80a2914:	2c01      	cmp	r4, #1
 80a2916:	d9f6      	bls.n	80a2906 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2918:	f7ff fe9a 	bl	80a2650 <_Z22__fetch_global_Serial1v>
 80a291c:	f7ff fe94 	bl	80a2648 <_ZN11USARTSerial9isEnabledEv>
 80a2920:	b118      	cbz	r0, 80a292a <pinAvailable+0x62>
 80a2922:	f1a4 0312 	sub.w	r3, r4, #18
 80a2926:	2b01      	cmp	r3, #1
 80a2928:	d9ed      	bls.n	80a2906 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a292a:	2c17      	cmp	r4, #23
 80a292c:	bf8c      	ite	hi
 80a292e:	2000      	movhi	r0, #0
 80a2930:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2932:	bd70      	pop	{r4, r5, r6, pc}
 80a2934:	20000944 	.word	0x20000944
 80a2938:	20000948 	.word	0x20000948
 80a293c:	20000068 	.word	0x20000068
 80a2940:	080a28b9 	.word	0x080a28b9

080a2944 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2944:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2946:	b538      	push	{r3, r4, r5, lr}
 80a2948:	4604      	mov	r4, r0
 80a294a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a294c:	d80a      	bhi.n	80a2964 <pinMode+0x20>
 80a294e:	29ff      	cmp	r1, #255	; 0xff
 80a2950:	d008      	beq.n	80a2964 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2952:	f7ff ffb9 	bl	80a28c8 <pinAvailable>
 80a2956:	b128      	cbz	r0, 80a2964 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2958:	4629      	mov	r1, r5
 80a295a:	4620      	mov	r0, r4
}
 80a295c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2960:	f7ff ba00 	b.w	80a1d64 <HAL_Pin_Mode>
 80a2964:	bd38      	pop	{r3, r4, r5, pc}

080a2966 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2966:	b538      	push	{r3, r4, r5, lr}
 80a2968:	4604      	mov	r4, r0
 80a296a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a296c:	f7ff fa02 	bl	80a1d74 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2970:	28ff      	cmp	r0, #255	; 0xff
 80a2972:	d010      	beq.n	80a2996 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2974:	2806      	cmp	r0, #6
 80a2976:	d804      	bhi.n	80a2982 <digitalWrite+0x1c>
 80a2978:	234d      	movs	r3, #77	; 0x4d
 80a297a:	fa23 f000 	lsr.w	r0, r3, r0
 80a297e:	07c3      	lsls	r3, r0, #31
 80a2980:	d409      	bmi.n	80a2996 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2982:	4620      	mov	r0, r4
 80a2984:	f7ff ffa0 	bl	80a28c8 <pinAvailable>
 80a2988:	b128      	cbz	r0, 80a2996 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a298a:	4629      	mov	r1, r5
 80a298c:	4620      	mov	r0, r4
}
 80a298e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2992:	f7ff b9f7 	b.w	80a1d84 <HAL_GPIO_Write>
 80a2996:	bd38      	pop	{r3, r4, r5, pc}

080a2998 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2998:	b510      	push	{r4, lr}
 80a299a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a299c:	f7ff f9ea 	bl	80a1d74 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a29a0:	3804      	subs	r0, #4
 80a29a2:	b2c0      	uxtb	r0, r0
 80a29a4:	2801      	cmp	r0, #1
 80a29a6:	d908      	bls.n	80a29ba <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a29a8:	4620      	mov	r0, r4
 80a29aa:	f7ff ff8d 	bl	80a28c8 <pinAvailable>
 80a29ae:	b120      	cbz	r0, 80a29ba <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a29b0:	4620      	mov	r0, r4
}
 80a29b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a29b6:	f7ff b9ed 	b.w	80a1d94 <HAL_GPIO_Read>
}
 80a29ba:	2000      	movs	r0, #0
 80a29bc:	bd10      	pop	{r4, pc}
	...

080a29c0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a29c0:	b513      	push	{r0, r1, r4, lr}
 80a29c2:	4c08      	ldr	r4, [pc, #32]	; (80a29e4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a29c4:	2300      	movs	r3, #0
 80a29c6:	461a      	mov	r2, r3
 80a29c8:	4619      	mov	r1, r3
 80a29ca:	9300      	str	r3, [sp, #0]
 80a29cc:	4620      	mov	r0, r4
 80a29ce:	f7ff fd09 	bl	80a23e4 <_ZN9IPAddressC1Ehhhh>
 80a29d2:	4620      	mov	r0, r4
 80a29d4:	4a04      	ldr	r2, [pc, #16]	; (80a29e8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a29d6:	4905      	ldr	r1, [pc, #20]	; (80a29ec <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a29d8:	b002      	add	sp, #8
 80a29da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a29de:	f000 b847 	b.w	80a2a70 <__aeabi_atexit>
 80a29e2:	bf00      	nop
 80a29e4:	20000958 	.word	0x20000958
 80a29e8:	20000068 	.word	0x20000068
 80a29ec:	080a2335 	.word	0x080a2335

080a29f0 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a29f0:	b570      	push	{r4, r5, r6, lr}
 80a29f2:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a29f4:	2514      	movs	r5, #20
 80a29f6:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a29f8:	4e09      	ldr	r6, [pc, #36]	; (80a2a20 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a29fa:	2100      	movs	r1, #0
 80a29fc:	f000 fdad 	bl	80a355a <memset>
 80a2a00:	8025      	strh	r5, [r4, #0]
 80a2a02:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2a04:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2a06:	60a5      	str	r5, [r4, #8]
 80a2a08:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2a0a:	4628      	mov	r0, r5
 80a2a0c:	f000 f840 	bl	80a2a90 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2a10:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2a12:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2a14:	4628      	mov	r0, r5
 80a2a16:	f000 f83b 	bl	80a2a90 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2a1a:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a2a1c:	4620      	mov	r0, r4
 80a2a1e:	bd70      	pop	{r4, r5, r6, pc}
 80a2a20:	080a387c 	.word	0x080a387c

080a2a24 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2a24:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2a26:	4d0e      	ldr	r5, [pc, #56]	; (80a2a60 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2a28:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2a2a:	6829      	ldr	r1, [r5, #0]
 80a2a2c:	f011 0401 	ands.w	r4, r1, #1
 80a2a30:	d113      	bne.n	80a2a5a <_Z19__fetch_global_Wirev+0x36>
 80a2a32:	4628      	mov	r0, r5
 80a2a34:	f7fd fb33 	bl	80a009e <__cxa_guard_acquire>
 80a2a38:	b178      	cbz	r0, 80a2a5a <_Z19__fetch_global_Wirev+0x36>
 80a2a3a:	a801      	add	r0, sp, #4
 80a2a3c:	f7ff ffd8 	bl	80a29f0 <_Z17acquireWireBufferv>
 80a2a40:	aa01      	add	r2, sp, #4
 80a2a42:	4621      	mov	r1, r4
 80a2a44:	4807      	ldr	r0, [pc, #28]	; (80a2a64 <_Z19__fetch_global_Wirev+0x40>)
 80a2a46:	f7ff fe55 	bl	80a26f4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a2a4a:	4628      	mov	r0, r5
 80a2a4c:	f7fd fb2c 	bl	80a00a8 <__cxa_guard_release>
 80a2a50:	4a05      	ldr	r2, [pc, #20]	; (80a2a68 <_Z19__fetch_global_Wirev+0x44>)
 80a2a52:	4906      	ldr	r1, [pc, #24]	; (80a2a6c <_Z19__fetch_global_Wirev+0x48>)
 80a2a54:	4803      	ldr	r0, [pc, #12]	; (80a2a64 <_Z19__fetch_global_Wirev+0x40>)
 80a2a56:	f000 f80b 	bl	80a2a70 <__aeabi_atexit>
	return wire;
}
 80a2a5a:	4802      	ldr	r0, [pc, #8]	; (80a2a64 <_Z19__fetch_global_Wirev+0x40>)
 80a2a5c:	b007      	add	sp, #28
 80a2a5e:	bd30      	pop	{r4, r5, pc}
 80a2a60:	20000970 	.word	0x20000970
 80a2a64:	20000974 	.word	0x20000974
 80a2a68:	20000068 	.word	0x20000068
 80a2a6c:	080a269d 	.word	0x080a269d

080a2a70 <__aeabi_atexit>:
 80a2a70:	460b      	mov	r3, r1
 80a2a72:	4601      	mov	r1, r0
 80a2a74:	4618      	mov	r0, r3
 80a2a76:	f000 bd57 	b.w	80a3528 <__cxa_atexit>
	...

080a2a7c <_ZSt15get_new_handlerv>:
 80a2a7c:	4b02      	ldr	r3, [pc, #8]	; (80a2a88 <_ZSt15get_new_handlerv+0xc>)
 80a2a7e:	6818      	ldr	r0, [r3, #0]
 80a2a80:	f3bf 8f5f 	dmb	sy
 80a2a84:	4770      	bx	lr
 80a2a86:	bf00      	nop
 80a2a88:	20000988 	.word	0x20000988

080a2a8c <_ZdlPvj>:
 80a2a8c:	f7fd bb05 	b.w	80a009a <_ZdlPv>

080a2a90 <_ZnajRKSt9nothrow_t>:
 80a2a90:	f000 b800 	b.w	80a2a94 <_ZnwjRKSt9nothrow_t>

080a2a94 <_ZnwjRKSt9nothrow_t>:
 80a2a94:	b510      	push	{r4, lr}
 80a2a96:	2800      	cmp	r0, #0
 80a2a98:	bf14      	ite	ne
 80a2a9a:	4604      	movne	r4, r0
 80a2a9c:	2401      	moveq	r4, #1
 80a2a9e:	4620      	mov	r0, r4
 80a2aa0:	f7ff faee 	bl	80a2080 <malloc>
 80a2aa4:	b920      	cbnz	r0, 80a2ab0 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2aa6:	f7ff ffe9 	bl	80a2a7c <_ZSt15get_new_handlerv>
 80a2aaa:	b108      	cbz	r0, 80a2ab0 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2aac:	4780      	blx	r0
 80a2aae:	e7f6      	b.n	80a2a9e <_ZnwjRKSt9nothrow_t+0xa>
 80a2ab0:	bd10      	pop	{r4, pc}
	...

080a2ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2ab4:	4b18      	ldr	r3, [pc, #96]	; (80a2b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2ab6:	681a      	ldr	r2, [r3, #0]
 80a2ab8:	07d1      	lsls	r1, r2, #31
 80a2aba:	bf5c      	itt	pl
 80a2abc:	2201      	movpl	r2, #1
 80a2abe:	601a      	strpl	r2, [r3, #0]
 80a2ac0:	4b16      	ldr	r3, [pc, #88]	; (80a2b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2ac2:	681a      	ldr	r2, [r3, #0]
 80a2ac4:	07d2      	lsls	r2, r2, #31
 80a2ac6:	bf5c      	itt	pl
 80a2ac8:	2201      	movpl	r2, #1
 80a2aca:	601a      	strpl	r2, [r3, #0]
 80a2acc:	4b14      	ldr	r3, [pc, #80]	; (80a2b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2ace:	681a      	ldr	r2, [r3, #0]
 80a2ad0:	07d0      	lsls	r0, r2, #31
 80a2ad2:	bf5c      	itt	pl
 80a2ad4:	2201      	movpl	r2, #1
 80a2ad6:	601a      	strpl	r2, [r3, #0]
 80a2ad8:	4b12      	ldr	r3, [pc, #72]	; (80a2b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2ada:	681a      	ldr	r2, [r3, #0]
 80a2adc:	07d1      	lsls	r1, r2, #31
 80a2ade:	bf5c      	itt	pl
 80a2ae0:	2201      	movpl	r2, #1
 80a2ae2:	601a      	strpl	r2, [r3, #0]
 80a2ae4:	4b10      	ldr	r3, [pc, #64]	; (80a2b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2ae6:	681a      	ldr	r2, [r3, #0]
 80a2ae8:	07d2      	lsls	r2, r2, #31
 80a2aea:	bf5c      	itt	pl
 80a2aec:	2201      	movpl	r2, #1
 80a2aee:	601a      	strpl	r2, [r3, #0]
 80a2af0:	4b0e      	ldr	r3, [pc, #56]	; (80a2b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2af2:	681a      	ldr	r2, [r3, #0]
 80a2af4:	07d0      	lsls	r0, r2, #31
 80a2af6:	bf5c      	itt	pl
 80a2af8:	2201      	movpl	r2, #1
 80a2afa:	601a      	strpl	r2, [r3, #0]
 80a2afc:	4b0c      	ldr	r3, [pc, #48]	; (80a2b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2afe:	681a      	ldr	r2, [r3, #0]
 80a2b00:	07d1      	lsls	r1, r2, #31
 80a2b02:	bf5c      	itt	pl
 80a2b04:	2201      	movpl	r2, #1
 80a2b06:	601a      	strpl	r2, [r3, #0]
 80a2b08:	4b0a      	ldr	r3, [pc, #40]	; (80a2b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2b0a:	681a      	ldr	r2, [r3, #0]
 80a2b0c:	07d2      	lsls	r2, r2, #31
 80a2b0e:	bf5c      	itt	pl
 80a2b10:	2201      	movpl	r2, #1
 80a2b12:	601a      	strpl	r2, [r3, #0]
 80a2b14:	4770      	bx	lr
 80a2b16:	bf00      	nop
 80a2b18:	200009a8 	.word	0x200009a8
 80a2b1c:	200009a4 	.word	0x200009a4
 80a2b20:	200009a0 	.word	0x200009a0
 80a2b24:	2000099c 	.word	0x2000099c
 80a2b28:	20000998 	.word	0x20000998
 80a2b2c:	20000994 	.word	0x20000994
 80a2b30:	20000990 	.word	0x20000990
 80a2b34:	2000098c 	.word	0x2000098c

080a2b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2b38:	4b24      	ldr	r3, [pc, #144]	; (80a2bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2b3a:	681a      	ldr	r2, [r3, #0]
 80a2b3c:	07d0      	lsls	r0, r2, #31
 80a2b3e:	bf5c      	itt	pl
 80a2b40:	2201      	movpl	r2, #1
 80a2b42:	601a      	strpl	r2, [r3, #0]
 80a2b44:	4b22      	ldr	r3, [pc, #136]	; (80a2bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2b46:	681a      	ldr	r2, [r3, #0]
 80a2b48:	07d1      	lsls	r1, r2, #31
 80a2b4a:	bf5c      	itt	pl
 80a2b4c:	2201      	movpl	r2, #1
 80a2b4e:	601a      	strpl	r2, [r3, #0]
 80a2b50:	4b20      	ldr	r3, [pc, #128]	; (80a2bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2b52:	681a      	ldr	r2, [r3, #0]
 80a2b54:	07d2      	lsls	r2, r2, #31
 80a2b56:	bf5c      	itt	pl
 80a2b58:	2201      	movpl	r2, #1
 80a2b5a:	601a      	strpl	r2, [r3, #0]
 80a2b5c:	4b1e      	ldr	r3, [pc, #120]	; (80a2bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2b5e:	681a      	ldr	r2, [r3, #0]
 80a2b60:	07d0      	lsls	r0, r2, #31
 80a2b62:	bf5c      	itt	pl
 80a2b64:	2201      	movpl	r2, #1
 80a2b66:	601a      	strpl	r2, [r3, #0]
 80a2b68:	4b1c      	ldr	r3, [pc, #112]	; (80a2bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2b6a:	681a      	ldr	r2, [r3, #0]
 80a2b6c:	07d1      	lsls	r1, r2, #31
 80a2b6e:	bf5c      	itt	pl
 80a2b70:	2201      	movpl	r2, #1
 80a2b72:	601a      	strpl	r2, [r3, #0]
 80a2b74:	4b1a      	ldr	r3, [pc, #104]	; (80a2be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2b76:	681a      	ldr	r2, [r3, #0]
 80a2b78:	07d2      	lsls	r2, r2, #31
 80a2b7a:	bf5c      	itt	pl
 80a2b7c:	2201      	movpl	r2, #1
 80a2b7e:	601a      	strpl	r2, [r3, #0]
 80a2b80:	4b18      	ldr	r3, [pc, #96]	; (80a2be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2b82:	681a      	ldr	r2, [r3, #0]
 80a2b84:	07d0      	lsls	r0, r2, #31
 80a2b86:	bf5c      	itt	pl
 80a2b88:	2201      	movpl	r2, #1
 80a2b8a:	601a      	strpl	r2, [r3, #0]
 80a2b8c:	4b16      	ldr	r3, [pc, #88]	; (80a2be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2b8e:	681a      	ldr	r2, [r3, #0]
 80a2b90:	07d1      	lsls	r1, r2, #31
 80a2b92:	bf5c      	itt	pl
 80a2b94:	2201      	movpl	r2, #1
 80a2b96:	601a      	strpl	r2, [r3, #0]
 80a2b98:	4b14      	ldr	r3, [pc, #80]	; (80a2bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2b9a:	681a      	ldr	r2, [r3, #0]
 80a2b9c:	07d2      	lsls	r2, r2, #31
 80a2b9e:	bf5c      	itt	pl
 80a2ba0:	2201      	movpl	r2, #1
 80a2ba2:	601a      	strpl	r2, [r3, #0]
 80a2ba4:	4b12      	ldr	r3, [pc, #72]	; (80a2bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2ba6:	681a      	ldr	r2, [r3, #0]
 80a2ba8:	07d0      	lsls	r0, r2, #31
 80a2baa:	bf5c      	itt	pl
 80a2bac:	2201      	movpl	r2, #1
 80a2bae:	601a      	strpl	r2, [r3, #0]
 80a2bb0:	4b10      	ldr	r3, [pc, #64]	; (80a2bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2bb2:	681a      	ldr	r2, [r3, #0]
 80a2bb4:	07d1      	lsls	r1, r2, #31
 80a2bb6:	bf5c      	itt	pl
 80a2bb8:	2201      	movpl	r2, #1
 80a2bba:	601a      	strpl	r2, [r3, #0]
 80a2bbc:	4b0e      	ldr	r3, [pc, #56]	; (80a2bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2bbe:	681a      	ldr	r2, [r3, #0]
 80a2bc0:	07d2      	lsls	r2, r2, #31
 80a2bc2:	bf5c      	itt	pl
 80a2bc4:	2201      	movpl	r2, #1
 80a2bc6:	601a      	strpl	r2, [r3, #0]
 80a2bc8:	4770      	bx	lr
 80a2bca:	bf00      	nop
 80a2bcc:	200009d8 	.word	0x200009d8
 80a2bd0:	200009d4 	.word	0x200009d4
 80a2bd4:	200009d0 	.word	0x200009d0
 80a2bd8:	200009cc 	.word	0x200009cc
 80a2bdc:	200009c8 	.word	0x200009c8
 80a2be0:	200009c4 	.word	0x200009c4
 80a2be4:	200009c0 	.word	0x200009c0
 80a2be8:	200009bc 	.word	0x200009bc
 80a2bec:	200009b8 	.word	0x200009b8
 80a2bf0:	200009b4 	.word	0x200009b4
 80a2bf4:	200009b0 	.word	0x200009b0
 80a2bf8:	200009ac 	.word	0x200009ac

080a2bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2bfc:	4b24      	ldr	r3, [pc, #144]	; (80a2c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2bfe:	681a      	ldr	r2, [r3, #0]
 80a2c00:	07d0      	lsls	r0, r2, #31
 80a2c02:	bf5c      	itt	pl
 80a2c04:	2201      	movpl	r2, #1
 80a2c06:	601a      	strpl	r2, [r3, #0]
 80a2c08:	4b22      	ldr	r3, [pc, #136]	; (80a2c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2c0a:	681a      	ldr	r2, [r3, #0]
 80a2c0c:	07d1      	lsls	r1, r2, #31
 80a2c0e:	bf5c      	itt	pl
 80a2c10:	2201      	movpl	r2, #1
 80a2c12:	601a      	strpl	r2, [r3, #0]
 80a2c14:	4b20      	ldr	r3, [pc, #128]	; (80a2c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2c16:	681a      	ldr	r2, [r3, #0]
 80a2c18:	07d2      	lsls	r2, r2, #31
 80a2c1a:	bf5c      	itt	pl
 80a2c1c:	2201      	movpl	r2, #1
 80a2c1e:	601a      	strpl	r2, [r3, #0]
 80a2c20:	4b1e      	ldr	r3, [pc, #120]	; (80a2c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2c22:	681a      	ldr	r2, [r3, #0]
 80a2c24:	07d0      	lsls	r0, r2, #31
 80a2c26:	bf5c      	itt	pl
 80a2c28:	2201      	movpl	r2, #1
 80a2c2a:	601a      	strpl	r2, [r3, #0]
 80a2c2c:	4b1c      	ldr	r3, [pc, #112]	; (80a2ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2c2e:	681a      	ldr	r2, [r3, #0]
 80a2c30:	07d1      	lsls	r1, r2, #31
 80a2c32:	bf5c      	itt	pl
 80a2c34:	2201      	movpl	r2, #1
 80a2c36:	601a      	strpl	r2, [r3, #0]
 80a2c38:	4b1a      	ldr	r3, [pc, #104]	; (80a2ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2c3a:	681a      	ldr	r2, [r3, #0]
 80a2c3c:	07d2      	lsls	r2, r2, #31
 80a2c3e:	bf5c      	itt	pl
 80a2c40:	2201      	movpl	r2, #1
 80a2c42:	601a      	strpl	r2, [r3, #0]
 80a2c44:	4b18      	ldr	r3, [pc, #96]	; (80a2ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2c46:	681a      	ldr	r2, [r3, #0]
 80a2c48:	07d0      	lsls	r0, r2, #31
 80a2c4a:	bf5c      	itt	pl
 80a2c4c:	2201      	movpl	r2, #1
 80a2c4e:	601a      	strpl	r2, [r3, #0]
 80a2c50:	4b16      	ldr	r3, [pc, #88]	; (80a2cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2c52:	681a      	ldr	r2, [r3, #0]
 80a2c54:	07d1      	lsls	r1, r2, #31
 80a2c56:	bf5c      	itt	pl
 80a2c58:	2201      	movpl	r2, #1
 80a2c5a:	601a      	strpl	r2, [r3, #0]
 80a2c5c:	4b14      	ldr	r3, [pc, #80]	; (80a2cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2c5e:	681a      	ldr	r2, [r3, #0]
 80a2c60:	07d2      	lsls	r2, r2, #31
 80a2c62:	bf5c      	itt	pl
 80a2c64:	2201      	movpl	r2, #1
 80a2c66:	601a      	strpl	r2, [r3, #0]
 80a2c68:	4b12      	ldr	r3, [pc, #72]	; (80a2cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2c6a:	681a      	ldr	r2, [r3, #0]
 80a2c6c:	07d0      	lsls	r0, r2, #31
 80a2c6e:	bf5c      	itt	pl
 80a2c70:	2201      	movpl	r2, #1
 80a2c72:	601a      	strpl	r2, [r3, #0]
 80a2c74:	4b10      	ldr	r3, [pc, #64]	; (80a2cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2c76:	681a      	ldr	r2, [r3, #0]
 80a2c78:	07d1      	lsls	r1, r2, #31
 80a2c7a:	bf5c      	itt	pl
 80a2c7c:	2201      	movpl	r2, #1
 80a2c7e:	601a      	strpl	r2, [r3, #0]
 80a2c80:	4b0e      	ldr	r3, [pc, #56]	; (80a2cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2c82:	681a      	ldr	r2, [r3, #0]
 80a2c84:	07d2      	lsls	r2, r2, #31
 80a2c86:	bf5c      	itt	pl
 80a2c88:	2201      	movpl	r2, #1
 80a2c8a:	601a      	strpl	r2, [r3, #0]
 80a2c8c:	4770      	bx	lr
 80a2c8e:	bf00      	nop
 80a2c90:	20000a08 	.word	0x20000a08
 80a2c94:	20000a04 	.word	0x20000a04
 80a2c98:	20000a00 	.word	0x20000a00
 80a2c9c:	200009fc 	.word	0x200009fc
 80a2ca0:	200009f8 	.word	0x200009f8
 80a2ca4:	200009f4 	.word	0x200009f4
 80a2ca8:	200009f0 	.word	0x200009f0
 80a2cac:	200009ec 	.word	0x200009ec
 80a2cb0:	200009e8 	.word	0x200009e8
 80a2cb4:	200009e4 	.word	0x200009e4
 80a2cb8:	200009e0 	.word	0x200009e0
 80a2cbc:	200009dc 	.word	0x200009dc

080a2cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2cc0:	4b18      	ldr	r3, [pc, #96]	; (80a2d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2cc2:	681a      	ldr	r2, [r3, #0]
 80a2cc4:	07d1      	lsls	r1, r2, #31
 80a2cc6:	bf5c      	itt	pl
 80a2cc8:	2201      	movpl	r2, #1
 80a2cca:	601a      	strpl	r2, [r3, #0]
 80a2ccc:	4b16      	ldr	r3, [pc, #88]	; (80a2d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2cce:	681a      	ldr	r2, [r3, #0]
 80a2cd0:	07d2      	lsls	r2, r2, #31
 80a2cd2:	bf5c      	itt	pl
 80a2cd4:	2201      	movpl	r2, #1
 80a2cd6:	601a      	strpl	r2, [r3, #0]
 80a2cd8:	4b14      	ldr	r3, [pc, #80]	; (80a2d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2cda:	681a      	ldr	r2, [r3, #0]
 80a2cdc:	07d0      	lsls	r0, r2, #31
 80a2cde:	bf5c      	itt	pl
 80a2ce0:	2201      	movpl	r2, #1
 80a2ce2:	601a      	strpl	r2, [r3, #0]
 80a2ce4:	4b12      	ldr	r3, [pc, #72]	; (80a2d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2ce6:	681a      	ldr	r2, [r3, #0]
 80a2ce8:	07d1      	lsls	r1, r2, #31
 80a2cea:	bf5c      	itt	pl
 80a2cec:	2201      	movpl	r2, #1
 80a2cee:	601a      	strpl	r2, [r3, #0]
 80a2cf0:	4b10      	ldr	r3, [pc, #64]	; (80a2d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2cf2:	681a      	ldr	r2, [r3, #0]
 80a2cf4:	07d2      	lsls	r2, r2, #31
 80a2cf6:	bf5c      	itt	pl
 80a2cf8:	2201      	movpl	r2, #1
 80a2cfa:	601a      	strpl	r2, [r3, #0]
 80a2cfc:	4b0e      	ldr	r3, [pc, #56]	; (80a2d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2cfe:	681a      	ldr	r2, [r3, #0]
 80a2d00:	07d0      	lsls	r0, r2, #31
 80a2d02:	bf5c      	itt	pl
 80a2d04:	2201      	movpl	r2, #1
 80a2d06:	601a      	strpl	r2, [r3, #0]
 80a2d08:	4b0c      	ldr	r3, [pc, #48]	; (80a2d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2d0a:	681a      	ldr	r2, [r3, #0]
 80a2d0c:	07d1      	lsls	r1, r2, #31
 80a2d0e:	bf5c      	itt	pl
 80a2d10:	2201      	movpl	r2, #1
 80a2d12:	601a      	strpl	r2, [r3, #0]
 80a2d14:	4b0a      	ldr	r3, [pc, #40]	; (80a2d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2d16:	681a      	ldr	r2, [r3, #0]
 80a2d18:	07d2      	lsls	r2, r2, #31
 80a2d1a:	bf5c      	itt	pl
 80a2d1c:	2201      	movpl	r2, #1
 80a2d1e:	601a      	strpl	r2, [r3, #0]
 80a2d20:	4770      	bx	lr
 80a2d22:	bf00      	nop
 80a2d24:	20000a28 	.word	0x20000a28
 80a2d28:	20000a24 	.word	0x20000a24
 80a2d2c:	20000a20 	.word	0x20000a20
 80a2d30:	20000a1c 	.word	0x20000a1c
 80a2d34:	20000a18 	.word	0x20000a18
 80a2d38:	20000a14 	.word	0x20000a14
 80a2d3c:	20000a10 	.word	0x20000a10
 80a2d40:	20000a0c 	.word	0x20000a0c

080a2d44 <__aeabi_drsub>:
 80a2d44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2d48:	e002      	b.n	80a2d50 <__adddf3>
 80a2d4a:	bf00      	nop

080a2d4c <__aeabi_dsub>:
 80a2d4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2d50 <__adddf3>:
 80a2d50:	b530      	push	{r4, r5, lr}
 80a2d52:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2d56:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2d5a:	ea94 0f05 	teq	r4, r5
 80a2d5e:	bf08      	it	eq
 80a2d60:	ea90 0f02 	teqeq	r0, r2
 80a2d64:	bf1f      	itttt	ne
 80a2d66:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2d6a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2d6e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2d72:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2d76:	f000 80e2 	beq.w	80a2f3e <__adddf3+0x1ee>
 80a2d7a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2d7e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2d82:	bfb8      	it	lt
 80a2d84:	426d      	neglt	r5, r5
 80a2d86:	dd0c      	ble.n	80a2da2 <__adddf3+0x52>
 80a2d88:	442c      	add	r4, r5
 80a2d8a:	ea80 0202 	eor.w	r2, r0, r2
 80a2d8e:	ea81 0303 	eor.w	r3, r1, r3
 80a2d92:	ea82 0000 	eor.w	r0, r2, r0
 80a2d96:	ea83 0101 	eor.w	r1, r3, r1
 80a2d9a:	ea80 0202 	eor.w	r2, r0, r2
 80a2d9e:	ea81 0303 	eor.w	r3, r1, r3
 80a2da2:	2d36      	cmp	r5, #54	; 0x36
 80a2da4:	bf88      	it	hi
 80a2da6:	bd30      	pophi	{r4, r5, pc}
 80a2da8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2dac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2db0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2db4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2db8:	d002      	beq.n	80a2dc0 <__adddf3+0x70>
 80a2dba:	4240      	negs	r0, r0
 80a2dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2dc0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2dc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2dc8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2dcc:	d002      	beq.n	80a2dd4 <__adddf3+0x84>
 80a2dce:	4252      	negs	r2, r2
 80a2dd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2dd4:	ea94 0f05 	teq	r4, r5
 80a2dd8:	f000 80a7 	beq.w	80a2f2a <__adddf3+0x1da>
 80a2ddc:	f1a4 0401 	sub.w	r4, r4, #1
 80a2de0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2de4:	db0d      	blt.n	80a2e02 <__adddf3+0xb2>
 80a2de6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2dea:	fa22 f205 	lsr.w	r2, r2, r5
 80a2dee:	1880      	adds	r0, r0, r2
 80a2df0:	f141 0100 	adc.w	r1, r1, #0
 80a2df4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2df8:	1880      	adds	r0, r0, r2
 80a2dfa:	fa43 f305 	asr.w	r3, r3, r5
 80a2dfe:	4159      	adcs	r1, r3
 80a2e00:	e00e      	b.n	80a2e20 <__adddf3+0xd0>
 80a2e02:	f1a5 0520 	sub.w	r5, r5, #32
 80a2e06:	f10e 0e20 	add.w	lr, lr, #32
 80a2e0a:	2a01      	cmp	r2, #1
 80a2e0c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2e10:	bf28      	it	cs
 80a2e12:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2e16:	fa43 f305 	asr.w	r3, r3, r5
 80a2e1a:	18c0      	adds	r0, r0, r3
 80a2e1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2e20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2e24:	d507      	bpl.n	80a2e36 <__adddf3+0xe6>
 80a2e26:	f04f 0e00 	mov.w	lr, #0
 80a2e2a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2e2e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2e32:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2e36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2e3a:	d31b      	bcc.n	80a2e74 <__adddf3+0x124>
 80a2e3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2e40:	d30c      	bcc.n	80a2e5c <__adddf3+0x10c>
 80a2e42:	0849      	lsrs	r1, r1, #1
 80a2e44:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2e48:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2e4c:	f104 0401 	add.w	r4, r4, #1
 80a2e50:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2e54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2e58:	f080 809a 	bcs.w	80a2f90 <__adddf3+0x240>
 80a2e5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2e60:	bf08      	it	eq
 80a2e62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2e66:	f150 0000 	adcs.w	r0, r0, #0
 80a2e6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2e6e:	ea41 0105 	orr.w	r1, r1, r5
 80a2e72:	bd30      	pop	{r4, r5, pc}
 80a2e74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2e78:	4140      	adcs	r0, r0
 80a2e7a:	eb41 0101 	adc.w	r1, r1, r1
 80a2e7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2e82:	f1a4 0401 	sub.w	r4, r4, #1
 80a2e86:	d1e9      	bne.n	80a2e5c <__adddf3+0x10c>
 80a2e88:	f091 0f00 	teq	r1, #0
 80a2e8c:	bf04      	itt	eq
 80a2e8e:	4601      	moveq	r1, r0
 80a2e90:	2000      	moveq	r0, #0
 80a2e92:	fab1 f381 	clz	r3, r1
 80a2e96:	bf08      	it	eq
 80a2e98:	3320      	addeq	r3, #32
 80a2e9a:	f1a3 030b 	sub.w	r3, r3, #11
 80a2e9e:	f1b3 0220 	subs.w	r2, r3, #32
 80a2ea2:	da0c      	bge.n	80a2ebe <__adddf3+0x16e>
 80a2ea4:	320c      	adds	r2, #12
 80a2ea6:	dd08      	ble.n	80a2eba <__adddf3+0x16a>
 80a2ea8:	f102 0c14 	add.w	ip, r2, #20
 80a2eac:	f1c2 020c 	rsb	r2, r2, #12
 80a2eb0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2eb4:	fa21 f102 	lsr.w	r1, r1, r2
 80a2eb8:	e00c      	b.n	80a2ed4 <__adddf3+0x184>
 80a2eba:	f102 0214 	add.w	r2, r2, #20
 80a2ebe:	bfd8      	it	le
 80a2ec0:	f1c2 0c20 	rsble	ip, r2, #32
 80a2ec4:	fa01 f102 	lsl.w	r1, r1, r2
 80a2ec8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2ecc:	bfdc      	itt	le
 80a2ece:	ea41 010c 	orrle.w	r1, r1, ip
 80a2ed2:	4090      	lslle	r0, r2
 80a2ed4:	1ae4      	subs	r4, r4, r3
 80a2ed6:	bfa2      	ittt	ge
 80a2ed8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2edc:	4329      	orrge	r1, r5
 80a2ede:	bd30      	popge	{r4, r5, pc}
 80a2ee0:	ea6f 0404 	mvn.w	r4, r4
 80a2ee4:	3c1f      	subs	r4, #31
 80a2ee6:	da1c      	bge.n	80a2f22 <__adddf3+0x1d2>
 80a2ee8:	340c      	adds	r4, #12
 80a2eea:	dc0e      	bgt.n	80a2f0a <__adddf3+0x1ba>
 80a2eec:	f104 0414 	add.w	r4, r4, #20
 80a2ef0:	f1c4 0220 	rsb	r2, r4, #32
 80a2ef4:	fa20 f004 	lsr.w	r0, r0, r4
 80a2ef8:	fa01 f302 	lsl.w	r3, r1, r2
 80a2efc:	ea40 0003 	orr.w	r0, r0, r3
 80a2f00:	fa21 f304 	lsr.w	r3, r1, r4
 80a2f04:	ea45 0103 	orr.w	r1, r5, r3
 80a2f08:	bd30      	pop	{r4, r5, pc}
 80a2f0a:	f1c4 040c 	rsb	r4, r4, #12
 80a2f0e:	f1c4 0220 	rsb	r2, r4, #32
 80a2f12:	fa20 f002 	lsr.w	r0, r0, r2
 80a2f16:	fa01 f304 	lsl.w	r3, r1, r4
 80a2f1a:	ea40 0003 	orr.w	r0, r0, r3
 80a2f1e:	4629      	mov	r1, r5
 80a2f20:	bd30      	pop	{r4, r5, pc}
 80a2f22:	fa21 f004 	lsr.w	r0, r1, r4
 80a2f26:	4629      	mov	r1, r5
 80a2f28:	bd30      	pop	{r4, r5, pc}
 80a2f2a:	f094 0f00 	teq	r4, #0
 80a2f2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2f32:	bf06      	itte	eq
 80a2f34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2f38:	3401      	addeq	r4, #1
 80a2f3a:	3d01      	subne	r5, #1
 80a2f3c:	e74e      	b.n	80a2ddc <__adddf3+0x8c>
 80a2f3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2f42:	bf18      	it	ne
 80a2f44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2f48:	d029      	beq.n	80a2f9e <__adddf3+0x24e>
 80a2f4a:	ea94 0f05 	teq	r4, r5
 80a2f4e:	bf08      	it	eq
 80a2f50:	ea90 0f02 	teqeq	r0, r2
 80a2f54:	d005      	beq.n	80a2f62 <__adddf3+0x212>
 80a2f56:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2f5a:	bf04      	itt	eq
 80a2f5c:	4619      	moveq	r1, r3
 80a2f5e:	4610      	moveq	r0, r2
 80a2f60:	bd30      	pop	{r4, r5, pc}
 80a2f62:	ea91 0f03 	teq	r1, r3
 80a2f66:	bf1e      	ittt	ne
 80a2f68:	2100      	movne	r1, #0
 80a2f6a:	2000      	movne	r0, #0
 80a2f6c:	bd30      	popne	{r4, r5, pc}
 80a2f6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2f72:	d105      	bne.n	80a2f80 <__adddf3+0x230>
 80a2f74:	0040      	lsls	r0, r0, #1
 80a2f76:	4149      	adcs	r1, r1
 80a2f78:	bf28      	it	cs
 80a2f7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2f7e:	bd30      	pop	{r4, r5, pc}
 80a2f80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2f84:	bf3c      	itt	cc
 80a2f86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2f8a:	bd30      	popcc	{r4, r5, pc}
 80a2f8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2f90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2f94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2f98:	f04f 0000 	mov.w	r0, #0
 80a2f9c:	bd30      	pop	{r4, r5, pc}
 80a2f9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2fa2:	bf1a      	itte	ne
 80a2fa4:	4619      	movne	r1, r3
 80a2fa6:	4610      	movne	r0, r2
 80a2fa8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2fac:	bf1c      	itt	ne
 80a2fae:	460b      	movne	r3, r1
 80a2fb0:	4602      	movne	r2, r0
 80a2fb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2fb6:	bf06      	itte	eq
 80a2fb8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2fbc:	ea91 0f03 	teqeq	r1, r3
 80a2fc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2fc4:	bd30      	pop	{r4, r5, pc}
 80a2fc6:	bf00      	nop

080a2fc8 <__aeabi_ui2d>:
 80a2fc8:	f090 0f00 	teq	r0, #0
 80a2fcc:	bf04      	itt	eq
 80a2fce:	2100      	moveq	r1, #0
 80a2fd0:	4770      	bxeq	lr
 80a2fd2:	b530      	push	{r4, r5, lr}
 80a2fd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2fd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2fdc:	f04f 0500 	mov.w	r5, #0
 80a2fe0:	f04f 0100 	mov.w	r1, #0
 80a2fe4:	e750      	b.n	80a2e88 <__adddf3+0x138>
 80a2fe6:	bf00      	nop

080a2fe8 <__aeabi_i2d>:
 80a2fe8:	f090 0f00 	teq	r0, #0
 80a2fec:	bf04      	itt	eq
 80a2fee:	2100      	moveq	r1, #0
 80a2ff0:	4770      	bxeq	lr
 80a2ff2:	b530      	push	{r4, r5, lr}
 80a2ff4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2ff8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2ffc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3000:	bf48      	it	mi
 80a3002:	4240      	negmi	r0, r0
 80a3004:	f04f 0100 	mov.w	r1, #0
 80a3008:	e73e      	b.n	80a2e88 <__adddf3+0x138>
 80a300a:	bf00      	nop

080a300c <__aeabi_f2d>:
 80a300c:	0042      	lsls	r2, r0, #1
 80a300e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3012:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3016:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a301a:	bf1f      	itttt	ne
 80a301c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3020:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3024:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3028:	4770      	bxne	lr
 80a302a:	f092 0f00 	teq	r2, #0
 80a302e:	bf14      	ite	ne
 80a3030:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3034:	4770      	bxeq	lr
 80a3036:	b530      	push	{r4, r5, lr}
 80a3038:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a303c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3040:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3044:	e720      	b.n	80a2e88 <__adddf3+0x138>
 80a3046:	bf00      	nop

080a3048 <__aeabi_ul2d>:
 80a3048:	ea50 0201 	orrs.w	r2, r0, r1
 80a304c:	bf08      	it	eq
 80a304e:	4770      	bxeq	lr
 80a3050:	b530      	push	{r4, r5, lr}
 80a3052:	f04f 0500 	mov.w	r5, #0
 80a3056:	e00a      	b.n	80a306e <__aeabi_l2d+0x16>

080a3058 <__aeabi_l2d>:
 80a3058:	ea50 0201 	orrs.w	r2, r0, r1
 80a305c:	bf08      	it	eq
 80a305e:	4770      	bxeq	lr
 80a3060:	b530      	push	{r4, r5, lr}
 80a3062:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3066:	d502      	bpl.n	80a306e <__aeabi_l2d+0x16>
 80a3068:	4240      	negs	r0, r0
 80a306a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a306e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3072:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3076:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a307a:	f43f aedc 	beq.w	80a2e36 <__adddf3+0xe6>
 80a307e:	f04f 0203 	mov.w	r2, #3
 80a3082:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3086:	bf18      	it	ne
 80a3088:	3203      	addne	r2, #3
 80a308a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a308e:	bf18      	it	ne
 80a3090:	3203      	addne	r2, #3
 80a3092:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3096:	f1c2 0320 	rsb	r3, r2, #32
 80a309a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a309e:	fa20 f002 	lsr.w	r0, r0, r2
 80a30a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a30a6:	ea40 000e 	orr.w	r0, r0, lr
 80a30aa:	fa21 f102 	lsr.w	r1, r1, r2
 80a30ae:	4414      	add	r4, r2
 80a30b0:	e6c1      	b.n	80a2e36 <__adddf3+0xe6>
 80a30b2:	bf00      	nop

080a30b4 <__aeabi_dmul>:
 80a30b4:	b570      	push	{r4, r5, r6, lr}
 80a30b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a30ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a30be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a30c2:	bf1d      	ittte	ne
 80a30c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a30c8:	ea94 0f0c 	teqne	r4, ip
 80a30cc:	ea95 0f0c 	teqne	r5, ip
 80a30d0:	f000 f8de 	bleq	80a3290 <__aeabi_dmul+0x1dc>
 80a30d4:	442c      	add	r4, r5
 80a30d6:	ea81 0603 	eor.w	r6, r1, r3
 80a30da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a30de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a30e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a30e6:	bf18      	it	ne
 80a30e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a30ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a30f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a30f4:	d038      	beq.n	80a3168 <__aeabi_dmul+0xb4>
 80a30f6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a30fa:	f04f 0500 	mov.w	r5, #0
 80a30fe:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a3102:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3106:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a310a:	f04f 0600 	mov.w	r6, #0
 80a310e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3112:	f09c 0f00 	teq	ip, #0
 80a3116:	bf18      	it	ne
 80a3118:	f04e 0e01 	orrne.w	lr, lr, #1
 80a311c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3120:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3124:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3128:	d204      	bcs.n	80a3134 <__aeabi_dmul+0x80>
 80a312a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a312e:	416d      	adcs	r5, r5
 80a3130:	eb46 0606 	adc.w	r6, r6, r6
 80a3134:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3138:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a313c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3140:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3144:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3148:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a314c:	bf88      	it	hi
 80a314e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3152:	d81e      	bhi.n	80a3192 <__aeabi_dmul+0xde>
 80a3154:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3158:	bf08      	it	eq
 80a315a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a315e:	f150 0000 	adcs.w	r0, r0, #0
 80a3162:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3166:	bd70      	pop	{r4, r5, r6, pc}
 80a3168:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a316c:	ea46 0101 	orr.w	r1, r6, r1
 80a3170:	ea40 0002 	orr.w	r0, r0, r2
 80a3174:	ea81 0103 	eor.w	r1, r1, r3
 80a3178:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a317c:	bfc2      	ittt	gt
 80a317e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3182:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3186:	bd70      	popgt	{r4, r5, r6, pc}
 80a3188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a318c:	f04f 0e00 	mov.w	lr, #0
 80a3190:	3c01      	subs	r4, #1
 80a3192:	f300 80ab 	bgt.w	80a32ec <__aeabi_dmul+0x238>
 80a3196:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a319a:	bfde      	ittt	le
 80a319c:	2000      	movle	r0, #0
 80a319e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a31a2:	bd70      	pople	{r4, r5, r6, pc}
 80a31a4:	f1c4 0400 	rsb	r4, r4, #0
 80a31a8:	3c20      	subs	r4, #32
 80a31aa:	da35      	bge.n	80a3218 <__aeabi_dmul+0x164>
 80a31ac:	340c      	adds	r4, #12
 80a31ae:	dc1b      	bgt.n	80a31e8 <__aeabi_dmul+0x134>
 80a31b0:	f104 0414 	add.w	r4, r4, #20
 80a31b4:	f1c4 0520 	rsb	r5, r4, #32
 80a31b8:	fa00 f305 	lsl.w	r3, r0, r5
 80a31bc:	fa20 f004 	lsr.w	r0, r0, r4
 80a31c0:	fa01 f205 	lsl.w	r2, r1, r5
 80a31c4:	ea40 0002 	orr.w	r0, r0, r2
 80a31c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a31cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a31d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a31d4:	fa21 f604 	lsr.w	r6, r1, r4
 80a31d8:	eb42 0106 	adc.w	r1, r2, r6
 80a31dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a31e0:	bf08      	it	eq
 80a31e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a31e6:	bd70      	pop	{r4, r5, r6, pc}
 80a31e8:	f1c4 040c 	rsb	r4, r4, #12
 80a31ec:	f1c4 0520 	rsb	r5, r4, #32
 80a31f0:	fa00 f304 	lsl.w	r3, r0, r4
 80a31f4:	fa20 f005 	lsr.w	r0, r0, r5
 80a31f8:	fa01 f204 	lsl.w	r2, r1, r4
 80a31fc:	ea40 0002 	orr.w	r0, r0, r2
 80a3200:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3204:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3208:	f141 0100 	adc.w	r1, r1, #0
 80a320c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3210:	bf08      	it	eq
 80a3212:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3216:	bd70      	pop	{r4, r5, r6, pc}
 80a3218:	f1c4 0520 	rsb	r5, r4, #32
 80a321c:	fa00 f205 	lsl.w	r2, r0, r5
 80a3220:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3224:	fa20 f304 	lsr.w	r3, r0, r4
 80a3228:	fa01 f205 	lsl.w	r2, r1, r5
 80a322c:	ea43 0302 	orr.w	r3, r3, r2
 80a3230:	fa21 f004 	lsr.w	r0, r1, r4
 80a3234:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3238:	fa21 f204 	lsr.w	r2, r1, r4
 80a323c:	ea20 0002 	bic.w	r0, r0, r2
 80a3240:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3248:	bf08      	it	eq
 80a324a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a324e:	bd70      	pop	{r4, r5, r6, pc}
 80a3250:	f094 0f00 	teq	r4, #0
 80a3254:	d10f      	bne.n	80a3276 <__aeabi_dmul+0x1c2>
 80a3256:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a325a:	0040      	lsls	r0, r0, #1
 80a325c:	eb41 0101 	adc.w	r1, r1, r1
 80a3260:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3264:	bf08      	it	eq
 80a3266:	3c01      	subeq	r4, #1
 80a3268:	d0f7      	beq.n	80a325a <__aeabi_dmul+0x1a6>
 80a326a:	ea41 0106 	orr.w	r1, r1, r6
 80a326e:	f095 0f00 	teq	r5, #0
 80a3272:	bf18      	it	ne
 80a3274:	4770      	bxne	lr
 80a3276:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a327a:	0052      	lsls	r2, r2, #1
 80a327c:	eb43 0303 	adc.w	r3, r3, r3
 80a3280:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3284:	bf08      	it	eq
 80a3286:	3d01      	subeq	r5, #1
 80a3288:	d0f7      	beq.n	80a327a <__aeabi_dmul+0x1c6>
 80a328a:	ea43 0306 	orr.w	r3, r3, r6
 80a328e:	4770      	bx	lr
 80a3290:	ea94 0f0c 	teq	r4, ip
 80a3294:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3298:	bf18      	it	ne
 80a329a:	ea95 0f0c 	teqne	r5, ip
 80a329e:	d00c      	beq.n	80a32ba <__aeabi_dmul+0x206>
 80a32a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a32a4:	bf18      	it	ne
 80a32a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a32aa:	d1d1      	bne.n	80a3250 <__aeabi_dmul+0x19c>
 80a32ac:	ea81 0103 	eor.w	r1, r1, r3
 80a32b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a32b4:	f04f 0000 	mov.w	r0, #0
 80a32b8:	bd70      	pop	{r4, r5, r6, pc}
 80a32ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a32be:	bf06      	itte	eq
 80a32c0:	4610      	moveq	r0, r2
 80a32c2:	4619      	moveq	r1, r3
 80a32c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a32c8:	d019      	beq.n	80a32fe <__aeabi_dmul+0x24a>
 80a32ca:	ea94 0f0c 	teq	r4, ip
 80a32ce:	d102      	bne.n	80a32d6 <__aeabi_dmul+0x222>
 80a32d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a32d4:	d113      	bne.n	80a32fe <__aeabi_dmul+0x24a>
 80a32d6:	ea95 0f0c 	teq	r5, ip
 80a32da:	d105      	bne.n	80a32e8 <__aeabi_dmul+0x234>
 80a32dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a32e0:	bf1c      	itt	ne
 80a32e2:	4610      	movne	r0, r2
 80a32e4:	4619      	movne	r1, r3
 80a32e6:	d10a      	bne.n	80a32fe <__aeabi_dmul+0x24a>
 80a32e8:	ea81 0103 	eor.w	r1, r1, r3
 80a32ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a32f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a32f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a32f8:	f04f 0000 	mov.w	r0, #0
 80a32fc:	bd70      	pop	{r4, r5, r6, pc}
 80a32fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3302:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3306:	bd70      	pop	{r4, r5, r6, pc}

080a3308 <__aeabi_ddiv>:
 80a3308:	b570      	push	{r4, r5, r6, lr}
 80a330a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a330e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3312:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3316:	bf1d      	ittte	ne
 80a3318:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a331c:	ea94 0f0c 	teqne	r4, ip
 80a3320:	ea95 0f0c 	teqne	r5, ip
 80a3324:	f000 f8a7 	bleq	80a3476 <__aeabi_ddiv+0x16e>
 80a3328:	eba4 0405 	sub.w	r4, r4, r5
 80a332c:	ea81 0e03 	eor.w	lr, r1, r3
 80a3330:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3334:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3338:	f000 8088 	beq.w	80a344c <__aeabi_ddiv+0x144>
 80a333c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3340:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3344:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3348:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a334c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3350:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3354:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3358:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a335c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3360:	429d      	cmp	r5, r3
 80a3362:	bf08      	it	eq
 80a3364:	4296      	cmpeq	r6, r2
 80a3366:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a336a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a336e:	d202      	bcs.n	80a3376 <__aeabi_ddiv+0x6e>
 80a3370:	085b      	lsrs	r3, r3, #1
 80a3372:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3376:	1ab6      	subs	r6, r6, r2
 80a3378:	eb65 0503 	sbc.w	r5, r5, r3
 80a337c:	085b      	lsrs	r3, r3, #1
 80a337e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3382:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3386:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a338a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a338e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3392:	bf22      	ittt	cs
 80a3394:	1ab6      	subcs	r6, r6, r2
 80a3396:	4675      	movcs	r5, lr
 80a3398:	ea40 000c 	orrcs.w	r0, r0, ip
 80a339c:	085b      	lsrs	r3, r3, #1
 80a339e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a33a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a33a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a33aa:	bf22      	ittt	cs
 80a33ac:	1ab6      	subcs	r6, r6, r2
 80a33ae:	4675      	movcs	r5, lr
 80a33b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a33b4:	085b      	lsrs	r3, r3, #1
 80a33b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a33ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80a33be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a33c2:	bf22      	ittt	cs
 80a33c4:	1ab6      	subcs	r6, r6, r2
 80a33c6:	4675      	movcs	r5, lr
 80a33c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a33cc:	085b      	lsrs	r3, r3, #1
 80a33ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80a33d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a33d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a33da:	bf22      	ittt	cs
 80a33dc:	1ab6      	subcs	r6, r6, r2
 80a33de:	4675      	movcs	r5, lr
 80a33e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a33e4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a33e8:	d018      	beq.n	80a341c <__aeabi_ddiv+0x114>
 80a33ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a33ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a33f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a33f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a33fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a33fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3402:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3406:	d1c0      	bne.n	80a338a <__aeabi_ddiv+0x82>
 80a3408:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a340c:	d10b      	bne.n	80a3426 <__aeabi_ddiv+0x11e>
 80a340e:	ea41 0100 	orr.w	r1, r1, r0
 80a3412:	f04f 0000 	mov.w	r0, #0
 80a3416:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a341a:	e7b6      	b.n	80a338a <__aeabi_ddiv+0x82>
 80a341c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3420:	bf04      	itt	eq
 80a3422:	4301      	orreq	r1, r0
 80a3424:	2000      	moveq	r0, #0
 80a3426:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a342a:	bf88      	it	hi
 80a342c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3430:	f63f aeaf 	bhi.w	80a3192 <__aeabi_dmul+0xde>
 80a3434:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3438:	bf04      	itt	eq
 80a343a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a343e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3442:	f150 0000 	adcs.w	r0, r0, #0
 80a3446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a344a:	bd70      	pop	{r4, r5, r6, pc}
 80a344c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3450:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3454:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3458:	bfc2      	ittt	gt
 80a345a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a345e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3462:	bd70      	popgt	{r4, r5, r6, pc}
 80a3464:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3468:	f04f 0e00 	mov.w	lr, #0
 80a346c:	3c01      	subs	r4, #1
 80a346e:	e690      	b.n	80a3192 <__aeabi_dmul+0xde>
 80a3470:	ea45 0e06 	orr.w	lr, r5, r6
 80a3474:	e68d      	b.n	80a3192 <__aeabi_dmul+0xde>
 80a3476:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a347a:	ea94 0f0c 	teq	r4, ip
 80a347e:	bf08      	it	eq
 80a3480:	ea95 0f0c 	teqeq	r5, ip
 80a3484:	f43f af3b 	beq.w	80a32fe <__aeabi_dmul+0x24a>
 80a3488:	ea94 0f0c 	teq	r4, ip
 80a348c:	d10a      	bne.n	80a34a4 <__aeabi_ddiv+0x19c>
 80a348e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3492:	f47f af34 	bne.w	80a32fe <__aeabi_dmul+0x24a>
 80a3496:	ea95 0f0c 	teq	r5, ip
 80a349a:	f47f af25 	bne.w	80a32e8 <__aeabi_dmul+0x234>
 80a349e:	4610      	mov	r0, r2
 80a34a0:	4619      	mov	r1, r3
 80a34a2:	e72c      	b.n	80a32fe <__aeabi_dmul+0x24a>
 80a34a4:	ea95 0f0c 	teq	r5, ip
 80a34a8:	d106      	bne.n	80a34b8 <__aeabi_ddiv+0x1b0>
 80a34aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a34ae:	f43f aefd 	beq.w	80a32ac <__aeabi_dmul+0x1f8>
 80a34b2:	4610      	mov	r0, r2
 80a34b4:	4619      	mov	r1, r3
 80a34b6:	e722      	b.n	80a32fe <__aeabi_dmul+0x24a>
 80a34b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a34bc:	bf18      	it	ne
 80a34be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a34c2:	f47f aec5 	bne.w	80a3250 <__aeabi_dmul+0x19c>
 80a34c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a34ca:	f47f af0d 	bne.w	80a32e8 <__aeabi_dmul+0x234>
 80a34ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a34d2:	f47f aeeb 	bne.w	80a32ac <__aeabi_dmul+0x1f8>
 80a34d6:	e712      	b.n	80a32fe <__aeabi_dmul+0x24a>

080a34d8 <__aeabi_d2iz>:
 80a34d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a34dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a34e0:	d215      	bcs.n	80a350e <__aeabi_d2iz+0x36>
 80a34e2:	d511      	bpl.n	80a3508 <__aeabi_d2iz+0x30>
 80a34e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a34e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a34ec:	d912      	bls.n	80a3514 <__aeabi_d2iz+0x3c>
 80a34ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a34f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a34f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a34fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a34fe:	fa23 f002 	lsr.w	r0, r3, r2
 80a3502:	bf18      	it	ne
 80a3504:	4240      	negne	r0, r0
 80a3506:	4770      	bx	lr
 80a3508:	f04f 0000 	mov.w	r0, #0
 80a350c:	4770      	bx	lr
 80a350e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3512:	d105      	bne.n	80a3520 <__aeabi_d2iz+0x48>
 80a3514:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3518:	bf08      	it	eq
 80a351a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a351e:	4770      	bx	lr
 80a3520:	f04f 0000 	mov.w	r0, #0
 80a3524:	4770      	bx	lr
 80a3526:	bf00      	nop

080a3528 <__cxa_atexit>:
 80a3528:	b510      	push	{r4, lr}
 80a352a:	4c05      	ldr	r4, [pc, #20]	; (80a3540 <__cxa_atexit+0x18>)
 80a352c:	4613      	mov	r3, r2
 80a352e:	b12c      	cbz	r4, 80a353c <__cxa_atexit+0x14>
 80a3530:	460a      	mov	r2, r1
 80a3532:	4601      	mov	r1, r0
 80a3534:	2002      	movs	r0, #2
 80a3536:	f3af 8000 	nop.w
 80a353a:	bd10      	pop	{r4, pc}
 80a353c:	4620      	mov	r0, r4
 80a353e:	bd10      	pop	{r4, pc}
 80a3540:	00000000 	.word	0x00000000

080a3544 <memcpy>:
 80a3544:	b510      	push	{r4, lr}
 80a3546:	1e43      	subs	r3, r0, #1
 80a3548:	440a      	add	r2, r1
 80a354a:	4291      	cmp	r1, r2
 80a354c:	d004      	beq.n	80a3558 <memcpy+0x14>
 80a354e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3552:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3556:	e7f8      	b.n	80a354a <memcpy+0x6>
 80a3558:	bd10      	pop	{r4, pc}

080a355a <memset>:
 80a355a:	4603      	mov	r3, r0
 80a355c:	4402      	add	r2, r0
 80a355e:	4293      	cmp	r3, r2
 80a3560:	d002      	beq.n	80a3568 <memset+0xe>
 80a3562:	f803 1b01 	strb.w	r1, [r3], #1
 80a3566:	e7fa      	b.n	80a355e <memset+0x4>
 80a3568:	4770      	bx	lr
	...

080a356c <srand>:
 80a356c:	b538      	push	{r3, r4, r5, lr}
 80a356e:	4b12      	ldr	r3, [pc, #72]	; (80a35b8 <srand+0x4c>)
 80a3570:	4605      	mov	r5, r0
 80a3572:	681c      	ldr	r4, [r3, #0]
 80a3574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3576:	b9d3      	cbnz	r3, 80a35ae <srand+0x42>
 80a3578:	2018      	movs	r0, #24
 80a357a:	f7fe fd81 	bl	80a2080 <malloc>
 80a357e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3582:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3584:	8003      	strh	r3, [r0, #0]
 80a3586:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a358a:	8043      	strh	r3, [r0, #2]
 80a358c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3590:	8083      	strh	r3, [r0, #4]
 80a3592:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3596:	80c3      	strh	r3, [r0, #6]
 80a3598:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a359c:	8103      	strh	r3, [r0, #8]
 80a359e:	2305      	movs	r3, #5
 80a35a0:	8143      	strh	r3, [r0, #10]
 80a35a2:	230b      	movs	r3, #11
 80a35a4:	8183      	strh	r3, [r0, #12]
 80a35a6:	2201      	movs	r2, #1
 80a35a8:	2300      	movs	r3, #0
 80a35aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a35ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a35b0:	2200      	movs	r2, #0
 80a35b2:	611d      	str	r5, [r3, #16]
 80a35b4:	615a      	str	r2, [r3, #20]
 80a35b6:	bd38      	pop	{r3, r4, r5, pc}
 80a35b8:	20000064 	.word	0x20000064

080a35bc <rand>:
 80a35bc:	4b19      	ldr	r3, [pc, #100]	; (80a3624 <rand+0x68>)
 80a35be:	b510      	push	{r4, lr}
 80a35c0:	681c      	ldr	r4, [r3, #0]
 80a35c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a35c4:	b9d3      	cbnz	r3, 80a35fc <rand+0x40>
 80a35c6:	2018      	movs	r0, #24
 80a35c8:	f7fe fd5a 	bl	80a2080 <malloc>
 80a35cc:	f243 330e 	movw	r3, #13070	; 0x330e
 80a35d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80a35d2:	8003      	strh	r3, [r0, #0]
 80a35d4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a35d8:	8043      	strh	r3, [r0, #2]
 80a35da:	f241 2334 	movw	r3, #4660	; 0x1234
 80a35de:	8083      	strh	r3, [r0, #4]
 80a35e0:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a35e4:	80c3      	strh	r3, [r0, #6]
 80a35e6:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a35ea:	8103      	strh	r3, [r0, #8]
 80a35ec:	2305      	movs	r3, #5
 80a35ee:	8143      	strh	r3, [r0, #10]
 80a35f0:	230b      	movs	r3, #11
 80a35f2:	8183      	strh	r3, [r0, #12]
 80a35f4:	2201      	movs	r2, #1
 80a35f6:	2300      	movs	r3, #0
 80a35f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a35fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a35fe:	4c0a      	ldr	r4, [pc, #40]	; (80a3628 <rand+0x6c>)
 80a3600:	690b      	ldr	r3, [r1, #16]
 80a3602:	6948      	ldr	r0, [r1, #20]
 80a3604:	435c      	muls	r4, r3
 80a3606:	4a09      	ldr	r2, [pc, #36]	; (80a362c <rand+0x70>)
 80a3608:	fb02 4000 	mla	r0, r2, r0, r4
 80a360c:	fba3 2302 	umull	r2, r3, r3, r2
 80a3610:	3201      	adds	r2, #1
 80a3612:	4403      	add	r3, r0
 80a3614:	f143 0300 	adc.w	r3, r3, #0
 80a3618:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a361c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a3620:	bd10      	pop	{r4, pc}
 80a3622:	bf00      	nop
 80a3624:	20000064 	.word	0x20000064
 80a3628:	5851f42d 	.word	0x5851f42d
 80a362c:	4c957f2d 	.word	0x4c957f2d

080a3630 <strlen>:
 80a3630:	4603      	mov	r3, r0
 80a3632:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3636:	2a00      	cmp	r2, #0
 80a3638:	d1fb      	bne.n	80a3632 <strlen+0x2>
 80a363a:	1a18      	subs	r0, r3, r0
 80a363c:	3801      	subs	r0, #1
 80a363e:	4770      	bx	lr

080a3640 <dynalib_user>:
 80a3640:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a3650:	0000 0000                                   ....

080a3654 <CSWTCH.210>:
 80a3654:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a3664:	0050 0000 6162 6475 5300 7265 6169 006c     P...baud.Serial.
 80a3674:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 80a3684:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
 80a3694:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
 80a36a4:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
 80a36b4:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
 80a36c4:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
 80a36d4:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
 80a36e4:	3031 2075 5d00 0020 6425 2c00 0020 2928     10u .] .%d., .()
 80a36f4:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 80a3704:	6400 7465 6961 736c 3d20 0020 0a0d 6600     .details = ....f
 80a3714:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 80a3724:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
 80a3734:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 80a3744:	696e 0063 6c61 006c 005a 2b25 3330 3a64     nic.all.Z.%+03d:
 80a3754:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a3764:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a3774:	0000 0000                                   ....

080a3778 <_ZTV9IPAddress>:
	...
 80a3780:	2345 080a 2335 080a 2337 080a               E#..5#..7#..

080a378c <_ZTV9USBSerial>:
	...
 80a3794:	2401 080a 2451 080a 245f 080a 20fd 080a     .$..Q$.._$... ..
 80a37a4:	243d 080a 2403 080a 2419 080a 244b 080a     =$...$...$..K$..
 80a37b4:	242f 080a 23fd 080a                         /$...#..

080a37bc <_ZTV11USARTSerial>:
	...
 80a37c4:	2599 080a 25e9 080a 25f7 080a 20fd 080a     .%...%...%... ..
 80a37d4:	25ad 080a 25cf 080a 25bb 080a 25e3 080a     .%...%...%...%..
 80a37e4:	259b 080a 259f 080a                         .%...%..

080a37ec <_ZTV7TwoWire>:
	...
 80a37f4:	269d 080a 26e7 080a 26bf 080a 269f 080a     .&...&...&...&..
 80a3804:	26c7 080a 26cf 080a 26d7 080a 26df 080a     .&...&...&...&..

080a3814 <_ZTVN5spark9WiFiClassE>:
	...
 80a381c:	27cd 080a 27c3 080a 27b9 080a 2737 080a     .'...'...'..7'..
 80a382c:	218d 080a 27ad 080a 27a1 080a 2799 080a     .!...'...'...'..
 80a383c:	278f 080a 2785 080a 2741 080a               .'...'..A'..

080a3848 <_ZTVN5spark12NetworkClassE>:
	...
 80a3850:	27ed 080a 27f7 080a 2801 080a 280b 080a     .'...'...(...(..
 80a3860:	2815 080a 2821 080a 282d 080a 2839 080a     .(..!(..-(..9(..
 80a3870:	2841 080a 284b 080a 2855 080a               A(..K(..U(..

080a387c <_ZSt7nothrow>:
 80a387c:	0000 0000                                   ....

080a3880 <__sf_fake_stdin>:
	...

080a38a0 <__sf_fake_stdout>:
	...

080a38c0 <__sf_fake_stderr>:
	...
 80a38e0:	0043                                        C.

080a38e2 <link_const_variable_data_end>:
	...

080a38e4 <link_constructors_location>:
 80a38e4:	080a0a4d 	.word	0x080a0a4d
 80a38e8:	080a1d41 	.word	0x080a1d41
 80a38ec:	080a20c9 	.word	0x080a20c9
 80a38f0:	080a2199 	.word	0x080a2199
 80a38f4:	080a21a9 	.word	0x080a21a9
 80a38f8:	080a21e1 	.word	0x080a21e1
 80a38fc:	080a27d9 	.word	0x080a27d9
 80a3900:	080a28a5 	.word	0x080a28a5
 80a3904:	080a29c1 	.word	0x080a29c1
 80a3908:	080a2ab5 	.word	0x080a2ab5
 80a390c:	080a2b39 	.word	0x080a2b39
 80a3910:	080a2bfd 	.word	0x080a2bfd
 80a3914:	080a2cc1 	.word	0x080a2cc1

080a3918 <link_constructors_end>:
	...
