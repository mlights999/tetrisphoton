
c:/Users/mligh/OneDrive/Particle/TetrisPhoton/tetrisphoton/target/1.5.2/photon/tetrisphoton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000027f4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2810  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a2814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009ac  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a287c  080a287c  0002287c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a28a4  080a28a4  000228a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009e6f8  00000000  00000000  000228a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e6ae  00000000  00000000  000c0fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000fcaf  00000000  00000000  000cf64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001bd8  00000000  00000000  000df2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002c20  00000000  00000000  000e0ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024180  00000000  00000000  000e3af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000215a1  00000000  00000000  00107c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a3860  00000000  00000000  00129216  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000add0  00000000  00000000  001cca78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fa3d 	bl	80a24ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fa42 	bl	80a24c2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2814 	.word	0x080a2814
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000a14 	.word	0x20000a14
 80a0058:	20000a14 	.word	0x20000a14

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fd03 	bl	80a1a68 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a27d8 	.word	0x080a27d8
 80a0084:	080a280c 	.word	0x080a280c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b81a 	b.w	80a00c0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8a9 	bl	80a01e4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bca9 	b.w	80a19ec <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bbc1 	b.w	80a1820 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00ae:	b510      	push	{r4, lr}
 80a00b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80a00b2:	6800      	ldr	r0, [r0, #0]
 80a00b4:	b108      	cbz	r0, 80a00ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a00b6:	f001 fbb3 	bl	80a1820 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00ba:	4620      	mov	r0, r4
 80a00bc:	bd10      	pop	{r4, pc}
	...

080a00c0 <setup>:

int i;                          //Multipurpose counter variables (i and j)
int j;
int tetris[PIXEL_COUNT];        //Array to hold Tetris board

void setup() {
 80a00c0:	b510      	push	{r4, lr}
    strip.begin();
 80a00c2:	4810      	ldr	r0, [pc, #64]	; (80a0104 <setup+0x44>)
 80a00c4:	f000 f8f4 	bl	80a02b0 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.show();
 80a00c8:	480e      	ldr	r0, [pc, #56]	; (80a0104 <setup+0x44>)
 80a00ca:	f000 f927 	bl	80a031c <_ZN17Adafruit_NeoPixel4showEv>
 80a00ce:	2300      	movs	r3, #0
    for(i = 0; i < PIXEL_COUNT; i++){
        tetris[i] = 0;
 80a00d0:	4619      	mov	r1, r3
 80a00d2:	4a0d      	ldr	r2, [pc, #52]	; (80a0108 <setup+0x48>)
 80a00d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
int tetris[PIXEL_COUNT];        //Array to hold Tetris board

void setup() {
    strip.begin();
    strip.show();
    for(i = 0; i < PIXEL_COUNT; i++){
 80a00d8:	3301      	adds	r3, #1
 80a00da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
        tetris[i] = 0;
 80a00de:	4c0a      	ldr	r4, [pc, #40]	; (80a0108 <setup+0x48>)
int tetris[PIXEL_COUNT];        //Array to hold Tetris board

void setup() {
    strip.begin();
    strip.show();
    for(i = 0; i < PIXEL_COUNT; i++){
 80a00e0:	d1f8      	bne.n	80a00d4 <setup+0x14>
 80a00e2:	4a0a      	ldr	r2, [pc, #40]	; (80a010c <setup+0x4c>)
        tetris[i] = 0;
    }
    delay(100);
 80a00e4:	2064      	movs	r0, #100	; 0x64
 80a00e6:	6013      	str	r3, [r2, #0]
 80a00e8:	f001 fc2e 	bl	80a1948 <delay>
    tetris[24] = 1255000000;
 80a00ec:	4b08      	ldr	r3, [pc, #32]	; (80a0110 <setup+0x50>)
    tetris[25] = 1000255000;
    tetris[26] = 1000000255;
 80a00ee:	f46f 7246 	mvn.w	r2, #792	; 0x318
    strip.show();
    for(i = 0; i < PIXEL_COUNT; i++){
        tetris[i] = 0;
    }
    delay(100);
    tetris[24] = 1255000000;
 80a00f2:	6623      	str	r3, [r4, #96]	; 0x60
    tetris[25] = 1000255000;
 80a00f4:	4b07      	ldr	r3, [pc, #28]	; (80a0114 <setup+0x54>)
 80a00f6:	6663      	str	r3, [r4, #100]	; 0x64
    tetris[26] = 1000000255;
 80a00f8:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
 80a00fc:	4413      	add	r3, r2
 80a00fe:	66a3      	str	r3, [r4, #104]	; 0x68
 80a0100:	bd10      	pop	{r4, pc}
 80a0102:	bf00      	nop
 80a0104:	20000470 	.word	0x20000470
 80a0108:	20000070 	.word	0x20000070
 80a010c:	2000006c 	.word	0x2000006c
 80a0110:	4acdc7c0 	.word	0x4acdc7c0
 80a0114:	3b9eae18 	.word	0x3b9eae18

080a0118 <_Z10printBoardPi>:
    return ((colorCode/1000)%1000);
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
 80a0118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    for(i = 0; i < PIXEL_COUNT; i++){
 80a011a:	4d2d      	ldr	r5, [pc, #180]	; (80a01d0 <_Z10printBoardPi+0xb8>)
 80a011c:	2300      	movs	r3, #0
 80a011e:	4e2d      	ldr	r6, [pc, #180]	; (80a01d4 <_Z10printBoardPi+0xbc>)
        else{                                                                                                       //Reversed row for S configuration (mirror function)
            if((i%16) < 8){
                strip.setPixelColor(i+15-((i%16)*2),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the right half of line, add to mirror to other side
            }
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
 80a0120:	4f2d      	ldr	r7, [pc, #180]	; (80a01d8 <_Z10printBoardPi+0xc0>)
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
    for(i = 0; i < PIXEL_COUNT; i++){
 80a0122:	602b      	str	r3, [r5, #0]
 80a0124:	6829      	ldr	r1, [r5, #0]
 80a0126:	29ff      	cmp	r1, #255	; 0xff
 80a0128:	dc4c      	bgt.n	80a01c4 <_Z10printBoardPi+0xac>
        if(((i/16)%2) == 0){                                                                                        //Prints standard row
 80a012a:	2310      	movs	r3, #16
 80a012c:	fb91 f3f3 	sdiv	r3, r1, r3
 80a0130:	f013 0f01 	tst.w	r3, #1
            strip.setPixelColor(i,getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));
 80a0134:	f856 c021 	ldr.w	ip, [r6, r1, lsl #2]
 80a0138:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
    for(i = 0; i < PIXEL_COUNT; i++){
        if(((i/16)%2) == 0){                                                                                        //Prints standard row
 80a013c:	d116      	bne.n	80a016c <_Z10printBoardPi+0x54>
            strip.setPixelColor(i,getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));
 80a013e:	fb9c f4f0 	sdiv	r4, ip, r0
 80a0142:	fb9c f2f7 	sdiv	r2, ip, r7
 80a0146:	fb94 f3f0 	sdiv	r3, r4, r0
 80a014a:	fb92 fef0 	sdiv	lr, r2, r0
 80a014e:	fb00 4313 	mls	r3, r0, r3, r4
 80a0152:	fb00 221e 	mls	r2, r0, lr, r2
 80a0156:	fb00 c014 	mls	r0, r0, r4, ip
 80a015a:	b2c0      	uxtb	r0, r0
 80a015c:	9000      	str	r0, [sp, #0]
 80a015e:	b2db      	uxtb	r3, r3
 80a0160:	b2d2      	uxtb	r2, r2
 80a0162:	b289      	uxth	r1, r1
 80a0164:	481d      	ldr	r0, [pc, #116]	; (80a01dc <_Z10printBoardPi+0xc4>)
 80a0166:	f001 f993 	bl	80a1490 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a016a:	e027      	b.n	80a01bc <_Z10printBoardPi+0xa4>
        else{                                                                                                       //Reversed row for S configuration (mirror function)
            if((i%16) < 8){
                strip.setPixelColor(i+15-((i%16)*2),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the right half of line, add to mirror to other side
            }
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
 80a016c:	fb9c f2f0 	sdiv	r2, ip, r0
 80a0170:	fb9c f4f7 	sdiv	r4, ip, r7
 80a0174:	fb92 f3f0 	sdiv	r3, r2, r0
 80a0178:	fb00 2313 	mls	r3, r0, r3, r2
 80a017c:	fb94 f2f0 	sdiv	r2, r4, r0
 80a0180:	fb00 4212 	mls	r2, r0, r2, r4
 80a0184:	4c16      	ldr	r4, [pc, #88]	; (80a01e0 <_Z10printBoardPi+0xc8>)
 80a0186:	f101 0e0f 	add.w	lr, r1, #15
 80a018a:	400c      	ands	r4, r1
 80a018c:	2c00      	cmp	r4, #0
 80a018e:	bfbc      	itt	lt
 80a0190:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80a0194:	f064 040f 	ornlt	r4, r4, #15
 80a0198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a019c:	bfb8      	it	lt
 80a019e:	3401      	addlt	r4, #1
 80a01a0:	ebae 0144 	sub.w	r1, lr, r4, lsl #1
 80a01a4:	fb9c fef0 	sdiv	lr, ip, r0
 80a01a8:	fb00 c01e 	mls	r0, r0, lr, ip
 80a01ac:	b2c0      	uxtb	r0, r0
 80a01ae:	9000      	str	r0, [sp, #0]
 80a01b0:	b2db      	uxtb	r3, r3
 80a01b2:	b2d2      	uxtb	r2, r2
 80a01b4:	b289      	uxth	r1, r1
 80a01b6:	4809      	ldr	r0, [pc, #36]	; (80a01dc <_Z10printBoardPi+0xc4>)
 80a01b8:	f001 f96a 	bl	80a1490 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printBoard(int usrBoard[]){
    for(i = 0; i < PIXEL_COUNT; i++){
 80a01bc:	682b      	ldr	r3, [r5, #0]
 80a01be:	3301      	adds	r3, #1
 80a01c0:	602b      	str	r3, [r5, #0]
 80a01c2:	e7af      	b.n	80a0124 <_Z10printBoardPi+0xc>
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
            }
        }
    }
    strip.show();
 80a01c4:	4805      	ldr	r0, [pc, #20]	; (80a01dc <_Z10printBoardPi+0xc4>)
}
 80a01c6:	b003      	add	sp, #12
 80a01c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            else{
                strip.setPixelColor(i+15-(2*(i%16)),getRVal(tetris[i]),getGVal(tetris[i]), getBVal(tetris[i]));     //If on the left half of line, subtract to mirror to other side
            }
        }
    }
    strip.show();
 80a01cc:	f000 b8a6 	b.w	80a031c <_ZN17Adafruit_NeoPixel4showEv>
 80a01d0:	2000006c 	.word	0x2000006c
 80a01d4:	20000070 	.word	0x20000070
 80a01d8:	000f4240 	.word	0x000f4240
 80a01dc:	20000470 	.word	0x20000470
 80a01e0:	8000000f 	.word	0x8000000f

080a01e4 <loop>:
}
// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a01e4:	b508      	push	{r3, lr}
  // The core of your code will likely live here.
    printBoard(tetris);
 80a01e6:	4804      	ldr	r0, [pc, #16]	; (80a01f8 <loop+0x14>)
 80a01e8:	f7ff ff96 	bl	80a0118 <_Z10printBoardPi>
    delay(5000);
 80a01ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
    printBoard(tetris);
    delay(5000);
 80a01f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80a01f4:	f001 bba8 	b.w	80a1948 <delay>
 80a01f8:	20000070 	.word	0x20000070

080a01fc <_GLOBAL__sub_I_strip>:
 80a01fc:	b538      	push	{r3, r4, r5, lr}

#define PIXEL_PIN A2            //Define Hardware pin used for data

#define PIXEL_TYPE WS2812B       //Define LED Type

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);    //Initialize neopixel function
 80a01fe:	4c11      	ldr	r4, [pc, #68]	; (80a0244 <_GLOBAL__sub_I_strip+0x48>)
 80a0200:	4d11      	ldr	r5, [pc, #68]	; (80a0248 <_GLOBAL__sub_I_strip+0x4c>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0202:	f001 f97f 	bl	80a1504 <HAL_Pin_Map>
 80a0206:	2302      	movs	r3, #2
 80a0208:	220c      	movs	r2, #12
 80a020a:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a020e:	4620      	mov	r0, r4
 80a0210:	f000 f873 	bl	80a02fa <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0214:	462a      	mov	r2, r5
 80a0216:	490d      	ldr	r1, [pc, #52]	; (80a024c <_GLOBAL__sub_I_strip+0x50>)
 80a0218:	4620      	mov	r0, r4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a021a:	4c0d      	ldr	r4, [pc, #52]	; (80a0250 <_GLOBAL__sub_I_strip+0x54>)
 80a021c:	f001 ffce 	bl	80a21bc <__aeabi_atexit>
 80a0220:	2300      	movs	r3, #0
 80a0222:	6023      	str	r3, [r4, #0]
 80a0224:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0226:	71a3      	strb	r3, [r4, #6]
 80a0228:	8123      	strh	r3, [r4, #8]
 80a022a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a022e:	2001      	movs	r0, #1
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0230:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0232:	f001 fa71 	bl	80a1718 <set_system_mode>

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(AUTOMATIC);         //Tells device to use WiFi by default
 80a0236:	462a      	mov	r2, r5
 80a0238:	4620      	mov	r0, r4
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
    printBoard(tetris);
    delay(5000);
 80a023a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(AUTOMATIC);         //Tells device to use WiFi by default
 80a023e:	4905      	ldr	r1, [pc, #20]	; (80a0254 <_GLOBAL__sub_I_strip+0x58>)
 80a0240:	f001 bfbc 	b.w	80a21bc <__aeabi_atexit>
 80a0244:	20000470 	.word	0x20000470
 80a0248:	20000068 	.word	0x20000068
 80a024c:	080a025d 	.word	0x080a025d
 80a0250:	20000484 	.word	0x20000484
 80a0254:	080a00af 	.word	0x080a00af

080a0258 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0258:	f001 b98c 	b.w	80a1574 <HAL_Timer_Get_Micro_Seconds>

080a025c <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a025c:	b510      	push	{r4, lr}
 80a025e:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0260:	68c0      	ldr	r0, [r0, #12]
 80a0262:	b108      	cbz	r0, 80a0268 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0264:	f001 fadc 	bl	80a1820 <free>
  if (begun) pinMode(pin, INPUT);
 80a0268:	7823      	ldrb	r3, [r4, #0]
 80a026a:	b11b      	cbz	r3, 80a0274 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a026c:	2100      	movs	r1, #0
 80a026e:	79e0      	ldrb	r0, [r4, #7]
 80a0270:	f001 ff22 	bl	80a20b8 <pinMode>
}
 80a0274:	4620      	mov	r0, r4
 80a0276:	bd10      	pop	{r4, pc}

080a0278 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0278:	b538      	push	{r3, r4, r5, lr}
 80a027a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a027c:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a027e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0280:	b108      	cbz	r0, 80a0286 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0282:	f001 facd 	bl	80a1820 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0286:	79a3      	ldrb	r3, [r4, #6]
 80a0288:	2b06      	cmp	r3, #6
 80a028a:	bf0c      	ite	eq
 80a028c:	2004      	moveq	r0, #4
 80a028e:	2003      	movne	r0, #3
 80a0290:	4368      	muls	r0, r5
 80a0292:	b280      	uxth	r0, r0
 80a0294:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0296:	f001 fabb 	bl	80a1810 <malloc>
 80a029a:	60e0      	str	r0, [r4, #12]
 80a029c:	b128      	cbz	r0, 80a02aa <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a029e:	88a2      	ldrh	r2, [r4, #4]
 80a02a0:	2100      	movs	r1, #0
 80a02a2:	f002 f90e 	bl	80a24c2 <memset>
    numLEDs = n;
 80a02a6:	8065      	strh	r5, [r4, #2]
 80a02a8:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a02aa:	80a0      	strh	r0, [r4, #4]
 80a02ac:	8060      	strh	r0, [r4, #2]
 80a02ae:	bd38      	pop	{r3, r4, r5, pc}

080a02b0 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a02b0:	b510      	push	{r4, lr}
 80a02b2:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a02b4:	2101      	movs	r1, #1
 80a02b6:	79c0      	ldrb	r0, [r0, #7]
 80a02b8:	f001 fefe 	bl	80a20b8 <pinMode>
  digitalWrite(pin, LOW);
 80a02bc:	2100      	movs	r1, #0
 80a02be:	79e0      	ldrb	r0, [r4, #7]
 80a02c0:	f001 ff0b 	bl	80a20da <digitalWrite>
  begun = true;
 80a02c4:	2301      	movs	r3, #1
 80a02c6:	7023      	strb	r3, [r4, #0]
 80a02c8:	bd10      	pop	{r4, pc}

080a02ca <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a02ca:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a02cc:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a02ce:	4605      	mov	r5, r0
 80a02d0:	460c      	mov	r4, r1
    if (begun) {
 80a02d2:	b11b      	cbz	r3, 80a02dc <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a02d4:	2100      	movs	r1, #0
 80a02d6:	79c0      	ldrb	r0, [r0, #7]
 80a02d8:	f001 feee 	bl	80a20b8 <pinMode>
    }
    pin = p;
    if (begun) {
 80a02dc:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a02de:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a02e0:	b153      	cbz	r3, 80a02f8 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a02e2:	b2a4      	uxth	r4, r4
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	2101      	movs	r1, #1
 80a02e8:	f001 fee6 	bl	80a20b8 <pinMode>
        digitalWrite(p, LOW);
 80a02ec:	4620      	mov	r0, r4
    }
}
 80a02ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a02f2:	2100      	movs	r1, #0
 80a02f4:	f001 bef1 	b.w	80a20da <digitalWrite>
 80a02f8:	bd38      	pop	{r3, r4, r5, pc}

080a02fa <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a02fa:	b570      	push	{r4, r5, r6, lr}
 80a02fc:	4604      	mov	r4, r0
 80a02fe:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0300:	2500      	movs	r5, #0
 80a0302:	7183      	strb	r3, [r0, #6]
 80a0304:	7005      	strb	r5, [r0, #0]
 80a0306:	7205      	strb	r5, [r0, #8]
 80a0308:	60c5      	str	r5, [r0, #12]
 80a030a:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a030c:	f7ff ffb4 	bl	80a0278 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0310:	4620      	mov	r0, r4
 80a0312:	4631      	mov	r1, r6
 80a0314:	f7ff ffd9 	bl	80a02ca <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0318:	4620      	mov	r0, r4
 80a031a:	bd70      	pop	{r4, r5, r6, pc}

080a031c <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a031c:	68c3      	ldr	r3, [r0, #12]
 80a031e:	2b00      	cmp	r3, #0
 80a0320:	f000 858e 	beq.w	80a0e40 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0328:	4604      	mov	r4, r0
 80a032a:	7983      	ldrb	r3, [r0, #6]
 80a032c:	b086      	sub	sp, #24
 80a032e:	3b02      	subs	r3, #2
 80a0330:	b2db      	uxtb	r3, r3
 80a0332:	2b04      	cmp	r3, #4
 80a0334:	bf96      	itet	ls
 80a0336:	4a29      	ldrls	r2, [pc, #164]	; (80a03dc <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0338:	2532      	movhi	r5, #50	; 0x32
 80a033a:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a033e:	f7ff ff8b 	bl	80a0258 <micros>
 80a0342:	6923      	ldr	r3, [r4, #16]
 80a0344:	1ac0      	subs	r0, r0, r3
 80a0346:	42a8      	cmp	r0, r5
 80a0348:	d3f9      	bcc.n	80a033e <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a034a:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a034c:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a034e:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0350:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0352:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a0356:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a035a:	f000 8272 	beq.w	80a0842 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a035e:	2907      	cmp	r1, #7
 80a0360:	f000 826f 	beq.w	80a0842 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0364:	2906      	cmp	r1, #6
 80a0366:	f000 8432 	beq.w	80a0bce <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a036a:	2905      	cmp	r1, #5
 80a036c:	f000 83ab 	beq.w	80a0ac6 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0370:	2908      	cmp	r1, #8
 80a0372:	f000 83a8 	beq.w	80a0ac6 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0376:	2900      	cmp	r1, #0
 80a0378:	f040 8563 	bne.w	80a0e42 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a037c:	4a18      	ldr	r2, [pc, #96]	; (80a03e0 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a037e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0382:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0386:	b29b      	uxth	r3, r3
 80a0388:	2b00      	cmp	r3, #0
 80a038a:	f000 8395 	beq.w	80a0ab8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a038e:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0390:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0394:	f10e 0503 	add.w	r5, lr, #3
 80a0398:	3b03      	subs	r3, #3
 80a039a:	b29b      	uxth	r3, r3
 80a039c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a03a0:	f89e 3000 	ldrb.w	r3, [lr]
 80a03a4:	b2db      	uxtb	r3, r3
 80a03a6:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a03aa:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a03ae:	b2db      	uxtb	r3, r3
 80a03b0:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a03b4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a03b8:	b2db      	uxtb	r3, r3
 80a03ba:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a03be:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a03c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a03c6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a03ca:	021b      	lsls	r3, r3, #8
 80a03cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a03d0:	4303      	orrs	r3, r0
 80a03d2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a03d4:	f88d 1005 	strb.w	r1, [sp, #5]
 80a03d8:	e11b      	b.n	80a0612 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a03da:	bf00      	nop
 80a03dc:	080a2548 	.word	0x080a2548
 80a03e0:	20000490 	.word	0x20000490
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a03e4:	4600      	mov	r0, r0
 80a03e6:	bf00      	nop
 80a03e8:	bf00      	nop
 80a03ea:	bf00      	nop
 80a03ec:	bf00      	nop
 80a03ee:	bf00      	nop
 80a03f0:	bf00      	nop
 80a03f2:	bf00      	nop
 80a03f4:	bf00      	nop
 80a03f6:	bf00      	nop
 80a03f8:	bf00      	nop
 80a03fa:	bf00      	nop
 80a03fc:	bf00      	nop
 80a03fe:	bf00      	nop
 80a0400:	bf00      	nop
 80a0402:	bf00      	nop
 80a0404:	bf00      	nop
 80a0406:	bf00      	nop
 80a0408:	bf00      	nop
 80a040a:	bf00      	nop
 80a040c:	bf00      	nop
 80a040e:	bf00      	nop
 80a0410:	bf00      	nop
 80a0412:	bf00      	nop
 80a0414:	bf00      	nop
 80a0416:	bf00      	nop
 80a0418:	bf00      	nop
 80a041a:	bf00      	nop
 80a041c:	bf00      	nop
 80a041e:	bf00      	nop
 80a0420:	bf00      	nop
 80a0422:	bf00      	nop
 80a0424:	bf00      	nop
 80a0426:	bf00      	nop
 80a0428:	bf00      	nop
 80a042a:	bf00      	nop
 80a042c:	bf00      	nop
 80a042e:	bf00      	nop
 80a0430:	bf00      	nop
 80a0432:	bf00      	nop
 80a0434:	bf00      	nop
 80a0436:	bf00      	nop
 80a0438:	bf00      	nop
 80a043a:	bf00      	nop
 80a043c:	bf00      	nop
 80a043e:	bf00      	nop
 80a0440:	bf00      	nop
 80a0442:	bf00      	nop
 80a0444:	bf00      	nop
 80a0446:	bf00      	nop
 80a0448:	bf00      	nop
 80a044a:	bf00      	nop
 80a044c:	bf00      	nop
 80a044e:	bf00      	nop
 80a0450:	bf00      	nop
 80a0452:	bf00      	nop
 80a0454:	bf00      	nop
 80a0456:	bf00      	nop
 80a0458:	bf00      	nop
 80a045a:	bf00      	nop
 80a045c:	bf00      	nop
 80a045e:	bf00      	nop
 80a0460:	bf00      	nop
 80a0462:	bf00      	nop
 80a0464:	bf00      	nop
 80a0466:	bf00      	nop
 80a0468:	bf00      	nop
 80a046a:	bf00      	nop
 80a046c:	bf00      	nop
 80a046e:	bf00      	nop
 80a0470:	bf00      	nop
 80a0472:	bf00      	nop
 80a0474:	bf00      	nop
 80a0476:	bf00      	nop
 80a0478:	bf00      	nop
 80a047a:	bf00      	nop
 80a047c:	bf00      	nop
 80a047e:	bf00      	nop
 80a0480:	bf00      	nop
 80a0482:	bf00      	nop
 80a0484:	bf00      	nop
 80a0486:	bf00      	nop
 80a0488:	bf00      	nop
 80a048a:	bf00      	nop
 80a048c:	bf00      	nop
 80a048e:	bf00      	nop
 80a0490:	bf00      	nop
 80a0492:	bf00      	nop
 80a0494:	bf00      	nop
 80a0496:	bf00      	nop
 80a0498:	bf00      	nop
 80a049a:	bf00      	nop
 80a049c:	bf00      	nop
 80a049e:	bf00      	nop
 80a04a0:	bf00      	nop
 80a04a2:	bf00      	nop
 80a04a4:	bf00      	nop
 80a04a6:	bf00      	nop
 80a04a8:	bf00      	nop
 80a04aa:	bf00      	nop
 80a04ac:	bf00      	nop
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a04ec:	79e3      	ldrb	r3, [r4, #7]
 80a04ee:	6810      	ldr	r0, [r2, #0]
 80a04f0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a04f4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a04f8:	88bf      	ldrh	r7, [r7, #4]
 80a04fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a04fe:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0500:	4600      	mov	r0, r0
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a05fa:	9b04      	ldr	r3, [sp, #16]
 80a05fc:	085b      	lsrs	r3, r3, #1
 80a05fe:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0600:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0604:	3301      	adds	r3, #1
 80a0606:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0608:	2b17      	cmp	r3, #23
 80a060a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a060e:	f200 82db 	bhi.w	80a0bc8 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0612:	79e3      	ldrb	r3, [r4, #7]
 80a0614:	6810      	ldr	r0, [r2, #0]
 80a0616:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a061a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a061e:	88bf      	ldrh	r7, [r7, #4]
 80a0620:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0624:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0626:	9803      	ldr	r0, [sp, #12]
 80a0628:	9b04      	ldr	r3, [sp, #16]
 80a062a:	4218      	tst	r0, r3
 80a062c:	f47f aeda 	bne.w	80a03e4 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0630:	4600      	mov	r0, r0
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0682:	79e3      	ldrb	r3, [r4, #7]
 80a0684:	6810      	ldr	r0, [r2, #0]
 80a0686:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a068a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a068e:	88bf      	ldrh	r7, [r7, #4]
 80a0690:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0694:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0696:	4600      	mov	r0, r0
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	e6db      	b.n	80a05fa <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0842:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0846:	4a17      	ldr	r2, [pc, #92]	; (80a08a4 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0848:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a084a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a084e:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0850:	2b00      	cmp	r3, #0
 80a0852:	f000 8131 	beq.w	80a0ab8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0856:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0858:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a085c:	f10e 0103 	add.w	r1, lr, #3
 80a0860:	3b03      	subs	r3, #3
 80a0862:	b29b      	uxth	r3, r3
 80a0864:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0868:	f89e 3000 	ldrb.w	r3, [lr]
 80a086c:	b2db      	uxtb	r3, r3
 80a086e:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0872:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0876:	b2db      	uxtb	r3, r3
 80a0878:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a087c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0880:	b2db      	uxtb	r3, r3
 80a0882:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0886:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a088a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a088e:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0892:	0200      	lsls	r0, r0, #8
 80a0894:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0898:	433b      	orrs	r3, r7
 80a089a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a089c:	f88d 6005 	strb.w	r6, [sp, #5]
 80a08a0:	e080      	b.n	80a09a4 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a08a2:	bf00      	nop
 80a08a4:	20000490 	.word	0x20000490
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a08a8:	4600      	mov	r0, r0
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0942:	79e3      	ldrb	r3, [r4, #7]
 80a0944:	6810      	ldr	r0, [r2, #0]
 80a0946:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a094a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a094e:	88bf      	ldrh	r7, [r7, #4]
 80a0950:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0954:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0956:	4600      	mov	r0, r0
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a098c:	9b04      	ldr	r3, [sp, #16]
 80a098e:	085b      	lsrs	r3, r3, #1
 80a0990:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0992:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0996:	3301      	adds	r3, #1
 80a0998:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a099a:	2b17      	cmp	r3, #23
 80a099c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a09a0:	f200 8083 	bhi.w	80a0aaa <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a09a4:	79e3      	ldrb	r3, [r4, #7]
 80a09a6:	6810      	ldr	r0, [r2, #0]
 80a09a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a09ac:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a09b0:	88bf      	ldrh	r7, [r7, #4]
 80a09b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a09b6:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a09b8:	9803      	ldr	r0, [sp, #12]
 80a09ba:	9b04      	ldr	r3, [sp, #16]
 80a09bc:	4218      	tst	r0, r3
 80a09be:	f47f af73 	bne.w	80a08a8 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09c2:	4600      	mov	r0, r0
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a09ea:	79e3      	ldrb	r3, [r4, #7]
 80a09ec:	6810      	ldr	r0, [r2, #0]
 80a09ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a09f2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a09f6:	88bf      	ldrh	r7, [r7, #4]
 80a09f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a09fc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09fe:	4600      	mov	r0, r0
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	e770      	b.n	80a098c <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0aaa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0aae:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ab0:	b29b      	uxth	r3, r3
 80a0ab2:	2b00      	cmp	r3, #0
 80a0ab4:	f47f aecf 	bne.w	80a0856 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0ab8:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0aba:	f7ff fbcd 	bl	80a0258 <micros>
 80a0abe:	6120      	str	r0, [r4, #16]
}
 80a0ac0:	b006      	add	sp, #24
 80a0ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0ac6:	4b5e      	ldr	r3, [pc, #376]	; (80a0c40 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0ac8:	4a5e      	ldr	r2, [pc, #376]	; (80a0c44 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0aca:	4618      	mov	r0, r3
 80a0acc:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0ace:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0ad2:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ad4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0ad8:	b292      	uxth	r2, r2
 80a0ada:	2a00      	cmp	r2, #0
 80a0adc:	d0ec      	beq.n	80a0ab8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0ade:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0ae2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0ae6:	f10e 0503 	add.w	r5, lr, #3
 80a0aea:	3a03      	subs	r2, #3
 80a0aec:	b292      	uxth	r2, r2
 80a0aee:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0af2:	f89e 2000 	ldrb.w	r2, [lr]
 80a0af6:	b2d2      	uxtb	r2, r2
 80a0af8:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0afc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0b00:	b2d2      	uxtb	r2, r2
 80a0b02:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0b06:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0b0a:	b2d2      	uxtb	r2, r2
 80a0b0c:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0b10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0b14:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0b18:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0b1c:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0b20:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0b24:	ea42 020c 	orr.w	r2, r2, ip
 80a0b28:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0b2a:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0b2e:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b30:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0b32:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b36:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0b3a:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0b3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b42:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0b44:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0b48:	9e03      	ldr	r6, [sp, #12]
 80a0b4a:	9a04      	ldr	r2, [sp, #16]
 80a0b4c:	4216      	tst	r6, r2
 80a0b4e:	d023      	beq.n	80a0b98 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0b50:	685a      	ldr	r2, [r3, #4]
 80a0b52:	9e05      	ldr	r6, [sp, #20]
 80a0b54:	1b92      	subs	r2, r2, r6
 80a0b56:	2a4f      	cmp	r2, #79	; 0x4f
 80a0b58:	d9fa      	bls.n	80a0b50 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0b5a:	79e2      	ldrb	r2, [r4, #7]
 80a0b5c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b60:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0b64:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0b68:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0b6c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0b70:	6842      	ldr	r2, [r0, #4]
 80a0b72:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0b74:	685a      	ldr	r2, [r3, #4]
 80a0b76:	9e05      	ldr	r6, [sp, #20]
 80a0b78:	1b92      	subs	r2, r2, r6
 80a0b7a:	2a07      	cmp	r2, #7
 80a0b7c:	d9fa      	bls.n	80a0b74 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0b7e:	9a04      	ldr	r2, [sp, #16]
 80a0b80:	0852      	lsrs	r2, r2, #1
 80a0b82:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0b84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0b88:	3201      	adds	r2, #1
 80a0b8a:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0b8c:	2a17      	cmp	r2, #23
 80a0b8e:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0b92:	d9cc      	bls.n	80a0b2e <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0b94:	46ae      	mov	lr, r5
 80a0b96:	e79d      	b.n	80a0ad4 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0b98:	685a      	ldr	r2, [r3, #4]
 80a0b9a:	9e05      	ldr	r6, [sp, #20]
 80a0b9c:	1b92      	subs	r2, r2, r6
 80a0b9e:	2a18      	cmp	r2, #24
 80a0ba0:	d9fa      	bls.n	80a0b98 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0ba2:	79e2      	ldrb	r2, [r4, #7]
 80a0ba4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0ba8:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0bac:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0bb0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0bb4:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0bb8:	6842      	ldr	r2, [r0, #4]
 80a0bba:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0bbc:	685a      	ldr	r2, [r3, #4]
 80a0bbe:	9e05      	ldr	r6, [sp, #20]
 80a0bc0:	1b92      	subs	r2, r2, r6
 80a0bc2:	2a45      	cmp	r2, #69	; 0x45
 80a0bc4:	d9fa      	bls.n	80a0bbc <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0bc6:	e7da      	b.n	80a0b7e <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0bc8:	46ae      	mov	lr, r5
 80a0bca:	f7ff bbda 	b.w	80a0382 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0bce:	4a1d      	ldr	r2, [pc, #116]	; (80a0c44 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0bd0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0bd4:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0bd6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0bda:	b29b      	uxth	r3, r3
 80a0bdc:	2b00      	cmp	r3, #0
 80a0bde:	f43f af6b 	beq.w	80a0ab8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0be2:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0be4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0be8:	f10e 0104 	add.w	r1, lr, #4
 80a0bec:	3b04      	subs	r3, #4
 80a0bee:	b29b      	uxth	r3, r3
 80a0bf0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0bf4:	f89e 3000 	ldrb.w	r3, [lr]
 80a0bf8:	b2db      	uxtb	r3, r3
 80a0bfa:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0bfe:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0c02:	b2db      	uxtb	r3, r3
 80a0c04:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0c08:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0c0c:	b2db      	uxtb	r3, r3
 80a0c0e:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0c12:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0c16:	b2db      	uxtb	r3, r3
 80a0c18:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0c20:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0c24:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0c28:	043f      	lsls	r7, r7, #16
 80a0c2a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0c2e:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0c32:	4303      	orrs	r3, r0
 80a0c34:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0c38:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0c3a:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0c3e:	e07e      	b.n	80a0d3e <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0c40:	e0001000 	.word	0xe0001000
 80a0c44:	20000490 	.word	0x20000490
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c48:	4600      	mov	r0, r0
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0cb6:	79e3      	ldrb	r3, [r4, #7]
 80a0cb8:	6810      	ldr	r0, [r2, #0]
 80a0cba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0cbe:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0cc2:	88bf      	ldrh	r7, [r7, #4]
 80a0cc4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0cc8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0cca:	4600      	mov	r0, r0
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0d28:	9b04      	ldr	r3, [sp, #16]
 80a0d2a:	085b      	lsrs	r3, r3, #1
 80a0d2c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0d2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0d32:	3301      	adds	r3, #1
 80a0d34:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0d36:	2b1f      	cmp	r3, #31
 80a0d38:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0d3c:	d87e      	bhi.n	80a0e3c <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0d3e:	79e3      	ldrb	r3, [r4, #7]
 80a0d40:	6810      	ldr	r0, [r2, #0]
 80a0d42:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d46:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d4a:	88bf      	ldrh	r7, [r7, #4]
 80a0d4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d50:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0d52:	9803      	ldr	r0, [sp, #12]
 80a0d54:	9b04      	ldr	r3, [sp, #16]
 80a0d56:	4218      	tst	r0, r3
 80a0d58:	f47f af76 	bne.w	80a0c48 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d5c:	4600      	mov	r0, r0
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0d84:	79e3      	ldrb	r3, [r4, #7]
 80a0d86:	6810      	ldr	r0, [r2, #0]
 80a0d88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d8c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d90:	88bf      	ldrh	r7, [r7, #4]
 80a0d92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d96:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d98:	4600      	mov	r0, r0
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	e775      	b.n	80a0d28 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0e3c:	468e      	mov	lr, r1
 80a0e3e:	e6ca      	b.n	80a0bd6 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0e40:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0e42:	2903      	cmp	r1, #3
 80a0e44:	f000 812e 	beq.w	80a10a4 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e48:	4a1e      	ldr	r2, [pc, #120]	; (80a0ec4 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0e4a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0e4e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0e50:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e54:	b29b      	uxth	r3, r3
 80a0e56:	2b00      	cmp	r3, #0
 80a0e58:	f43f ae2e 	beq.w	80a0ab8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0e5c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0e5e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e62:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0e64:	3b03      	subs	r3, #3
 80a0e66:	b29b      	uxth	r3, r3
 80a0e68:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0e6c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0e70:	f10e 0103 	add.w	r1, lr, #3
 80a0e74:	b2db      	uxtb	r3, r3
 80a0e76:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0e7a:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e7e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0e82:	b2db      	uxtb	r3, r3
 80a0e84:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0e88:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e8c:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0e90:	b2db      	uxtb	r3, r3
 80a0e92:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0e96:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0e9a:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e9e:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0ea2:	021b      	lsls	r3, r3, #8
 80a0ea4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0ea8:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0eac:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0eb0:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0eb4:	433b      	orrs	r3, r7
 80a0eb6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0eb8:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0ebc:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0ec0:	e07d      	b.n	80a0fbe <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0ec2:	bf00      	nop
 80a0ec4:	20000490 	.word	0x20000490
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0ec8:	9b04      	ldr	r3, [sp, #16]
 80a0eca:	085b      	lsrs	r3, r3, #1
 80a0ecc:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ece:	4600      	mov	r0, r0
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0f54:	79e0      	ldrb	r0, [r4, #7]
 80a0f56:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0f58:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0f5c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a0f60:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a0f64:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0f68:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0f6c:	3301      	adds	r3, #1
 80a0f6e:	b2db      	uxtb	r3, r3
 80a0f70:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0f74:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f78:	4600      	mov	r0, r0
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
          if(j==24) break;
 80a0fa2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0fa6:	2b18      	cmp	r3, #24
 80a0fa8:	d07a      	beq.n	80a10a0 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a0faa:	79e3      	ldrb	r3, [r4, #7]
 80a0fac:	6810      	ldr	r0, [r2, #0]
 80a0fae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fb2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0fb6:	88bf      	ldrh	r7, [r7, #4]
 80a0fb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0fbc:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a0fbe:	9803      	ldr	r0, [sp, #12]
 80a0fc0:	9b04      	ldr	r3, [sp, #16]
 80a0fc2:	4218      	tst	r0, r3
 80a0fc4:	d180      	bne.n	80a0ec8 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0fc6:	4600      	mov	r0, r0
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a0fe8:	79e3      	ldrb	r3, [r4, #7]
 80a0fea:	6810      	ldr	r0, [r2, #0]
 80a0fec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ff0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ff4:	88bf      	ldrh	r7, [r7, #4]
 80a0ff6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ffa:	831f      	strh	r7, [r3, #24]
          j++;
 80a0ffc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1000:	3301      	adds	r3, #1
 80a1002:	b2db      	uxtb	r3, r3
 80a1004:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1008:	9b04      	ldr	r3, [sp, #16]
 80a100a:	085b      	lsrs	r3, r3, #1
 80a100c:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a100e:	4600      	mov	r0, r0
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
          if(j==24) break;
 80a1098:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a109c:	2b18      	cmp	r3, #24
 80a109e:	d184      	bne.n	80a0faa <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a10a0:	468e      	mov	lr, r1
 80a10a2:	e6d5      	b.n	80a0e50 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a10a4:	4a17      	ldr	r2, [pc, #92]	; (80a1104 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a10a6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a10aa:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a10b0:	b29b      	uxth	r3, r3
 80a10b2:	2b00      	cmp	r3, #0
 80a10b4:	f43f ad00 	beq.w	80a0ab8 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a10b8:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a10ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a10be:	f10e 0103 	add.w	r1, lr, #3
 80a10c2:	3b03      	subs	r3, #3
 80a10c4:	b29b      	uxth	r3, r3
 80a10c6:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a10ca:	f89e 3000 	ldrb.w	r3, [lr]
 80a10ce:	b2db      	uxtb	r3, r3
 80a10d0:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a10d4:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a10d8:	b2db      	uxtb	r3, r3
 80a10da:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a10de:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a10e2:	b2db      	uxtb	r3, r3
 80a10e4:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a10e8:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a10ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a10f0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a10f4:	021b      	lsls	r3, r3, #8
 80a10f6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a10fa:	4303      	orrs	r3, r0
 80a10fc:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a10fe:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1102:	e0e0      	b.n	80a12c6 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1104:	20000490 	.word	0x20000490
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1108:	4600      	mov	r0, r0
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a122a:	79e3      	ldrb	r3, [r4, #7]
 80a122c:	6810      	ldr	r0, [r2, #0]
 80a122e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1232:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1236:	88bf      	ldrh	r7, [r7, #4]
 80a1238:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a123c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a123e:	4600      	mov	r0, r0
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a12ae:	9b04      	ldr	r3, [sp, #16]
 80a12b0:	085b      	lsrs	r3, r3, #1
 80a12b2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a12b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a12b8:	3301      	adds	r3, #1
 80a12ba:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a12bc:	2b17      	cmp	r3, #23
 80a12be:	f88d 3005 	strb.w	r3, [sp, #5]
 80a12c2:	f200 80e3 	bhi.w	80a148c <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a12c6:	79e3      	ldrb	r3, [r4, #7]
 80a12c8:	6810      	ldr	r0, [r2, #0]
 80a12ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12ce:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12d2:	88bf      	ldrh	r7, [r7, #4]
 80a12d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12d8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a12da:	9803      	ldr	r0, [sp, #12]
 80a12dc:	9b04      	ldr	r3, [sp, #16]
 80a12de:	4218      	tst	r0, r3
 80a12e0:	f47f af12 	bne.w	80a1108 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12e4:	4600      	mov	r0, r0
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a1366:	79e3      	ldrb	r3, [r4, #7]
 80a1368:	6810      	ldr	r0, [r2, #0]
 80a136a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a136e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1372:	88bf      	ldrh	r7, [r7, #4]
 80a1374:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1378:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a137a:	4600      	mov	r0, r0
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	e710      	b.n	80a12ae <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a148c:	468e      	mov	lr, r1
 80a148e:	e60d      	b.n	80a10ac <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1490 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a1490:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1492:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a1494:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
 80a1498:	428c      	cmp	r4, r1
 80a149a:	d927      	bls.n	80a14ec <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
 80a149c:	7a04      	ldrb	r4, [r0, #8]
 80a149e:	b144      	cbz	r4, 80a14b2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
 80a14a0:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a14a2:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a14a4:	436c      	muls	r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a14a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
      g = (g * brightness) >> 8;
 80a14aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
      b = (b * brightness) >> 8;
 80a14ae:	f3c4 2507 	ubfx	r5, r4, #8, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
 80a14b2:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
 80a14b4:	68c6      	ldr	r6, [r0, #12]
 80a14b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a14ba:	2f08      	cmp	r7, #8
 80a14bc:	eb06 0401 	add.w	r4, r6, r1
 80a14c0:	d811      	bhi.n	80a14e6 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
 80a14c2:	2001      	movs	r0, #1
 80a14c4:	40b8      	lsls	r0, r7
 80a14c6:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
 80a14ca:	d108      	bne.n	80a14de <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a14cc:	06c0      	lsls	r0, r0, #27
 80a14ce:	d50a      	bpl.n	80a14e6 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a14d0:	2aff      	cmp	r2, #255	; 0xff
 80a14d2:	bf08      	it	eq
 80a14d4:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
 80a14d6:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a14d8:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a14da:	70a3      	strb	r3, [r4, #2]
 80a14dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a14de:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a14e0:	7062      	strb	r2, [r4, #1]
          *p = b;
 80a14e2:	70a5      	strb	r5, [r4, #2]
 80a14e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a14e6:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a14e8:	7063      	strb	r3, [r4, #1]
          *p = b;
 80a14ea:	70a5      	strb	r5, [r4, #2]
 80a14ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a14f0 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a14f0:	b508      	push	{r3, lr}
 80a14f2:	f000 f807 	bl	80a1504 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a14f6:	f000 f805 	bl	80a1504 <HAL_Pin_Map>
 80a14fa:	4b01      	ldr	r3, [pc, #4]	; (80a1500 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a14fc:	6018      	str	r0, [r3, #0]
 80a14fe:	bd08      	pop	{r3, pc}
 80a1500:	20000490 	.word	0x20000490

080a1504 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1504:	b508      	push	{r3, lr}
 80a1506:	4b02      	ldr	r3, [pc, #8]	; (80a1510 <HAL_Pin_Map+0xc>)
 80a1508:	681b      	ldr	r3, [r3, #0]
 80a150a:	681b      	ldr	r3, [r3, #0]
 80a150c:	9301      	str	r3, [sp, #4]
 80a150e:	bd08      	pop	{r3, pc}
 80a1510:	080601b0 	.word	0x080601b0

080a1514 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1514:	b508      	push	{r3, lr}
 80a1516:	4b02      	ldr	r3, [pc, #8]	; (80a1520 <HAL_Pin_Mode+0xc>)
 80a1518:	681b      	ldr	r3, [r3, #0]
 80a151a:	689b      	ldr	r3, [r3, #8]
 80a151c:	9301      	str	r3, [sp, #4]
 80a151e:	bd08      	pop	{r3, pc}
 80a1520:	080601b0 	.word	0x080601b0

080a1524 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1524:	b508      	push	{r3, lr}
 80a1526:	4b02      	ldr	r3, [pc, #8]	; (80a1530 <HAL_Get_Pin_Mode+0xc>)
 80a1528:	681b      	ldr	r3, [r3, #0]
 80a152a:	68db      	ldr	r3, [r3, #12]
 80a152c:	9301      	str	r3, [sp, #4]
 80a152e:	bd08      	pop	{r3, pc}
 80a1530:	080601b0 	.word	0x080601b0

080a1534 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1534:	b508      	push	{r3, lr}
 80a1536:	4b02      	ldr	r3, [pc, #8]	; (80a1540 <HAL_GPIO_Write+0xc>)
 80a1538:	681b      	ldr	r3, [r3, #0]
 80a153a:	691b      	ldr	r3, [r3, #16]
 80a153c:	9301      	str	r3, [sp, #4]
 80a153e:	bd08      	pop	{r3, pc}
 80a1540:	080601b0 	.word	0x080601b0

080a1544 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1544:	b508      	push	{r3, lr}
 80a1546:	4b02      	ldr	r3, [pc, #8]	; (80a1550 <HAL_SPI_Init+0xc>)
 80a1548:	681b      	ldr	r3, [r3, #0]
 80a154a:	69db      	ldr	r3, [r3, #28]
 80a154c:	9301      	str	r3, [sp, #4]
 80a154e:	bd08      	pop	{r3, pc}
 80a1550:	080601b4 	.word	0x080601b4

080a1554 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1554:	b508      	push	{r3, lr}
 80a1556:	4b02      	ldr	r3, [pc, #8]	; (80a1560 <HAL_SPI_Is_Enabled+0xc>)
 80a1558:	681b      	ldr	r3, [r3, #0]
 80a155a:	6a1b      	ldr	r3, [r3, #32]
 80a155c:	9301      	str	r3, [sp, #4]
 80a155e:	bd08      	pop	{r3, pc}
 80a1560:	080601b4 	.word	0x080601b4

080a1564 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1564:	b508      	push	{r3, lr}
 80a1566:	4b02      	ldr	r3, [pc, #8]	; (80a1570 <HAL_RNG_GetRandomNumber+0xc>)
 80a1568:	681b      	ldr	r3, [r3, #0]
 80a156a:	685b      	ldr	r3, [r3, #4]
 80a156c:	9301      	str	r3, [sp, #4]
 80a156e:	bd08      	pop	{r3, pc}
 80a1570:	0806019c 	.word	0x0806019c

080a1574 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1574:	b508      	push	{r3, lr}
 80a1576:	4b02      	ldr	r3, [pc, #8]	; (80a1580 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1578:	681b      	ldr	r3, [r3, #0]
 80a157a:	691b      	ldr	r3, [r3, #16]
 80a157c:	9301      	str	r3, [sp, #4]
 80a157e:	bd08      	pop	{r3, pc}
 80a1580:	0806019c 	.word	0x0806019c

080a1584 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1584:	b508      	push	{r3, lr}
 80a1586:	4b02      	ldr	r3, [pc, #8]	; (80a1590 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1588:	681b      	ldr	r3, [r3, #0]
 80a158a:	695b      	ldr	r3, [r3, #20]
 80a158c:	9301      	str	r3, [sp, #4]
 80a158e:	bd08      	pop	{r3, pc}
 80a1590:	0806019c 	.word	0x0806019c

080a1594 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1594:	b508      	push	{r3, lr}
 80a1596:	4b02      	ldr	r3, [pc, #8]	; (80a15a0 <os_mutex_recursive_create+0xc>)
 80a1598:	681b      	ldr	r3, [r3, #0]
 80a159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a159c:	9301      	str	r3, [sp, #4]
 80a159e:	bd08      	pop	{r3, pc}
 80a15a0:	080601d0 	.word	0x080601d0

080a15a4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a15a4:	b508      	push	{r3, lr}
 80a15a6:	4b02      	ldr	r3, [pc, #8]	; (80a15b0 <os_mutex_recursive_destroy+0xc>)
 80a15a8:	681b      	ldr	r3, [r3, #0]
 80a15aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a15ac:	9301      	str	r3, [sp, #4]
 80a15ae:	bd08      	pop	{r3, pc}
 80a15b0:	080601d0 	.word	0x080601d0

080a15b4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a15b4:	b508      	push	{r3, lr}
 80a15b6:	4b02      	ldr	r3, [pc, #8]	; (80a15c0 <HAL_USART_Init+0xc>)
 80a15b8:	681b      	ldr	r3, [r3, #0]
 80a15ba:	699b      	ldr	r3, [r3, #24]
 80a15bc:	9301      	str	r3, [sp, #4]
 80a15be:	bd08      	pop	{r3, pc}
 80a15c0:	080601c4 	.word	0x080601c4

080a15c4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a15c4:	b508      	push	{r3, lr}
 80a15c6:	4b02      	ldr	r3, [pc, #8]	; (80a15d0 <HAL_USART_Write_Data+0xc>)
 80a15c8:	681b      	ldr	r3, [r3, #0]
 80a15ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a15cc:	9301      	str	r3, [sp, #4]
 80a15ce:	bd08      	pop	{r3, pc}
 80a15d0:	080601c4 	.word	0x080601c4

080a15d4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a15d4:	b508      	push	{r3, lr}
 80a15d6:	4b02      	ldr	r3, [pc, #8]	; (80a15e0 <HAL_USART_Available_Data+0xc>)
 80a15d8:	681b      	ldr	r3, [r3, #0]
 80a15da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a15dc:	9301      	str	r3, [sp, #4]
 80a15de:	bd08      	pop	{r3, pc}
 80a15e0:	080601c4 	.word	0x080601c4

080a15e4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a15e4:	b508      	push	{r3, lr}
 80a15e6:	4b02      	ldr	r3, [pc, #8]	; (80a15f0 <HAL_USART_Read_Data+0xc>)
 80a15e8:	681b      	ldr	r3, [r3, #0]
 80a15ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a15ec:	9301      	str	r3, [sp, #4]
 80a15ee:	bd08      	pop	{r3, pc}
 80a15f0:	080601c4 	.word	0x080601c4

080a15f4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a15f4:	b508      	push	{r3, lr}
 80a15f6:	4b02      	ldr	r3, [pc, #8]	; (80a1600 <HAL_USART_Peek_Data+0xc>)
 80a15f8:	681b      	ldr	r3, [r3, #0]
 80a15fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a15fc:	9301      	str	r3, [sp, #4]
 80a15fe:	bd08      	pop	{r3, pc}
 80a1600:	080601c4 	.word	0x080601c4

080a1604 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1604:	b508      	push	{r3, lr}
 80a1606:	4b02      	ldr	r3, [pc, #8]	; (80a1610 <HAL_USART_Flush_Data+0xc>)
 80a1608:	681b      	ldr	r3, [r3, #0]
 80a160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a160c:	9301      	str	r3, [sp, #4]
 80a160e:	bd08      	pop	{r3, pc}
 80a1610:	080601c4 	.word	0x080601c4

080a1614 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1614:	b508      	push	{r3, lr}
 80a1616:	4b02      	ldr	r3, [pc, #8]	; (80a1620 <HAL_USART_Is_Enabled+0xc>)
 80a1618:	681b      	ldr	r3, [r3, #0]
 80a161a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a161c:	9301      	str	r3, [sp, #4]
 80a161e:	bd08      	pop	{r3, pc}
 80a1620:	080601c4 	.word	0x080601c4

080a1624 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1624:	b508      	push	{r3, lr}
 80a1626:	4b02      	ldr	r3, [pc, #8]	; (80a1630 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1628:	681b      	ldr	r3, [r3, #0]
 80a162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a162c:	9301      	str	r3, [sp, #4]
 80a162e:	bd08      	pop	{r3, pc}
 80a1630:	080601c4 	.word	0x080601c4

080a1634 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1634:	b508      	push	{r3, lr}
 80a1636:	4b02      	ldr	r3, [pc, #8]	; (80a1640 <HAL_I2C_Write_Data+0xc>)
 80a1638:	681b      	ldr	r3, [r3, #0]
 80a163a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a163c:	9301      	str	r3, [sp, #4]
 80a163e:	bd08      	pop	{r3, pc}
 80a1640:	080601ac 	.word	0x080601ac

080a1644 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1644:	b508      	push	{r3, lr}
 80a1646:	4b02      	ldr	r3, [pc, #8]	; (80a1650 <HAL_I2C_Available_Data+0xc>)
 80a1648:	681b      	ldr	r3, [r3, #0]
 80a164a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a164c:	9301      	str	r3, [sp, #4]
 80a164e:	bd08      	pop	{r3, pc}
 80a1650:	080601ac 	.word	0x080601ac

080a1654 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1654:	b508      	push	{r3, lr}
 80a1656:	4b02      	ldr	r3, [pc, #8]	; (80a1660 <HAL_I2C_Read_Data+0xc>)
 80a1658:	681b      	ldr	r3, [r3, #0]
 80a165a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a165c:	9301      	str	r3, [sp, #4]
 80a165e:	bd08      	pop	{r3, pc}
 80a1660:	080601ac 	.word	0x080601ac

080a1664 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1664:	b508      	push	{r3, lr}
 80a1666:	4b02      	ldr	r3, [pc, #8]	; (80a1670 <HAL_I2C_Peek_Data+0xc>)
 80a1668:	681b      	ldr	r3, [r3, #0]
 80a166a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a166c:	9301      	str	r3, [sp, #4]
 80a166e:	bd08      	pop	{r3, pc}
 80a1670:	080601ac 	.word	0x080601ac

080a1674 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1674:	b508      	push	{r3, lr}
 80a1676:	4b02      	ldr	r3, [pc, #8]	; (80a1680 <HAL_I2C_Flush_Data+0xc>)
 80a1678:	681b      	ldr	r3, [r3, #0]
 80a167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a167c:	9301      	str	r3, [sp, #4]
 80a167e:	bd08      	pop	{r3, pc}
 80a1680:	080601ac 	.word	0x080601ac

080a1684 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1684:	b508      	push	{r3, lr}
 80a1686:	4b02      	ldr	r3, [pc, #8]	; (80a1690 <HAL_I2C_Is_Enabled+0xc>)
 80a1688:	681b      	ldr	r3, [r3, #0]
 80a168a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a168c:	9301      	str	r3, [sp, #4]
 80a168e:	bd08      	pop	{r3, pc}
 80a1690:	080601ac 	.word	0x080601ac

080a1694 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a1694:	b508      	push	{r3, lr}
 80a1696:	4b03      	ldr	r3, [pc, #12]	; (80a16a4 <HAL_I2C_Init+0x10>)
 80a1698:	681b      	ldr	r3, [r3, #0]
 80a169a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a169e:	9301      	str	r3, [sp, #4]
 80a16a0:	bd08      	pop	{r3, pc}
 80a16a2:	0000      	.short	0x0000
 80a16a4:	080601ac 	.word	0x080601ac

080a16a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a16a8:	b508      	push	{r3, lr}
 80a16aa:	4b02      	ldr	r3, [pc, #8]	; (80a16b4 <HAL_USB_USART_Init+0xc>)
 80a16ac:	681b      	ldr	r3, [r3, #0]
 80a16ae:	681b      	ldr	r3, [r3, #0]
 80a16b0:	9301      	str	r3, [sp, #4]
 80a16b2:	bd08      	pop	{r3, pc}
 80a16b4:	080601d8 	.word	0x080601d8

080a16b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a16b8:	b508      	push	{r3, lr}
 80a16ba:	4b02      	ldr	r3, [pc, #8]	; (80a16c4 <HAL_USB_USART_Available_Data+0xc>)
 80a16bc:	681b      	ldr	r3, [r3, #0]
 80a16be:	691b      	ldr	r3, [r3, #16]
 80a16c0:	9301      	str	r3, [sp, #4]
 80a16c2:	bd08      	pop	{r3, pc}
 80a16c4:	080601d8 	.word	0x080601d8

080a16c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a16c8:	b508      	push	{r3, lr}
 80a16ca:	4b02      	ldr	r3, [pc, #8]	; (80a16d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a16cc:	681b      	ldr	r3, [r3, #0]
 80a16ce:	695b      	ldr	r3, [r3, #20]
 80a16d0:	9301      	str	r3, [sp, #4]
 80a16d2:	bd08      	pop	{r3, pc}
 80a16d4:	080601d8 	.word	0x080601d8

080a16d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a16d8:	b508      	push	{r3, lr}
 80a16da:	4b02      	ldr	r3, [pc, #8]	; (80a16e4 <HAL_USB_USART_Receive_Data+0xc>)
 80a16dc:	681b      	ldr	r3, [r3, #0]
 80a16de:	699b      	ldr	r3, [r3, #24]
 80a16e0:	9301      	str	r3, [sp, #4]
 80a16e2:	bd08      	pop	{r3, pc}
 80a16e4:	080601d8 	.word	0x080601d8

080a16e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a16e8:	b508      	push	{r3, lr}
 80a16ea:	4b02      	ldr	r3, [pc, #8]	; (80a16f4 <HAL_USB_USART_Send_Data+0xc>)
 80a16ec:	681b      	ldr	r3, [r3, #0]
 80a16ee:	69db      	ldr	r3, [r3, #28]
 80a16f0:	9301      	str	r3, [sp, #4]
 80a16f2:	bd08      	pop	{r3, pc}
 80a16f4:	080601d8 	.word	0x080601d8

080a16f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a16f8:	b508      	push	{r3, lr}
 80a16fa:	4b02      	ldr	r3, [pc, #8]	; (80a1704 <HAL_USB_USART_Flush_Data+0xc>)
 80a16fc:	681b      	ldr	r3, [r3, #0]
 80a16fe:	6a1b      	ldr	r3, [r3, #32]
 80a1700:	9301      	str	r3, [sp, #4]
 80a1702:	bd08      	pop	{r3, pc}
 80a1704:	080601d8 	.word	0x080601d8

080a1708 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1708:	b508      	push	{r3, lr}
 80a170a:	4b02      	ldr	r3, [pc, #8]	; (80a1714 <inet_gethostbyname+0xc>)
 80a170c:	681b      	ldr	r3, [r3, #0]
 80a170e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1710:	9301      	str	r3, [sp, #4]
 80a1712:	bd08      	pop	{r3, pc}
 80a1714:	080601c0 	.word	0x080601c0

080a1718 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1718:	b508      	push	{r3, lr}
 80a171a:	4b02      	ldr	r3, [pc, #8]	; (80a1724 <set_system_mode+0xc>)
 80a171c:	681b      	ldr	r3, [r3, #0]
 80a171e:	685b      	ldr	r3, [r3, #4]
 80a1720:	9301      	str	r3, [sp, #4]
 80a1722:	bd08      	pop	{r3, pc}
 80a1724:	080601a4 	.word	0x080601a4

080a1728 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1728:	b508      	push	{r3, lr}
 80a172a:	4b02      	ldr	r3, [pc, #8]	; (80a1734 <system_delay_ms+0xc>)
 80a172c:	681b      	ldr	r3, [r3, #0]
 80a172e:	695b      	ldr	r3, [r3, #20]
 80a1730:	9301      	str	r3, [sp, #4]
 80a1732:	bd08      	pop	{r3, pc}
 80a1734:	080601a4 	.word	0x080601a4

080a1738 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1738:	b508      	push	{r3, lr}
 80a173a:	4b03      	ldr	r3, [pc, #12]	; (80a1748 <system_ctrl_set_app_request_handler+0x10>)
 80a173c:	681b      	ldr	r3, [r3, #0]
 80a173e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1742:	9301      	str	r3, [sp, #4]
 80a1744:	bd08      	pop	{r3, pc}
 80a1746:	0000      	.short	0x0000
 80a1748:	080601a4 	.word	0x080601a4

080a174c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a174c:	b508      	push	{r3, lr}
 80a174e:	4b03      	ldr	r3, [pc, #12]	; (80a175c <system_ctrl_set_result+0x10>)
 80a1750:	681b      	ldr	r3, [r3, #0]
 80a1752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1756:	9301      	str	r3, [sp, #4]
 80a1758:	bd08      	pop	{r3, pc}
 80a175a:	0000      	.short	0x0000
 80a175c:	080601a4 	.word	0x080601a4

080a1760 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <network_connect+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	685b      	ldr	r3, [r3, #4]
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601c8 	.word	0x080601c8

080a1770 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <network_connecting+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	689b      	ldr	r3, [r3, #8]
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	080601c8 	.word	0x080601c8

080a1780 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <network_disconnect+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	68db      	ldr	r3, [r3, #12]
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601c8 	.word	0x080601c8

080a1790 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <network_ready+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	691b      	ldr	r3, [r3, #16]
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601c8 	.word	0x080601c8

080a17a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <network_on+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	695b      	ldr	r3, [r3, #20]
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601c8 	.word	0x080601c8

080a17b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <network_off+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	699b      	ldr	r3, [r3, #24]
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601c8 	.word	0x080601c8

080a17c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <network_listen+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	69db      	ldr	r3, [r3, #28]
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601c8 	.word	0x080601c8

080a17d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <network_listening+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	6a1b      	ldr	r3, [r3, #32]
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601c8 	.word	0x080601c8

080a17e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <network_set_listen_timeout+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601c8 	.word	0x080601c8

080a17f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <network_get_listen_timeout+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601c8 	.word	0x080601c8

080a1800 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601cc 	.word	0x080601cc

080a1810 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <malloc+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	681b      	ldr	r3, [r3, #0]
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601a0 	.word	0x080601a0

080a1820 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <free+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	685b      	ldr	r3, [r3, #4]
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	080601a0 	.word	0x080601a0

080a1830 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1830:	b570      	push	{r4, r5, r6, lr}
 80a1832:	4604      	mov	r4, r0
 80a1834:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1836:	2500      	movs	r5, #0
 80a1838:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a183c:	f7ff feaa 	bl	80a1594 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a1840:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a1842:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a1844:	f7ff fe7e 	bl	80a1544 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1848:	6065      	str	r5, [r4, #4]
}
 80a184a:	4620      	mov	r0, r4
 80a184c:	bd70      	pop	{r4, r5, r6, pc}

080a184e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a184e:	7800      	ldrb	r0, [r0, #0]
 80a1850:	f7ff be80 	b.w	80a1554 <HAL_SPI_Is_Enabled>

080a1854 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1854:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1858:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a185a:	4c08      	ldr	r4, [pc, #32]	; (80a187c <_GLOBAL__sub_I_System+0x28>)
 80a185c:	2000      	movs	r0, #0
 80a185e:	6020      	str	r0, [r4, #0]
 80a1860:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1862:	71a0      	strb	r0, [r4, #6]
 80a1864:	8120      	strh	r0, [r4, #8]
 80a1866:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1868:	f7ff ff56 	bl	80a1718 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a186c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a186e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1872:	4a03      	ldr	r2, [pc, #12]	; (80a1880 <_GLOBAL__sub_I_System+0x2c>)
 80a1874:	4903      	ldr	r1, [pc, #12]	; (80a1884 <_GLOBAL__sub_I_System+0x30>)
 80a1876:	f000 bca1 	b.w	80a21bc <__aeabi_atexit>
 80a187a:	bf00      	nop
 80a187c:	20000494 	.word	0x20000494
 80a1880:	20000068 	.word	0x20000068
 80a1884:	080a00af 	.word	0x080a00af

080a1888 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a188a:	4606      	mov	r6, r0
 80a188c:	460d      	mov	r5, r1
 80a188e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1890:	2400      	movs	r4, #0
  while (size--) {
 80a1892:	42bd      	cmp	r5, r7
 80a1894:	d00c      	beq.n	80a18b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1896:	6833      	ldr	r3, [r6, #0]
 80a1898:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a189c:	689b      	ldr	r3, [r3, #8]
 80a189e:	4630      	mov	r0, r6
 80a18a0:	4798      	blx	r3
     if (chunk>=0)
 80a18a2:	2800      	cmp	r0, #0
 80a18a4:	db01      	blt.n	80a18aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a18a6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a18a8:	e7f3      	b.n	80a1892 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a18aa:	2c00      	cmp	r4, #0
 80a18ac:	bf08      	it	eq
 80a18ae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a18b0:	4620      	mov	r0, r4
 80a18b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a18b4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a18b4:	b570      	push	{r4, r5, r6, lr}
 80a18b6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a18b8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a18ba:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a18bc:	b149      	cbz	r1, 80a18d2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a18be:	f000 fe31 	bl	80a2524 <strlen>
 80a18c2:	682b      	ldr	r3, [r5, #0]
 80a18c4:	4602      	mov	r2, r0
 80a18c6:	4621      	mov	r1, r4
 80a18c8:	4628      	mov	r0, r5
    }
 80a18ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a18ce:	68db      	ldr	r3, [r3, #12]
 80a18d0:	4718      	bx	r3
    }
 80a18d2:	bd70      	pop	{r4, r5, r6, pc}

080a18d4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a18d4:	6803      	ldr	r3, [r0, #0]
 80a18d6:	689b      	ldr	r3, [r3, #8]
 80a18d8:	4718      	bx	r3

080a18da <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a18da:	2a01      	cmp	r2, #1
 80a18dc:	bf98      	it	ls
 80a18de:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a18e0:	b530      	push	{r4, r5, lr}
 80a18e2:	460b      	mov	r3, r1
 80a18e4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a18e6:	2100      	movs	r1, #0
 80a18e8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a18ec:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a18f0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a18f4:	fb05 3312 	mls	r3, r5, r2, r3
 80a18f8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a18fa:	2b09      	cmp	r3, #9
 80a18fc:	bf94      	ite	ls
 80a18fe:	3330      	addls	r3, #48	; 0x30
 80a1900:	3337      	addhi	r3, #55	; 0x37
 80a1902:	b2db      	uxtb	r3, r3
 80a1904:	4621      	mov	r1, r4
 80a1906:	f804 3901 	strb.w	r3, [r4], #-1
 80a190a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a190c:	2d00      	cmp	r5, #0
 80a190e:	d1ef      	bne.n	80a18f0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1910:	f7ff ffd0 	bl	80a18b4 <_ZN5Print5writeEPKc>
}
 80a1914:	b00b      	add	sp, #44	; 0x2c
 80a1916:	bd30      	pop	{r4, r5, pc}

080a1918 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1918:	2300      	movs	r3, #0
 80a191a:	461a      	mov	r2, r3
 80a191c:	4619      	mov	r1, r3
 80a191e:	6840      	ldr	r0, [r0, #4]
 80a1920:	f7ff bf3e 	b.w	80a17a0 <network_on>

080a1924 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1924:	4a01      	ldr	r2, [pc, #4]	; (80a192c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1926:	4b02      	ldr	r3, [pc, #8]	; (80a1930 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1928:	601a      	str	r2, [r3, #0]
 80a192a:	4770      	bx	lr
 80a192c:	080a25d2 	.word	0x080a25d2
 80a1930:	200004a0 	.word	0x200004a0

080a1934 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1934:	4b02      	ldr	r3, [pc, #8]	; (80a1940 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1936:	681a      	ldr	r2, [r3, #0]
 80a1938:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a193a:	601a      	str	r2, [r3, #0]
 80a193c:	4770      	bx	lr
 80a193e:	bf00      	nop
 80a1940:	20000000 	.word	0x20000000
 80a1944:	200004a4 	.word	0x200004a4

080a1948 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1948:	2100      	movs	r1, #0
 80a194a:	f7ff beed 	b.w	80a1728 <system_delay_ms>

080a194e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a194e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1950:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1952:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1954:	b113      	cbz	r3, 80a195c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1956:	2203      	movs	r2, #3
 80a1958:	4601      	mov	r1, r0
 80a195a:	4798      	blx	r3
    }
 80a195c:	4620      	mov	r0, r4
 80a195e:	bd10      	pop	{r4, pc}

080a1960 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1960:	b510      	push	{r4, lr}
 80a1962:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1964:	f7ff fff3 	bl	80a194e <_ZNSt14_Function_baseD1Ev>
 80a1968:	4620      	mov	r0, r4
 80a196a:	bd10      	pop	{r4, pc}

080a196c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a196c:	4803      	ldr	r0, [pc, #12]	; (80a197c <_GLOBAL__sub_I_RGB+0x10>)
 80a196e:	2300      	movs	r3, #0
 80a1970:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1972:	4a03      	ldr	r2, [pc, #12]	; (80a1980 <_GLOBAL__sub_I_RGB+0x14>)
 80a1974:	4903      	ldr	r1, [pc, #12]	; (80a1984 <_GLOBAL__sub_I_RGB+0x18>)
 80a1976:	f000 bc21 	b.w	80a21bc <__aeabi_atexit>
 80a197a:	bf00      	nop
 80a197c:	200004a8 	.word	0x200004a8
 80a1980:	20000068 	.word	0x20000068
 80a1984:	080a1961 	.word	0x080a1961

080a1988 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1988:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a198a:	4b14      	ldr	r3, [pc, #80]	; (80a19dc <serialEventRun+0x54>)
 80a198c:	b133      	cbz	r3, 80a199c <serialEventRun+0x14>
 80a198e:	f000 f967 	bl	80a1c60 <_Z16_fetch_usbserialv>
 80a1992:	6803      	ldr	r3, [r0, #0]
 80a1994:	691b      	ldr	r3, [r3, #16]
 80a1996:	4798      	blx	r3
 80a1998:	2800      	cmp	r0, #0
 80a199a:	dc16      	bgt.n	80a19ca <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a199c:	4b10      	ldr	r3, [pc, #64]	; (80a19e0 <serialEventRun+0x58>)
 80a199e:	b133      	cbz	r3, 80a19ae <serialEventRun+0x26>
 80a19a0:	f000 fa1c 	bl	80a1ddc <_Z22__fetch_global_Serial1v>
 80a19a4:	6803      	ldr	r3, [r0, #0]
 80a19a6:	691b      	ldr	r3, [r3, #16]
 80a19a8:	4798      	blx	r3
 80a19aa:	2800      	cmp	r0, #0
 80a19ac:	dc10      	bgt.n	80a19d0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a19ae:	4b0d      	ldr	r3, [pc, #52]	; (80a19e4 <serialEventRun+0x5c>)
 80a19b0:	b10b      	cbz	r3, 80a19b6 <serialEventRun+0x2e>
 80a19b2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a19b6:	4b0c      	ldr	r3, [pc, #48]	; (80a19e8 <serialEventRun+0x60>)
 80a19b8:	b17b      	cbz	r3, 80a19da <serialEventRun+0x52>
 80a19ba:	f000 f98d 	bl	80a1cd8 <_Z17_fetch_usbserial1v>
 80a19be:	6803      	ldr	r3, [r0, #0]
 80a19c0:	691b      	ldr	r3, [r3, #16]
 80a19c2:	4798      	blx	r3
 80a19c4:	2800      	cmp	r0, #0
 80a19c6:	dc06      	bgt.n	80a19d6 <serialEventRun+0x4e>
 80a19c8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a19ca:	f3af 8000 	nop.w
 80a19ce:	e7e5      	b.n	80a199c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a19d0:	f3af 8000 	nop.w
 80a19d4:	e7eb      	b.n	80a19ae <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a19d6:	f3af 8000 	nop.w
 80a19da:	bd08      	pop	{r3, pc}
	...

080a19ec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a19ec:	b508      	push	{r3, lr}
	serialEventRun();
 80a19ee:	f7ff ffcb 	bl	80a1988 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a19f2:	f7ff fdc7 	bl	80a1584 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a19f6:	4b01      	ldr	r3, [pc, #4]	; (80a19fc <_post_loop+0x10>)
 80a19f8:	6018      	str	r0, [r3, #0]
 80a19fa:	bd08      	pop	{r3, pc}
 80a19fc:	2000093c 	.word	0x2000093c

080a1a00 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1a00:	4802      	ldr	r0, [pc, #8]	; (80a1a0c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1a02:	4a03      	ldr	r2, [pc, #12]	; (80a1a10 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1a04:	4903      	ldr	r1, [pc, #12]	; (80a1a14 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1a06:	1a12      	subs	r2, r2, r0
 80a1a08:	f000 bd50 	b.w	80a24ac <memcpy>
 80a1a0c:	40024000 	.word	0x40024000
 80a1a10:	40024004 	.word	0x40024004
 80a1a14:	080a2810 	.word	0x080a2810

080a1a18 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1a18:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1a1a:	2300      	movs	r3, #0
 80a1a1c:	9300      	str	r3, [sp, #0]
 80a1a1e:	461a      	mov	r2, r3
 80a1a20:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1a24:	f7ff fe92 	bl	80a174c <system_ctrl_set_result>
}
 80a1a28:	b003      	add	sp, #12
 80a1a2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1a30 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1a30:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1a32:	8843      	ldrh	r3, [r0, #2]
 80a1a34:	2b0a      	cmp	r3, #10
 80a1a36:	d008      	beq.n	80a1a4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1a38:	2b50      	cmp	r3, #80	; 0x50
 80a1a3a:	d109      	bne.n	80a1a50 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1a3c:	4b09      	ldr	r3, [pc, #36]	; (80a1a64 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1a3e:	681b      	ldr	r3, [r3, #0]
 80a1a40:	b13b      	cbz	r3, 80a1a52 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1a42:	b003      	add	sp, #12
 80a1a44:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1a48:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1a4a:	f7ff ffe5 	bl	80a1a18 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1a4e:	e006      	b.n	80a1a5e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1a50:	2300      	movs	r3, #0
 80a1a52:	9300      	str	r3, [sp, #0]
 80a1a54:	461a      	mov	r2, r3
 80a1a56:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1a5a:	f7ff fe77 	bl	80a174c <system_ctrl_set_result>
        break;
    }
}
 80a1a5e:	b003      	add	sp, #12
 80a1a60:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1a64:	200004b8 	.word	0x200004b8

080a1a68 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1a68:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1a6a:	4c10      	ldr	r4, [pc, #64]	; (80a1aac <module_user_init_hook+0x44>)
 80a1a6c:	4d10      	ldr	r5, [pc, #64]	; (80a1ab0 <module_user_init_hook+0x48>)
 80a1a6e:	6823      	ldr	r3, [r4, #0]
 80a1a70:	42ab      	cmp	r3, r5
 80a1a72:	4b10      	ldr	r3, [pc, #64]	; (80a1ab4 <module_user_init_hook+0x4c>)
 80a1a74:	bf0c      	ite	eq
 80a1a76:	2201      	moveq	r2, #1
 80a1a78:	2200      	movne	r2, #0
 80a1a7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1a7c:	d002      	beq.n	80a1a84 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1a7e:	f7ff ffbf 	bl	80a1a00 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1a82:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1a84:	f7ff fd6e 	bl	80a1564 <HAL_RNG_GetRandomNumber>
 80a1a88:	4604      	mov	r4, r0
    srand(seed);
 80a1a8a:	f000 fd23 	bl	80a24d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1a8e:	4b0a      	ldr	r3, [pc, #40]	; (80a1ab8 <module_user_init_hook+0x50>)
 80a1a90:	b113      	cbz	r3, 80a1a98 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1a92:	4620      	mov	r0, r4
 80a1a94:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1a98:	2100      	movs	r1, #0
 80a1a9a:	4807      	ldr	r0, [pc, #28]	; (80a1ab8 <module_user_init_hook+0x50>)
 80a1a9c:	f7ff feb0 	bl	80a1800 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1aa4:	2100      	movs	r1, #0
 80a1aa6:	4805      	ldr	r0, [pc, #20]	; (80a1abc <module_user_init_hook+0x54>)
 80a1aa8:	f7ff be46 	b.w	80a1738 <system_ctrl_set_app_request_handler>
 80a1aac:	40024000 	.word	0x40024000
 80a1ab0:	9a271c1e 	.word	0x9a271c1e
 80a1ab4:	200004bc 	.word	0x200004bc
 80a1ab8:	00000000 	.word	0x00000000
 80a1abc:	080a1a31 	.word	0x080a1a31

080a1ac0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1ac0:	4770      	bx	lr

080a1ac2 <_ZN9IPAddressD0Ev>:
 80a1ac2:	b510      	push	{r4, lr}
 80a1ac4:	4604      	mov	r4, r0
 80a1ac6:	2118      	movs	r1, #24
 80a1ac8:	f000 fb86 	bl	80a21d8 <_ZdlPvj>
 80a1acc:	4620      	mov	r0, r4
 80a1ace:	bd10      	pop	{r4, pc}

080a1ad0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ad2:	460f      	mov	r7, r1
 80a1ad4:	f100 0608 	add.w	r6, r0, #8
 80a1ad8:	1d05      	adds	r5, r0, #4
 80a1ada:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1adc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1ae0:	220a      	movs	r2, #10
 80a1ae2:	4638      	mov	r0, r7
 80a1ae4:	f7ff fef9 	bl	80a18da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1ae8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1aea:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1aec:	d007      	beq.n	80a1afe <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1aee:	2c00      	cmp	r4, #0
 80a1af0:	d0f4      	beq.n	80a1adc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1af2:	212e      	movs	r1, #46	; 0x2e
 80a1af4:	4638      	mov	r0, r7
 80a1af6:	f7ff feed 	bl	80a18d4 <_ZN5Print5printEc>
 80a1afa:	4404      	add	r4, r0
 80a1afc:	e7ee      	b.n	80a1adc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1afe:	4620      	mov	r0, r4
 80a1b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1b04 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1b04:	b510      	push	{r4, lr}
 80a1b06:	4604      	mov	r4, r0
 80a1b08:	4b04      	ldr	r3, [pc, #16]	; (80a1b1c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1b0a:	2211      	movs	r2, #17
 80a1b0c:	f840 3b04 	str.w	r3, [r0], #4
 80a1b10:	2100      	movs	r1, #0
 80a1b12:	f000 fcd6 	bl	80a24c2 <memset>
{
    clear();
}
 80a1b16:	4620      	mov	r0, r4
 80a1b18:	bd10      	pop	{r4, pc}
 80a1b1a:	bf00      	nop
 80a1b1c:	080a2674 	.word	0x080a2674

080a1b20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1b20:	4603      	mov	r3, r0
 80a1b22:	4a07      	ldr	r2, [pc, #28]	; (80a1b40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1b24:	b510      	push	{r4, lr}
 80a1b26:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1b2a:	f101 0210 	add.w	r2, r1, #16
 80a1b2e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1b32:	4291      	cmp	r1, r2
 80a1b34:	f843 4b04 	str.w	r4, [r3], #4
 80a1b38:	d1f9      	bne.n	80a1b2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1b3a:	780a      	ldrb	r2, [r1, #0]
 80a1b3c:	701a      	strb	r2, [r3, #0]
}
 80a1b3e:	bd10      	pop	{r4, pc}
 80a1b40:	080a2674 	.word	0x080a2674

080a1b44 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1b44:	4a02      	ldr	r2, [pc, #8]	; (80a1b50 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1b46:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1b48:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1b4a:	2204      	movs	r2, #4
 80a1b4c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1b4e:	4770      	bx	lr
 80a1b50:	080a2674 	.word	0x080a2674

080a1b54 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1b54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1b56:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1b5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1b5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1b62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1b66:	2304      	movs	r3, #4
 80a1b68:	6041      	str	r1, [r0, #4]
 80a1b6a:	7503      	strb	r3, [r0, #20]
 80a1b6c:	bd10      	pop	{r4, pc}
	...

080a1b70 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b72:	4d04      	ldr	r5, [pc, #16]	; (80a1b84 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1b74:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1b76:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1b7a:	9500      	str	r5, [sp, #0]
 80a1b7c:	f7ff ffea 	bl	80a1b54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1b80:	b003      	add	sp, #12
 80a1b82:	bd30      	pop	{r4, r5, pc}
 80a1b84:	080a2674 	.word	0x080a2674

080a1b88 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1b88:	7441      	strb	r1, [r0, #17]
 80a1b8a:	4770      	bx	lr

080a1b8c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1b8c:	4770      	bx	lr

080a1b8e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1b8e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1b90:	2100      	movs	r1, #0
 80a1b92:	7c00      	ldrb	r0, [r0, #16]
 80a1b94:	f7ff fda0 	bl	80a16d8 <HAL_USB_USART_Receive_Data>
}
 80a1b98:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1b9c:	bf28      	it	cs
 80a1b9e:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1ba2:	bd08      	pop	{r3, pc}

080a1ba4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1ba4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1ba6:	2101      	movs	r1, #1
 80a1ba8:	7c00      	ldrb	r0, [r0, #16]
 80a1baa:	f7ff fd95 	bl	80a16d8 <HAL_USB_USART_Receive_Data>
}
 80a1bae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1bb2:	bf28      	it	cs
 80a1bb4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1bb8:	bd08      	pop	{r3, pc}

080a1bba <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1bba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1bbc:	7c00      	ldrb	r0, [r0, #16]
 80a1bbe:	f7ff fd83 	bl	80a16c8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1bc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1bc6:	bd08      	pop	{r3, pc}

080a1bc8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1bc8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1bca:	7c00      	ldrb	r0, [r0, #16]
 80a1bcc:	f7ff fd74 	bl	80a16b8 <HAL_USB_USART_Available_Data>
}
 80a1bd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1bd4:	bd08      	pop	{r3, pc}

080a1bd6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1bd6:	7c00      	ldrb	r0, [r0, #16]
 80a1bd8:	f7ff bd8e 	b.w	80a16f8 <HAL_USB_USART_Flush_Data>

080a1bdc <_ZN9USBSerialD0Ev>:
 80a1bdc:	b510      	push	{r4, lr}
 80a1bde:	4604      	mov	r4, r0
 80a1be0:	2114      	movs	r1, #20
 80a1be2:	f000 faf9 	bl	80a21d8 <_ZdlPvj>
 80a1be6:	4620      	mov	r0, r4
 80a1be8:	bd10      	pop	{r4, pc}

080a1bea <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1bea:	b538      	push	{r3, r4, r5, lr}
 80a1bec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1bee:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1bf0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1bf2:	f7ff fd69 	bl	80a16c8 <HAL_USB_USART_Available_Data_For_Write>
 80a1bf6:	2800      	cmp	r0, #0
 80a1bf8:	dc01      	bgt.n	80a1bfe <_ZN9USBSerial5writeEh+0x14>
 80a1bfa:	7c60      	ldrb	r0, [r4, #17]
 80a1bfc:	b128      	cbz	r0, 80a1c0a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1bfe:	4629      	mov	r1, r5
 80a1c00:	7c20      	ldrb	r0, [r4, #16]
 80a1c02:	f7ff fd71 	bl	80a16e8 <HAL_USB_USART_Send_Data>
 80a1c06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1c0a:	bd38      	pop	{r3, r4, r5, pc}

080a1c0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1c0c:	b510      	push	{r4, lr}
 80a1c0e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1c10:	2300      	movs	r3, #0
 80a1c12:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1c18:	60a3      	str	r3, [r4, #8]
 80a1c1a:	4b05      	ldr	r3, [pc, #20]	; (80a1c30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1c1c:	4608      	mov	r0, r1
 80a1c1e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1c20:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1c22:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1c24:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1c26:	4611      	mov	r1, r2
 80a1c28:	f7ff fd3e 	bl	80a16a8 <HAL_USB_USART_Init>
}
 80a1c2c:	4620      	mov	r0, r4
 80a1c2e:	bd10      	pop	{r4, pc}
 80a1c30:	080a2688 	.word	0x080a2688

080a1c34 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1c34:	b510      	push	{r4, lr}
 80a1c36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1c38:	2214      	movs	r2, #20
 80a1c3a:	2100      	movs	r1, #0
 80a1c3c:	f000 fc41 	bl	80a24c2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c40:	4b05      	ldr	r3, [pc, #20]	; (80a1c58 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1c42:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c44:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1c46:	4b05      	ldr	r3, [pc, #20]	; (80a1c5c <_Z19acquireSerialBufferv+0x28>)
 80a1c48:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1c4a:	f240 1301 	movw	r3, #257	; 0x101
 80a1c4e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1c50:	2381      	movs	r3, #129	; 0x81
 80a1c52:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1c54:	bd10      	pop	{r4, pc}
 80a1c56:	bf00      	nop
 80a1c58:	20000545 	.word	0x20000545
 80a1c5c:	200004c4 	.word	0x200004c4

080a1c60 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1c60:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c62:	4d0e      	ldr	r5, [pc, #56]	; (80a1c9c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1c64:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1c66:	a801      	add	r0, sp, #4
 80a1c68:	f7ff ffe4 	bl	80a1c34 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c6c:	6829      	ldr	r1, [r5, #0]
 80a1c6e:	f011 0401 	ands.w	r4, r1, #1
 80a1c72:	d110      	bne.n	80a1c96 <_Z16_fetch_usbserialv+0x36>
 80a1c74:	4628      	mov	r0, r5
 80a1c76:	f7fe fa12 	bl	80a009e <__cxa_guard_acquire>
 80a1c7a:	b160      	cbz	r0, 80a1c96 <_Z16_fetch_usbserialv+0x36>
 80a1c7c:	aa01      	add	r2, sp, #4
 80a1c7e:	4621      	mov	r1, r4
 80a1c80:	4807      	ldr	r0, [pc, #28]	; (80a1ca0 <_Z16_fetch_usbserialv+0x40>)
 80a1c82:	f7ff ffc3 	bl	80a1c0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1c86:	4628      	mov	r0, r5
 80a1c88:	f7fe fa0e 	bl	80a00a8 <__cxa_guard_release>
 80a1c8c:	4a05      	ldr	r2, [pc, #20]	; (80a1ca4 <_Z16_fetch_usbserialv+0x44>)
 80a1c8e:	4906      	ldr	r1, [pc, #24]	; (80a1ca8 <_Z16_fetch_usbserialv+0x48>)
 80a1c90:	4803      	ldr	r0, [pc, #12]	; (80a1ca0 <_Z16_fetch_usbserialv+0x40>)
 80a1c92:	f000 fa93 	bl	80a21bc <__aeabi_atexit>
	return _usbserial;
}
 80a1c96:	4802      	ldr	r0, [pc, #8]	; (80a1ca0 <_Z16_fetch_usbserialv+0x40>)
 80a1c98:	b007      	add	sp, #28
 80a1c9a:	bd30      	pop	{r4, r5, pc}
 80a1c9c:	200004c0 	.word	0x200004c0
 80a1ca0:	20000648 	.word	0x20000648
 80a1ca4:	20000068 	.word	0x20000068
 80a1ca8:	080a1b8d 	.word	0x080a1b8d

080a1cac <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1cac:	b510      	push	{r4, lr}
 80a1cae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1cb0:	2214      	movs	r2, #20
 80a1cb2:	2100      	movs	r1, #0
 80a1cb4:	f000 fc05 	bl	80a24c2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1cb8:	4b05      	ldr	r3, [pc, #20]	; (80a1cd0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1cba:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1cbc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1cbe:	4b05      	ldr	r3, [pc, #20]	; (80a1cd4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1cc0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1cc2:	f240 1301 	movw	r3, #257	; 0x101
 80a1cc6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1cc8:	2381      	movs	r3, #129	; 0x81
 80a1cca:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1ccc:	bd10      	pop	{r4, pc}
 80a1cce:	bf00      	nop
 80a1cd0:	200006f8 	.word	0x200006f8
 80a1cd4:	20000660 	.word	0x20000660

080a1cd8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1cd8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1cda:	4c0e      	ldr	r4, [pc, #56]	; (80a1d14 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1cdc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1cde:	a801      	add	r0, sp, #4
 80a1ce0:	f7ff ffe4 	bl	80a1cac <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1ce4:	6823      	ldr	r3, [r4, #0]
 80a1ce6:	07db      	lsls	r3, r3, #31
 80a1ce8:	d410      	bmi.n	80a1d0c <_Z17_fetch_usbserial1v+0x34>
 80a1cea:	4620      	mov	r0, r4
 80a1cec:	f7fe f9d7 	bl	80a009e <__cxa_guard_acquire>
 80a1cf0:	b160      	cbz	r0, 80a1d0c <_Z17_fetch_usbserial1v+0x34>
 80a1cf2:	aa01      	add	r2, sp, #4
 80a1cf4:	2101      	movs	r1, #1
 80a1cf6:	4808      	ldr	r0, [pc, #32]	; (80a1d18 <_Z17_fetch_usbserial1v+0x40>)
 80a1cf8:	f7ff ff88 	bl	80a1c0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1cfc:	4620      	mov	r0, r4
 80a1cfe:	f7fe f9d3 	bl	80a00a8 <__cxa_guard_release>
 80a1d02:	4a06      	ldr	r2, [pc, #24]	; (80a1d1c <_Z17_fetch_usbserial1v+0x44>)
 80a1d04:	4906      	ldr	r1, [pc, #24]	; (80a1d20 <_Z17_fetch_usbserial1v+0x48>)
 80a1d06:	4804      	ldr	r0, [pc, #16]	; (80a1d18 <_Z17_fetch_usbserial1v+0x40>)
 80a1d08:	f000 fa58 	bl	80a21bc <__aeabi_atexit>
  return _usbserial1;
}
 80a1d0c:	4802      	ldr	r0, [pc, #8]	; (80a1d18 <_Z17_fetch_usbserial1v+0x40>)
 80a1d0e:	b006      	add	sp, #24
 80a1d10:	bd10      	pop	{r4, pc}
 80a1d12:	bf00      	nop
 80a1d14:	2000065c 	.word	0x2000065c
 80a1d18:	200006e4 	.word	0x200006e4
 80a1d1c:	20000068 	.word	0x20000068
 80a1d20:	080a1b8d 	.word	0x080a1b8d

080a1d24 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1d24:	4770      	bx	lr

080a1d26 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1d26:	7441      	strb	r1, [r0, #17]
 80a1d28:	4770      	bx	lr

080a1d2a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1d2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1d2c:	7c00      	ldrb	r0, [r0, #16]
 80a1d2e:	f7ff fc79 	bl	80a1624 <HAL_USART_Available_Data_For_Write>
}
 80a1d32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d36:	bd08      	pop	{r3, pc}

080a1d38 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1d38:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1d3a:	7c00      	ldrb	r0, [r0, #16]
 80a1d3c:	f7ff fc4a 	bl	80a15d4 <HAL_USART_Available_Data>
}
 80a1d40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d44:	bd08      	pop	{r3, pc}

080a1d46 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1d46:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1d48:	7c00      	ldrb	r0, [r0, #16]
 80a1d4a:	f7ff fc53 	bl	80a15f4 <HAL_USART_Peek_Data>
}
 80a1d4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1d52:	bf28      	it	cs
 80a1d54:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1d58:	bd08      	pop	{r3, pc}

080a1d5a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1d5a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1d5c:	7c00      	ldrb	r0, [r0, #16]
 80a1d5e:	f7ff fc41 	bl	80a15e4 <HAL_USART_Read_Data>
}
 80a1d62:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1d66:	bf28      	it	cs
 80a1d68:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1d6c:	bd08      	pop	{r3, pc}

080a1d6e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1d6e:	7c00      	ldrb	r0, [r0, #16]
 80a1d70:	f7ff bc48 	b.w	80a1604 <HAL_USART_Flush_Data>

080a1d74 <_ZN11USARTSerialD0Ev>:
 80a1d74:	b510      	push	{r4, lr}
 80a1d76:	4604      	mov	r4, r0
 80a1d78:	2114      	movs	r1, #20
 80a1d7a:	f000 fa2d 	bl	80a21d8 <_ZdlPvj>
 80a1d7e:	4620      	mov	r0, r4
 80a1d80:	bd10      	pop	{r4, pc}

080a1d82 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1d82:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1d84:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1d86:	4604      	mov	r4, r0
 80a1d88:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1d8a:	b925      	cbnz	r5, 80a1d96 <_ZN11USARTSerial5writeEh+0x14>
 80a1d8c:	7c00      	ldrb	r0, [r0, #16]
 80a1d8e:	f7ff fc49 	bl	80a1624 <HAL_USART_Available_Data_For_Write>
 80a1d92:	2800      	cmp	r0, #0
 80a1d94:	dd05      	ble.n	80a1da2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1d96:	4631      	mov	r1, r6
 80a1d98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1d9e:	f7ff bc11 	b.w	80a15c4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1da2:	4628      	mov	r0, r5
 80a1da4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1da8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1da8:	b510      	push	{r4, lr}
 80a1daa:	4604      	mov	r4, r0
 80a1dac:	4608      	mov	r0, r1
 80a1dae:	4611      	mov	r1, r2
 80a1db0:	2200      	movs	r2, #0
 80a1db2:	6062      	str	r2, [r4, #4]
 80a1db4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1db8:	60a2      	str	r2, [r4, #8]
 80a1dba:	4a05      	ldr	r2, [pc, #20]	; (80a1dd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1dbc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1dbe:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1dc0:	2201      	movs	r2, #1
 80a1dc2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1dc4:	461a      	mov	r2, r3
 80a1dc6:	f7ff fbf5 	bl	80a15b4 <HAL_USART_Init>
}
 80a1dca:	4620      	mov	r0, r4
 80a1dcc:	bd10      	pop	{r4, pc}
 80a1dce:	bf00      	nop
 80a1dd0:	080a26b8 	.word	0x080a26b8

080a1dd4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1dd4:	7c00      	ldrb	r0, [r0, #16]
 80a1dd6:	f7ff bc1d 	b.w	80a1614 <HAL_USART_Is_Enabled>
	...

080a1ddc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1ddc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1dde:	4d0c      	ldr	r5, [pc, #48]	; (80a1e10 <_Z22__fetch_global_Serial1v+0x34>)
 80a1de0:	6829      	ldr	r1, [r5, #0]
 80a1de2:	f011 0401 	ands.w	r4, r1, #1
 80a1de6:	d111      	bne.n	80a1e0c <_Z22__fetch_global_Serial1v+0x30>
 80a1de8:	4628      	mov	r0, r5
 80a1dea:	f7fe f958 	bl	80a009e <__cxa_guard_acquire>
 80a1dee:	b168      	cbz	r0, 80a1e0c <_Z22__fetch_global_Serial1v+0x30>
 80a1df0:	4a08      	ldr	r2, [pc, #32]	; (80a1e14 <_Z22__fetch_global_Serial1v+0x38>)
 80a1df2:	4621      	mov	r1, r4
 80a1df4:	4b08      	ldr	r3, [pc, #32]	; (80a1e18 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1df6:	4809      	ldr	r0, [pc, #36]	; (80a1e1c <_Z22__fetch_global_Serial1v+0x40>)
 80a1df8:	f7ff ffd6 	bl	80a1da8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1dfc:	4628      	mov	r0, r5
 80a1dfe:	f7fe f953 	bl	80a00a8 <__cxa_guard_release>
 80a1e02:	4a07      	ldr	r2, [pc, #28]	; (80a1e20 <_Z22__fetch_global_Serial1v+0x44>)
 80a1e04:	4907      	ldr	r1, [pc, #28]	; (80a1e24 <_Z22__fetch_global_Serial1v+0x48>)
 80a1e06:	4805      	ldr	r0, [pc, #20]	; (80a1e1c <_Z22__fetch_global_Serial1v+0x40>)
 80a1e08:	f000 f9d8 	bl	80a21bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1e0c:	4803      	ldr	r0, [pc, #12]	; (80a1e1c <_Z22__fetch_global_Serial1v+0x40>)
 80a1e0e:	bd38      	pop	{r3, r4, r5, pc}
 80a1e10:	20000894 	.word	0x20000894
 80a1e14:	20000898 	.word	0x20000898
 80a1e18:	20000810 	.word	0x20000810
 80a1e1c:	200007fc 	.word	0x200007fc
 80a1e20:	20000068 	.word	0x20000068
 80a1e24:	080a1d25 	.word	0x080a1d25

080a1e28 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a1e28:	4770      	bx	lr

080a1e2a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e2c:	4606      	mov	r6, r0
 80a1e2e:	4615      	mov	r5, r2
 80a1e30:	460c      	mov	r4, r1
 80a1e32:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e34:	42bc      	cmp	r4, r7
 80a1e36:	d006      	beq.n	80a1e46 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1e38:	6833      	ldr	r3, [r6, #0]
 80a1e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1e3e:	689b      	ldr	r3, [r3, #8]
 80a1e40:	4630      	mov	r0, r6
 80a1e42:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e44:	e7f6      	b.n	80a1e34 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1e46:	4628      	mov	r0, r5
 80a1e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e4a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1e4a:	2200      	movs	r2, #0
 80a1e4c:	7c00      	ldrb	r0, [r0, #16]
 80a1e4e:	f7ff bbf1 	b.w	80a1634 <HAL_I2C_Write_Data>

080a1e52 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1e52:	2100      	movs	r1, #0
 80a1e54:	7c00      	ldrb	r0, [r0, #16]
 80a1e56:	f7ff bbf5 	b.w	80a1644 <HAL_I2C_Available_Data>

080a1e5a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1e5a:	2100      	movs	r1, #0
 80a1e5c:	7c00      	ldrb	r0, [r0, #16]
 80a1e5e:	f7ff bbf9 	b.w	80a1654 <HAL_I2C_Read_Data>

080a1e62 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1e62:	2100      	movs	r1, #0
 80a1e64:	7c00      	ldrb	r0, [r0, #16]
 80a1e66:	f7ff bbfd 	b.w	80a1664 <HAL_I2C_Peek_Data>

080a1e6a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1e6a:	2100      	movs	r1, #0
 80a1e6c:	7c00      	ldrb	r0, [r0, #16]
 80a1e6e:	f7ff bc01 	b.w	80a1674 <HAL_I2C_Flush_Data>

080a1e72 <_ZN7TwoWireD0Ev>:
 80a1e72:	b510      	push	{r4, lr}
 80a1e74:	4604      	mov	r4, r0
 80a1e76:	2114      	movs	r1, #20
 80a1e78:	f000 f9ae 	bl	80a21d8 <_ZdlPvj>
 80a1e7c:	4620      	mov	r0, r4
 80a1e7e:	bd10      	pop	{r4, pc}

080a1e80 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1e80:	b510      	push	{r4, lr}
 80a1e82:	4604      	mov	r4, r0
 80a1e84:	2300      	movs	r3, #0
 80a1e86:	6063      	str	r3, [r4, #4]
 80a1e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e8c:	60a3      	str	r3, [r4, #8]
 80a1e8e:	4b04      	ldr	r3, [pc, #16]	; (80a1ea0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a1e90:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1e92:	4608      	mov	r0, r1
 80a1e94:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a1e96:	4611      	mov	r1, r2
 80a1e98:	f7ff fbfc 	bl	80a1694 <HAL_I2C_Init>
}
 80a1e9c:	4620      	mov	r0, r4
 80a1e9e:	bd10      	pop	{r4, pc}
 80a1ea0:	080a26e8 	.word	0x080a26e8

080a1ea4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1ea4:	2100      	movs	r1, #0
 80a1ea6:	7c00      	ldrb	r0, [r0, #16]
 80a1ea8:	f7ff bbec 	b.w	80a1684 <HAL_I2C_Is_Enabled>

080a1eac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1eac:	2200      	movs	r2, #0
 80a1eae:	4611      	mov	r1, r2
 80a1eb0:	6840      	ldr	r0, [r0, #4]
 80a1eb2:	f7ff bc6d 	b.w	80a1790 <network_ready>

080a1eb6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1eb8:	4616      	mov	r6, r2
 80a1eba:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1ebc:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1ebe:	460f      	mov	r7, r1
 80a1ec0:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1ec2:	2100      	movs	r1, #0
 80a1ec4:	a803      	add	r0, sp, #12
 80a1ec6:	f000 fafc 	bl	80a24c2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1eca:	4630      	mov	r0, r6
 80a1ecc:	f000 fb2a 	bl	80a2524 <strlen>
 80a1ed0:	2500      	movs	r5, #0
 80a1ed2:	9500      	str	r5, [sp, #0]
 80a1ed4:	b281      	uxth	r1, r0
 80a1ed6:	687b      	ldr	r3, [r7, #4]
 80a1ed8:	aa03      	add	r2, sp, #12
 80a1eda:	4630      	mov	r0, r6
 80a1edc:	f7ff fc14 	bl	80a1708 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1ee0:	b120      	cbz	r0, 80a1eec <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1ee2:	4629      	mov	r1, r5
 80a1ee4:	4620      	mov	r0, r4
 80a1ee6:	f7ff fe2d 	bl	80a1b44 <_ZN9IPAddressC1Em>
 80a1eea:	e003      	b.n	80a1ef4 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1eec:	a903      	add	r1, sp, #12
 80a1eee:	4620      	mov	r0, r4
 80a1ef0:	f7ff fe16 	bl	80a1b20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1ef4:	4620      	mov	r0, r4
 80a1ef6:	b009      	add	sp, #36	; 0x24
 80a1ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1efa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1efa:	2200      	movs	r2, #0
 80a1efc:	4611      	mov	r1, r2
 80a1efe:	6840      	ldr	r0, [r0, #4]
 80a1f00:	f7ff bc66 	b.w	80a17d0 <network_listening>

080a1f04 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1f04:	2200      	movs	r2, #0
 80a1f06:	4611      	mov	r1, r2
 80a1f08:	6840      	ldr	r0, [r0, #4]
 80a1f0a:	f7ff bc71 	b.w	80a17f0 <network_get_listen_timeout>

080a1f0e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1f0e:	2200      	movs	r2, #0
 80a1f10:	6840      	ldr	r0, [r0, #4]
 80a1f12:	f7ff bc65 	b.w	80a17e0 <network_set_listen_timeout>

080a1f16 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1f16:	2200      	movs	r2, #0
 80a1f18:	f081 0101 	eor.w	r1, r1, #1
 80a1f1c:	6840      	ldr	r0, [r0, #4]
 80a1f1e:	f7ff bc4f 	b.w	80a17c0 <network_listen>

080a1f22 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1f22:	2300      	movs	r3, #0
 80a1f24:	461a      	mov	r2, r3
 80a1f26:	4619      	mov	r1, r3
 80a1f28:	6840      	ldr	r0, [r0, #4]
 80a1f2a:	f7ff bc41 	b.w	80a17b0 <network_off>

080a1f2e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1f2e:	2200      	movs	r2, #0
 80a1f30:	4611      	mov	r1, r2
 80a1f32:	6840      	ldr	r0, [r0, #4]
 80a1f34:	f7ff bc1c 	b.w	80a1770 <network_connecting>

080a1f38 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1f38:	2200      	movs	r2, #0
 80a1f3a:	2102      	movs	r1, #2
 80a1f3c:	6840      	ldr	r0, [r0, #4]
 80a1f3e:	f7ff bc1f 	b.w	80a1780 <network_disconnect>

080a1f42 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1f42:	2300      	movs	r3, #0
 80a1f44:	461a      	mov	r2, r3
 80a1f46:	6840      	ldr	r0, [r0, #4]
 80a1f48:	f7ff bc0a 	b.w	80a1760 <network_connect>

080a1f4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1f4c:	4b02      	ldr	r3, [pc, #8]	; (80a1f58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1f4e:	2204      	movs	r2, #4
 80a1f50:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1f52:	4a02      	ldr	r2, [pc, #8]	; (80a1f5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1f54:	601a      	str	r2, [r3, #0]
 80a1f56:	4770      	bx	lr
 80a1f58:	2000091c 	.word	0x2000091c
 80a1f5c:	080a2710 	.word	0x080a2710

080a1f60 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1f60:	2300      	movs	r3, #0
 80a1f62:	461a      	mov	r2, r3
 80a1f64:	6840      	ldr	r0, [r0, #4]
 80a1f66:	f7ff bbfb 	b.w	80a1760 <network_connect>

080a1f6a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1f6a:	2200      	movs	r2, #0
 80a1f6c:	2102      	movs	r1, #2
 80a1f6e:	6840      	ldr	r0, [r0, #4]
 80a1f70:	f7ff bc06 	b.w	80a1780 <network_disconnect>

080a1f74 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1f74:	2200      	movs	r2, #0
 80a1f76:	4611      	mov	r1, r2
 80a1f78:	6840      	ldr	r0, [r0, #4]
 80a1f7a:	f7ff bbf9 	b.w	80a1770 <network_connecting>

080a1f7e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1f7e:	2200      	movs	r2, #0
 80a1f80:	4611      	mov	r1, r2
 80a1f82:	6840      	ldr	r0, [r0, #4]
 80a1f84:	f7ff bc04 	b.w	80a1790 <network_ready>

080a1f88 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1f88:	2300      	movs	r3, #0
 80a1f8a:	461a      	mov	r2, r3
 80a1f8c:	4619      	mov	r1, r3
 80a1f8e:	6840      	ldr	r0, [r0, #4]
 80a1f90:	f7ff bc06 	b.w	80a17a0 <network_on>

080a1f94 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1f94:	2300      	movs	r3, #0
 80a1f96:	461a      	mov	r2, r3
 80a1f98:	4619      	mov	r1, r3
 80a1f9a:	6840      	ldr	r0, [r0, #4]
 80a1f9c:	f7ff bc08 	b.w	80a17b0 <network_off>

080a1fa0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1fa0:	2200      	movs	r2, #0
 80a1fa2:	f081 0101 	eor.w	r1, r1, #1
 80a1fa6:	6840      	ldr	r0, [r0, #4]
 80a1fa8:	f7ff bc0a 	b.w	80a17c0 <network_listen>

080a1fac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1fac:	2200      	movs	r2, #0
 80a1fae:	6840      	ldr	r0, [r0, #4]
 80a1fb0:	f7ff bc16 	b.w	80a17e0 <network_set_listen_timeout>

080a1fb4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1fb4:	2200      	movs	r2, #0
 80a1fb6:	4611      	mov	r1, r2
 80a1fb8:	6840      	ldr	r0, [r0, #4]
 80a1fba:	f7ff bc19 	b.w	80a17f0 <network_get_listen_timeout>

080a1fbe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1fbe:	2200      	movs	r2, #0
 80a1fc0:	4611      	mov	r1, r2
 80a1fc2:	6840      	ldr	r0, [r0, #4]
 80a1fc4:	f7ff bc04 	b.w	80a17d0 <network_listening>

080a1fc8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1fc8:	b570      	push	{r4, r5, r6, lr}
 80a1fca:	4616      	mov	r6, r2
 80a1fcc:	b08e      	sub	sp, #56	; 0x38
 80a1fce:	4604      	mov	r4, r0
    IPAddress addr;
 80a1fd0:	a808      	add	r0, sp, #32
 80a1fd2:	f7ff fd97 	bl	80a1b04 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1fd6:	2211      	movs	r2, #17
 80a1fd8:	2100      	movs	r1, #0
 80a1fda:	a803      	add	r0, sp, #12
 80a1fdc:	f000 fa71 	bl	80a24c2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1fe0:	4630      	mov	r0, r6
 80a1fe2:	f000 fa9f 	bl	80a2524 <strlen>
 80a1fe6:	2500      	movs	r5, #0
 80a1fe8:	4b0a      	ldr	r3, [pc, #40]	; (80a2014 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1fea:	9500      	str	r5, [sp, #0]
 80a1fec:	b281      	uxth	r1, r0
 80a1fee:	685b      	ldr	r3, [r3, #4]
 80a1ff0:	aa03      	add	r2, sp, #12
 80a1ff2:	4630      	mov	r0, r6
 80a1ff4:	f7ff fb88 	bl	80a1708 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1ff8:	b120      	cbz	r0, 80a2004 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1ffa:	4629      	mov	r1, r5
 80a1ffc:	4620      	mov	r0, r4
 80a1ffe:	f7ff fda1 	bl	80a1b44 <_ZN9IPAddressC1Em>
 80a2002:	e003      	b.n	80a200c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2004:	a903      	add	r1, sp, #12
 80a2006:	4620      	mov	r0, r4
 80a2008:	f7ff fd8a 	bl	80a1b20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a200c:	4620      	mov	r0, r4
 80a200e:	b00e      	add	sp, #56	; 0x38
 80a2010:	bd70      	pop	{r4, r5, r6, pc}
 80a2012:	bf00      	nop
 80a2014:	2000091c 	.word	0x2000091c

080a2018 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2018:	4b02      	ldr	r3, [pc, #8]	; (80a2024 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a201a:	4a03      	ldr	r2, [pc, #12]	; (80a2028 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a201c:	601a      	str	r2, [r3, #0]
 80a201e:	2200      	movs	r2, #0
 80a2020:	605a      	str	r2, [r3, #4]
 80a2022:	4770      	bx	lr
 80a2024:	20000924 	.word	0x20000924
 80a2028:	080a2744 	.word	0x080a2744

080a202c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a202c:	b510      	push	{r4, lr}
 80a202e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2030:	6880      	ldr	r0, [r0, #8]
 80a2032:	b108      	cbz	r0, 80a2038 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2034:	f7ff fab6 	bl	80a15a4 <os_mutex_recursive_destroy>
 80a2038:	4620      	mov	r0, r4
 80a203a:	bd10      	pop	{r4, pc}

080a203c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a203c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a203e:	4e1a      	ldr	r6, [pc, #104]	; (80a20a8 <pinAvailable+0x6c>)
 80a2040:	4604      	mov	r4, r0
 80a2042:	6831      	ldr	r1, [r6, #0]
 80a2044:	f011 0501 	ands.w	r5, r1, #1
 80a2048:	d10f      	bne.n	80a206a <pinAvailable+0x2e>
 80a204a:	4630      	mov	r0, r6
 80a204c:	f7fe f827 	bl	80a009e <__cxa_guard_acquire>
 80a2050:	b158      	cbz	r0, 80a206a <pinAvailable+0x2e>
 80a2052:	4629      	mov	r1, r5
 80a2054:	4815      	ldr	r0, [pc, #84]	; (80a20ac <pinAvailable+0x70>)
 80a2056:	f7ff fbeb 	bl	80a1830 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a205a:	4630      	mov	r0, r6
 80a205c:	f7fe f824 	bl	80a00a8 <__cxa_guard_release>
 80a2060:	4a13      	ldr	r2, [pc, #76]	; (80a20b0 <pinAvailable+0x74>)
 80a2062:	4914      	ldr	r1, [pc, #80]	; (80a20b4 <pinAvailable+0x78>)
 80a2064:	4811      	ldr	r0, [pc, #68]	; (80a20ac <pinAvailable+0x70>)
 80a2066:	f000 f8a9 	bl	80a21bc <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a206a:	4810      	ldr	r0, [pc, #64]	; (80a20ac <pinAvailable+0x70>)
 80a206c:	f7ff fbef 	bl	80a184e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2070:	b128      	cbz	r0, 80a207e <pinAvailable+0x42>
 80a2072:	f1a4 030d 	sub.w	r3, r4, #13
 80a2076:	2b02      	cmp	r3, #2
 80a2078:	d801      	bhi.n	80a207e <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a207a:	2000      	movs	r0, #0
 80a207c:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a207e:	f000 f877 	bl	80a2170 <_Z19__fetch_global_Wirev>
 80a2082:	f7ff ff0f 	bl	80a1ea4 <_ZN7TwoWire9isEnabledEv>
 80a2086:	b108      	cbz	r0, 80a208c <pinAvailable+0x50>
 80a2088:	2c01      	cmp	r4, #1
 80a208a:	d9f6      	bls.n	80a207a <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a208c:	f7ff fea6 	bl	80a1ddc <_Z22__fetch_global_Serial1v>
 80a2090:	f7ff fea0 	bl	80a1dd4 <_ZN11USARTSerial9isEnabledEv>
 80a2094:	b118      	cbz	r0, 80a209e <pinAvailable+0x62>
 80a2096:	f1a4 0312 	sub.w	r3, r4, #18
 80a209a:	2b01      	cmp	r3, #1
 80a209c:	d9ed      	bls.n	80a207a <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a209e:	2c17      	cmp	r4, #23
 80a20a0:	bf8c      	ite	hi
 80a20a2:	2000      	movhi	r0, #0
 80a20a4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a20a6:	bd70      	pop	{r4, r5, r6, pc}
 80a20a8:	2000092c 	.word	0x2000092c
 80a20ac:	20000930 	.word	0x20000930
 80a20b0:	20000068 	.word	0x20000068
 80a20b4:	080a202d 	.word	0x080a202d

080a20b8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a20b8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a20ba:	b538      	push	{r3, r4, r5, lr}
 80a20bc:	4604      	mov	r4, r0
 80a20be:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a20c0:	d80a      	bhi.n	80a20d8 <pinMode+0x20>
 80a20c2:	29ff      	cmp	r1, #255	; 0xff
 80a20c4:	d008      	beq.n	80a20d8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a20c6:	f7ff ffb9 	bl	80a203c <pinAvailable>
 80a20ca:	b128      	cbz	r0, 80a20d8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a20cc:	4629      	mov	r1, r5
 80a20ce:	4620      	mov	r0, r4
}
 80a20d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a20d4:	f7ff ba1e 	b.w	80a1514 <HAL_Pin_Mode>
 80a20d8:	bd38      	pop	{r3, r4, r5, pc}

080a20da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a20da:	b538      	push	{r3, r4, r5, lr}
 80a20dc:	4604      	mov	r4, r0
 80a20de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a20e0:	f7ff fa20 	bl	80a1524 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a20e4:	28ff      	cmp	r0, #255	; 0xff
 80a20e6:	d010      	beq.n	80a210a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a20e8:	2806      	cmp	r0, #6
 80a20ea:	d804      	bhi.n	80a20f6 <digitalWrite+0x1c>
 80a20ec:	234d      	movs	r3, #77	; 0x4d
 80a20ee:	fa23 f000 	lsr.w	r0, r3, r0
 80a20f2:	07c3      	lsls	r3, r0, #31
 80a20f4:	d409      	bmi.n	80a210a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a20f6:	4620      	mov	r0, r4
 80a20f8:	f7ff ffa0 	bl	80a203c <pinAvailable>
 80a20fc:	b128      	cbz	r0, 80a210a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a20fe:	4629      	mov	r1, r5
 80a2100:	4620      	mov	r0, r4
}
 80a2102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2106:	f7ff ba15 	b.w	80a1534 <HAL_GPIO_Write>
 80a210a:	bd38      	pop	{r3, r4, r5, pc}

080a210c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a210c:	b513      	push	{r0, r1, r4, lr}
 80a210e:	4c08      	ldr	r4, [pc, #32]	; (80a2130 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2110:	2300      	movs	r3, #0
 80a2112:	461a      	mov	r2, r3
 80a2114:	4619      	mov	r1, r3
 80a2116:	9300      	str	r3, [sp, #0]
 80a2118:	4620      	mov	r0, r4
 80a211a:	f7ff fd29 	bl	80a1b70 <_ZN9IPAddressC1Ehhhh>
 80a211e:	4620      	mov	r0, r4
 80a2120:	4a04      	ldr	r2, [pc, #16]	; (80a2134 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2122:	4905      	ldr	r1, [pc, #20]	; (80a2138 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2124:	b002      	add	sp, #8
 80a2126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a212a:	f000 b847 	b.w	80a21bc <__aeabi_atexit>
 80a212e:	bf00      	nop
 80a2130:	20000940 	.word	0x20000940
 80a2134:	20000068 	.word	0x20000068
 80a2138:	080a1ac1 	.word	0x080a1ac1

080a213c <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a213c:	b570      	push	{r4, r5, r6, lr}
 80a213e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2140:	2514      	movs	r5, #20
 80a2142:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2144:	4e09      	ldr	r6, [pc, #36]	; (80a216c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2146:	2100      	movs	r1, #0
 80a2148:	f000 f9bb 	bl	80a24c2 <memset>
 80a214c:	8025      	strh	r5, [r4, #0]
 80a214e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2150:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2152:	60a5      	str	r5, [r4, #8]
 80a2154:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2156:	4628      	mov	r0, r5
 80a2158:	f000 f840 	bl	80a21dc <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a215c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a215e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2160:	4628      	mov	r0, r5
 80a2162:	f000 f83b 	bl	80a21dc <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2166:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a2168:	4620      	mov	r0, r4
 80a216a:	bd70      	pop	{r4, r5, r6, pc}
 80a216c:	080a2770 	.word	0x080a2770

080a2170 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2170:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2172:	4d0e      	ldr	r5, [pc, #56]	; (80a21ac <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2174:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2176:	6829      	ldr	r1, [r5, #0]
 80a2178:	f011 0401 	ands.w	r4, r1, #1
 80a217c:	d113      	bne.n	80a21a6 <_Z19__fetch_global_Wirev+0x36>
 80a217e:	4628      	mov	r0, r5
 80a2180:	f7fd ff8d 	bl	80a009e <__cxa_guard_acquire>
 80a2184:	b178      	cbz	r0, 80a21a6 <_Z19__fetch_global_Wirev+0x36>
 80a2186:	a801      	add	r0, sp, #4
 80a2188:	f7ff ffd8 	bl	80a213c <_Z17acquireWireBufferv>
 80a218c:	aa01      	add	r2, sp, #4
 80a218e:	4621      	mov	r1, r4
 80a2190:	4807      	ldr	r0, [pc, #28]	; (80a21b0 <_Z19__fetch_global_Wirev+0x40>)
 80a2192:	f7ff fe75 	bl	80a1e80 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a2196:	4628      	mov	r0, r5
 80a2198:	f7fd ff86 	bl	80a00a8 <__cxa_guard_release>
 80a219c:	4a05      	ldr	r2, [pc, #20]	; (80a21b4 <_Z19__fetch_global_Wirev+0x44>)
 80a219e:	4906      	ldr	r1, [pc, #24]	; (80a21b8 <_Z19__fetch_global_Wirev+0x48>)
 80a21a0:	4803      	ldr	r0, [pc, #12]	; (80a21b0 <_Z19__fetch_global_Wirev+0x40>)
 80a21a2:	f000 f80b 	bl	80a21bc <__aeabi_atexit>
	return wire;
}
 80a21a6:	4802      	ldr	r0, [pc, #8]	; (80a21b0 <_Z19__fetch_global_Wirev+0x40>)
 80a21a8:	b007      	add	sp, #28
 80a21aa:	bd30      	pop	{r4, r5, pc}
 80a21ac:	20000958 	.word	0x20000958
 80a21b0:	2000095c 	.word	0x2000095c
 80a21b4:	20000068 	.word	0x20000068
 80a21b8:	080a1e29 	.word	0x080a1e29

080a21bc <__aeabi_atexit>:
 80a21bc:	460b      	mov	r3, r1
 80a21be:	4601      	mov	r1, r0
 80a21c0:	4618      	mov	r0, r3
 80a21c2:	f000 b965 	b.w	80a2490 <__cxa_atexit>
	...

080a21c8 <_ZSt15get_new_handlerv>:
 80a21c8:	4b02      	ldr	r3, [pc, #8]	; (80a21d4 <_ZSt15get_new_handlerv+0xc>)
 80a21ca:	6818      	ldr	r0, [r3, #0]
 80a21cc:	f3bf 8f5f 	dmb	sy
 80a21d0:	4770      	bx	lr
 80a21d2:	bf00      	nop
 80a21d4:	20000970 	.word	0x20000970

080a21d8 <_ZdlPvj>:
 80a21d8:	f7fd bf5f 	b.w	80a009a <_ZdlPv>

080a21dc <_ZnajRKSt9nothrow_t>:
 80a21dc:	f000 b800 	b.w	80a21e0 <_ZnwjRKSt9nothrow_t>

080a21e0 <_ZnwjRKSt9nothrow_t>:
 80a21e0:	b510      	push	{r4, lr}
 80a21e2:	2800      	cmp	r0, #0
 80a21e4:	bf14      	ite	ne
 80a21e6:	4604      	movne	r4, r0
 80a21e8:	2401      	moveq	r4, #1
 80a21ea:	4620      	mov	r0, r4
 80a21ec:	f7ff fb10 	bl	80a1810 <malloc>
 80a21f0:	b920      	cbnz	r0, 80a21fc <_ZnwjRKSt9nothrow_t+0x1c>
 80a21f2:	f7ff ffe9 	bl	80a21c8 <_ZSt15get_new_handlerv>
 80a21f6:	b108      	cbz	r0, 80a21fc <_ZnwjRKSt9nothrow_t+0x1c>
 80a21f8:	4780      	blx	r0
 80a21fa:	e7f6      	b.n	80a21ea <_ZnwjRKSt9nothrow_t+0xa>
 80a21fc:	bd10      	pop	{r4, pc}
	...

080a2200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2200:	4b18      	ldr	r3, [pc, #96]	; (80a2264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2202:	681a      	ldr	r2, [r3, #0]
 80a2204:	07d1      	lsls	r1, r2, #31
 80a2206:	bf5c      	itt	pl
 80a2208:	2201      	movpl	r2, #1
 80a220a:	601a      	strpl	r2, [r3, #0]
 80a220c:	4b16      	ldr	r3, [pc, #88]	; (80a2268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a220e:	681a      	ldr	r2, [r3, #0]
 80a2210:	07d2      	lsls	r2, r2, #31
 80a2212:	bf5c      	itt	pl
 80a2214:	2201      	movpl	r2, #1
 80a2216:	601a      	strpl	r2, [r3, #0]
 80a2218:	4b14      	ldr	r3, [pc, #80]	; (80a226c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a221a:	681a      	ldr	r2, [r3, #0]
 80a221c:	07d0      	lsls	r0, r2, #31
 80a221e:	bf5c      	itt	pl
 80a2220:	2201      	movpl	r2, #1
 80a2222:	601a      	strpl	r2, [r3, #0]
 80a2224:	4b12      	ldr	r3, [pc, #72]	; (80a2270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2226:	681a      	ldr	r2, [r3, #0]
 80a2228:	07d1      	lsls	r1, r2, #31
 80a222a:	bf5c      	itt	pl
 80a222c:	2201      	movpl	r2, #1
 80a222e:	601a      	strpl	r2, [r3, #0]
 80a2230:	4b10      	ldr	r3, [pc, #64]	; (80a2274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2232:	681a      	ldr	r2, [r3, #0]
 80a2234:	07d2      	lsls	r2, r2, #31
 80a2236:	bf5c      	itt	pl
 80a2238:	2201      	movpl	r2, #1
 80a223a:	601a      	strpl	r2, [r3, #0]
 80a223c:	4b0e      	ldr	r3, [pc, #56]	; (80a2278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a223e:	681a      	ldr	r2, [r3, #0]
 80a2240:	07d0      	lsls	r0, r2, #31
 80a2242:	bf5c      	itt	pl
 80a2244:	2201      	movpl	r2, #1
 80a2246:	601a      	strpl	r2, [r3, #0]
 80a2248:	4b0c      	ldr	r3, [pc, #48]	; (80a227c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a224a:	681a      	ldr	r2, [r3, #0]
 80a224c:	07d1      	lsls	r1, r2, #31
 80a224e:	bf5c      	itt	pl
 80a2250:	2201      	movpl	r2, #1
 80a2252:	601a      	strpl	r2, [r3, #0]
 80a2254:	4b0a      	ldr	r3, [pc, #40]	; (80a2280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2256:	681a      	ldr	r2, [r3, #0]
 80a2258:	07d2      	lsls	r2, r2, #31
 80a225a:	bf5c      	itt	pl
 80a225c:	2201      	movpl	r2, #1
 80a225e:	601a      	strpl	r2, [r3, #0]
 80a2260:	4770      	bx	lr
 80a2262:	bf00      	nop
 80a2264:	20000990 	.word	0x20000990
 80a2268:	2000098c 	.word	0x2000098c
 80a226c:	20000988 	.word	0x20000988
 80a2270:	20000984 	.word	0x20000984
 80a2274:	20000980 	.word	0x20000980
 80a2278:	2000097c 	.word	0x2000097c
 80a227c:	20000978 	.word	0x20000978
 80a2280:	20000974 	.word	0x20000974

080a2284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2284:	4b24      	ldr	r3, [pc, #144]	; (80a2318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2286:	681a      	ldr	r2, [r3, #0]
 80a2288:	07d0      	lsls	r0, r2, #31
 80a228a:	bf5c      	itt	pl
 80a228c:	2201      	movpl	r2, #1
 80a228e:	601a      	strpl	r2, [r3, #0]
 80a2290:	4b22      	ldr	r3, [pc, #136]	; (80a231c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2292:	681a      	ldr	r2, [r3, #0]
 80a2294:	07d1      	lsls	r1, r2, #31
 80a2296:	bf5c      	itt	pl
 80a2298:	2201      	movpl	r2, #1
 80a229a:	601a      	strpl	r2, [r3, #0]
 80a229c:	4b20      	ldr	r3, [pc, #128]	; (80a2320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a229e:	681a      	ldr	r2, [r3, #0]
 80a22a0:	07d2      	lsls	r2, r2, #31
 80a22a2:	bf5c      	itt	pl
 80a22a4:	2201      	movpl	r2, #1
 80a22a6:	601a      	strpl	r2, [r3, #0]
 80a22a8:	4b1e      	ldr	r3, [pc, #120]	; (80a2324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a22aa:	681a      	ldr	r2, [r3, #0]
 80a22ac:	07d0      	lsls	r0, r2, #31
 80a22ae:	bf5c      	itt	pl
 80a22b0:	2201      	movpl	r2, #1
 80a22b2:	601a      	strpl	r2, [r3, #0]
 80a22b4:	4b1c      	ldr	r3, [pc, #112]	; (80a2328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a22b6:	681a      	ldr	r2, [r3, #0]
 80a22b8:	07d1      	lsls	r1, r2, #31
 80a22ba:	bf5c      	itt	pl
 80a22bc:	2201      	movpl	r2, #1
 80a22be:	601a      	strpl	r2, [r3, #0]
 80a22c0:	4b1a      	ldr	r3, [pc, #104]	; (80a232c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a22c2:	681a      	ldr	r2, [r3, #0]
 80a22c4:	07d2      	lsls	r2, r2, #31
 80a22c6:	bf5c      	itt	pl
 80a22c8:	2201      	movpl	r2, #1
 80a22ca:	601a      	strpl	r2, [r3, #0]
 80a22cc:	4b18      	ldr	r3, [pc, #96]	; (80a2330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a22ce:	681a      	ldr	r2, [r3, #0]
 80a22d0:	07d0      	lsls	r0, r2, #31
 80a22d2:	bf5c      	itt	pl
 80a22d4:	2201      	movpl	r2, #1
 80a22d6:	601a      	strpl	r2, [r3, #0]
 80a22d8:	4b16      	ldr	r3, [pc, #88]	; (80a2334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a22da:	681a      	ldr	r2, [r3, #0]
 80a22dc:	07d1      	lsls	r1, r2, #31
 80a22de:	bf5c      	itt	pl
 80a22e0:	2201      	movpl	r2, #1
 80a22e2:	601a      	strpl	r2, [r3, #0]
 80a22e4:	4b14      	ldr	r3, [pc, #80]	; (80a2338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a22e6:	681a      	ldr	r2, [r3, #0]
 80a22e8:	07d2      	lsls	r2, r2, #31
 80a22ea:	bf5c      	itt	pl
 80a22ec:	2201      	movpl	r2, #1
 80a22ee:	601a      	strpl	r2, [r3, #0]
 80a22f0:	4b12      	ldr	r3, [pc, #72]	; (80a233c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a22f2:	681a      	ldr	r2, [r3, #0]
 80a22f4:	07d0      	lsls	r0, r2, #31
 80a22f6:	bf5c      	itt	pl
 80a22f8:	2201      	movpl	r2, #1
 80a22fa:	601a      	strpl	r2, [r3, #0]
 80a22fc:	4b10      	ldr	r3, [pc, #64]	; (80a2340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a22fe:	681a      	ldr	r2, [r3, #0]
 80a2300:	07d1      	lsls	r1, r2, #31
 80a2302:	bf5c      	itt	pl
 80a2304:	2201      	movpl	r2, #1
 80a2306:	601a      	strpl	r2, [r3, #0]
 80a2308:	4b0e      	ldr	r3, [pc, #56]	; (80a2344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a230a:	681a      	ldr	r2, [r3, #0]
 80a230c:	07d2      	lsls	r2, r2, #31
 80a230e:	bf5c      	itt	pl
 80a2310:	2201      	movpl	r2, #1
 80a2312:	601a      	strpl	r2, [r3, #0]
 80a2314:	4770      	bx	lr
 80a2316:	bf00      	nop
 80a2318:	200009c0 	.word	0x200009c0
 80a231c:	200009bc 	.word	0x200009bc
 80a2320:	200009b8 	.word	0x200009b8
 80a2324:	200009b4 	.word	0x200009b4
 80a2328:	200009b0 	.word	0x200009b0
 80a232c:	200009ac 	.word	0x200009ac
 80a2330:	200009a8 	.word	0x200009a8
 80a2334:	200009a4 	.word	0x200009a4
 80a2338:	200009a0 	.word	0x200009a0
 80a233c:	2000099c 	.word	0x2000099c
 80a2340:	20000998 	.word	0x20000998
 80a2344:	20000994 	.word	0x20000994

080a2348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2348:	4b24      	ldr	r3, [pc, #144]	; (80a23dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a234a:	681a      	ldr	r2, [r3, #0]
 80a234c:	07d0      	lsls	r0, r2, #31
 80a234e:	bf5c      	itt	pl
 80a2350:	2201      	movpl	r2, #1
 80a2352:	601a      	strpl	r2, [r3, #0]
 80a2354:	4b22      	ldr	r3, [pc, #136]	; (80a23e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2356:	681a      	ldr	r2, [r3, #0]
 80a2358:	07d1      	lsls	r1, r2, #31
 80a235a:	bf5c      	itt	pl
 80a235c:	2201      	movpl	r2, #1
 80a235e:	601a      	strpl	r2, [r3, #0]
 80a2360:	4b20      	ldr	r3, [pc, #128]	; (80a23e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2362:	681a      	ldr	r2, [r3, #0]
 80a2364:	07d2      	lsls	r2, r2, #31
 80a2366:	bf5c      	itt	pl
 80a2368:	2201      	movpl	r2, #1
 80a236a:	601a      	strpl	r2, [r3, #0]
 80a236c:	4b1e      	ldr	r3, [pc, #120]	; (80a23e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a236e:	681a      	ldr	r2, [r3, #0]
 80a2370:	07d0      	lsls	r0, r2, #31
 80a2372:	bf5c      	itt	pl
 80a2374:	2201      	movpl	r2, #1
 80a2376:	601a      	strpl	r2, [r3, #0]
 80a2378:	4b1c      	ldr	r3, [pc, #112]	; (80a23ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a237a:	681a      	ldr	r2, [r3, #0]
 80a237c:	07d1      	lsls	r1, r2, #31
 80a237e:	bf5c      	itt	pl
 80a2380:	2201      	movpl	r2, #1
 80a2382:	601a      	strpl	r2, [r3, #0]
 80a2384:	4b1a      	ldr	r3, [pc, #104]	; (80a23f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2386:	681a      	ldr	r2, [r3, #0]
 80a2388:	07d2      	lsls	r2, r2, #31
 80a238a:	bf5c      	itt	pl
 80a238c:	2201      	movpl	r2, #1
 80a238e:	601a      	strpl	r2, [r3, #0]
 80a2390:	4b18      	ldr	r3, [pc, #96]	; (80a23f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2392:	681a      	ldr	r2, [r3, #0]
 80a2394:	07d0      	lsls	r0, r2, #31
 80a2396:	bf5c      	itt	pl
 80a2398:	2201      	movpl	r2, #1
 80a239a:	601a      	strpl	r2, [r3, #0]
 80a239c:	4b16      	ldr	r3, [pc, #88]	; (80a23f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a239e:	681a      	ldr	r2, [r3, #0]
 80a23a0:	07d1      	lsls	r1, r2, #31
 80a23a2:	bf5c      	itt	pl
 80a23a4:	2201      	movpl	r2, #1
 80a23a6:	601a      	strpl	r2, [r3, #0]
 80a23a8:	4b14      	ldr	r3, [pc, #80]	; (80a23fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a23aa:	681a      	ldr	r2, [r3, #0]
 80a23ac:	07d2      	lsls	r2, r2, #31
 80a23ae:	bf5c      	itt	pl
 80a23b0:	2201      	movpl	r2, #1
 80a23b2:	601a      	strpl	r2, [r3, #0]
 80a23b4:	4b12      	ldr	r3, [pc, #72]	; (80a2400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a23b6:	681a      	ldr	r2, [r3, #0]
 80a23b8:	07d0      	lsls	r0, r2, #31
 80a23ba:	bf5c      	itt	pl
 80a23bc:	2201      	movpl	r2, #1
 80a23be:	601a      	strpl	r2, [r3, #0]
 80a23c0:	4b10      	ldr	r3, [pc, #64]	; (80a2404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a23c2:	681a      	ldr	r2, [r3, #0]
 80a23c4:	07d1      	lsls	r1, r2, #31
 80a23c6:	bf5c      	itt	pl
 80a23c8:	2201      	movpl	r2, #1
 80a23ca:	601a      	strpl	r2, [r3, #0]
 80a23cc:	4b0e      	ldr	r3, [pc, #56]	; (80a2408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a23ce:	681a      	ldr	r2, [r3, #0]
 80a23d0:	07d2      	lsls	r2, r2, #31
 80a23d2:	bf5c      	itt	pl
 80a23d4:	2201      	movpl	r2, #1
 80a23d6:	601a      	strpl	r2, [r3, #0]
 80a23d8:	4770      	bx	lr
 80a23da:	bf00      	nop
 80a23dc:	200009f0 	.word	0x200009f0
 80a23e0:	200009ec 	.word	0x200009ec
 80a23e4:	200009e8 	.word	0x200009e8
 80a23e8:	200009e4 	.word	0x200009e4
 80a23ec:	200009e0 	.word	0x200009e0
 80a23f0:	200009dc 	.word	0x200009dc
 80a23f4:	200009d8 	.word	0x200009d8
 80a23f8:	200009d4 	.word	0x200009d4
 80a23fc:	200009d0 	.word	0x200009d0
 80a2400:	200009cc 	.word	0x200009cc
 80a2404:	200009c8 	.word	0x200009c8
 80a2408:	200009c4 	.word	0x200009c4

080a240c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a240c:	4b18      	ldr	r3, [pc, #96]	; (80a2470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a240e:	681a      	ldr	r2, [r3, #0]
 80a2410:	07d1      	lsls	r1, r2, #31
 80a2412:	bf5c      	itt	pl
 80a2414:	2201      	movpl	r2, #1
 80a2416:	601a      	strpl	r2, [r3, #0]
 80a2418:	4b16      	ldr	r3, [pc, #88]	; (80a2474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a241a:	681a      	ldr	r2, [r3, #0]
 80a241c:	07d2      	lsls	r2, r2, #31
 80a241e:	bf5c      	itt	pl
 80a2420:	2201      	movpl	r2, #1
 80a2422:	601a      	strpl	r2, [r3, #0]
 80a2424:	4b14      	ldr	r3, [pc, #80]	; (80a2478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2426:	681a      	ldr	r2, [r3, #0]
 80a2428:	07d0      	lsls	r0, r2, #31
 80a242a:	bf5c      	itt	pl
 80a242c:	2201      	movpl	r2, #1
 80a242e:	601a      	strpl	r2, [r3, #0]
 80a2430:	4b12      	ldr	r3, [pc, #72]	; (80a247c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2432:	681a      	ldr	r2, [r3, #0]
 80a2434:	07d1      	lsls	r1, r2, #31
 80a2436:	bf5c      	itt	pl
 80a2438:	2201      	movpl	r2, #1
 80a243a:	601a      	strpl	r2, [r3, #0]
 80a243c:	4b10      	ldr	r3, [pc, #64]	; (80a2480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a243e:	681a      	ldr	r2, [r3, #0]
 80a2440:	07d2      	lsls	r2, r2, #31
 80a2442:	bf5c      	itt	pl
 80a2444:	2201      	movpl	r2, #1
 80a2446:	601a      	strpl	r2, [r3, #0]
 80a2448:	4b0e      	ldr	r3, [pc, #56]	; (80a2484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a244a:	681a      	ldr	r2, [r3, #0]
 80a244c:	07d0      	lsls	r0, r2, #31
 80a244e:	bf5c      	itt	pl
 80a2450:	2201      	movpl	r2, #1
 80a2452:	601a      	strpl	r2, [r3, #0]
 80a2454:	4b0c      	ldr	r3, [pc, #48]	; (80a2488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2456:	681a      	ldr	r2, [r3, #0]
 80a2458:	07d1      	lsls	r1, r2, #31
 80a245a:	bf5c      	itt	pl
 80a245c:	2201      	movpl	r2, #1
 80a245e:	601a      	strpl	r2, [r3, #0]
 80a2460:	4b0a      	ldr	r3, [pc, #40]	; (80a248c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2462:	681a      	ldr	r2, [r3, #0]
 80a2464:	07d2      	lsls	r2, r2, #31
 80a2466:	bf5c      	itt	pl
 80a2468:	2201      	movpl	r2, #1
 80a246a:	601a      	strpl	r2, [r3, #0]
 80a246c:	4770      	bx	lr
 80a246e:	bf00      	nop
 80a2470:	20000a10 	.word	0x20000a10
 80a2474:	20000a0c 	.word	0x20000a0c
 80a2478:	20000a08 	.word	0x20000a08
 80a247c:	20000a04 	.word	0x20000a04
 80a2480:	20000a00 	.word	0x20000a00
 80a2484:	200009fc 	.word	0x200009fc
 80a2488:	200009f8 	.word	0x200009f8
 80a248c:	200009f4 	.word	0x200009f4

080a2490 <__cxa_atexit>:
 80a2490:	b510      	push	{r4, lr}
 80a2492:	4c05      	ldr	r4, [pc, #20]	; (80a24a8 <__cxa_atexit+0x18>)
 80a2494:	4613      	mov	r3, r2
 80a2496:	b12c      	cbz	r4, 80a24a4 <__cxa_atexit+0x14>
 80a2498:	460a      	mov	r2, r1
 80a249a:	4601      	mov	r1, r0
 80a249c:	2002      	movs	r0, #2
 80a249e:	f3af 8000 	nop.w
 80a24a2:	bd10      	pop	{r4, pc}
 80a24a4:	4620      	mov	r0, r4
 80a24a6:	bd10      	pop	{r4, pc}
 80a24a8:	00000000 	.word	0x00000000

080a24ac <memcpy>:
 80a24ac:	b510      	push	{r4, lr}
 80a24ae:	1e43      	subs	r3, r0, #1
 80a24b0:	440a      	add	r2, r1
 80a24b2:	4291      	cmp	r1, r2
 80a24b4:	d004      	beq.n	80a24c0 <memcpy+0x14>
 80a24b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a24ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a24be:	e7f8      	b.n	80a24b2 <memcpy+0x6>
 80a24c0:	bd10      	pop	{r4, pc}

080a24c2 <memset>:
 80a24c2:	4603      	mov	r3, r0
 80a24c4:	4402      	add	r2, r0
 80a24c6:	4293      	cmp	r3, r2
 80a24c8:	d002      	beq.n	80a24d0 <memset+0xe>
 80a24ca:	f803 1b01 	strb.w	r1, [r3], #1
 80a24ce:	e7fa      	b.n	80a24c6 <memset+0x4>
 80a24d0:	4770      	bx	lr
	...

080a24d4 <srand>:
 80a24d4:	b538      	push	{r3, r4, r5, lr}
 80a24d6:	4b12      	ldr	r3, [pc, #72]	; (80a2520 <srand+0x4c>)
 80a24d8:	4605      	mov	r5, r0
 80a24da:	681c      	ldr	r4, [r3, #0]
 80a24dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a24de:	b9d3      	cbnz	r3, 80a2516 <srand+0x42>
 80a24e0:	2018      	movs	r0, #24
 80a24e2:	f7ff f995 	bl	80a1810 <malloc>
 80a24e6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a24ea:	63a0      	str	r0, [r4, #56]	; 0x38
 80a24ec:	8003      	strh	r3, [r0, #0]
 80a24ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a24f2:	8043      	strh	r3, [r0, #2]
 80a24f4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a24f8:	8083      	strh	r3, [r0, #4]
 80a24fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a24fe:	80c3      	strh	r3, [r0, #6]
 80a2500:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2504:	8103      	strh	r3, [r0, #8]
 80a2506:	2305      	movs	r3, #5
 80a2508:	8143      	strh	r3, [r0, #10]
 80a250a:	230b      	movs	r3, #11
 80a250c:	8183      	strh	r3, [r0, #12]
 80a250e:	2201      	movs	r2, #1
 80a2510:	2300      	movs	r3, #0
 80a2512:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2518:	2200      	movs	r2, #0
 80a251a:	611d      	str	r5, [r3, #16]
 80a251c:	615a      	str	r2, [r3, #20]
 80a251e:	bd38      	pop	{r3, r4, r5, pc}
 80a2520:	20000064 	.word	0x20000064

080a2524 <strlen>:
 80a2524:	4603      	mov	r3, r0
 80a2526:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a252a:	2a00      	cmp	r2, #0
 80a252c:	d1fb      	bne.n	80a2526 <strlen+0x2>
 80a252e:	1a18      	subs	r0, r3, r0
 80a2530:	3801      	subs	r0, #1
 80a2532:	4770      	bx	lr

080a2534 <dynalib_user>:
 80a2534:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2544:	0000 0000                                   ....

080a2548 <CSWTCH.210>:
 80a2548:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a2558:	0050 0000 6162 6475 5300 7265 6169 006c     P...baud.Serial.
 80a2568:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 80a2578:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
 80a2588:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
 80a2598:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
 80a25a8:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
 80a25b8:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
 80a25c8:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
 80a25d8:	3031 2075 5d00 0020 6425 2c00 0020 2928     10u .] .%d., .()
 80a25e8:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 80a25f8:	6400 7465 6961 736c 3d20 0020 0a0d 6600     .details = ....f
 80a2608:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 80a2618:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
 80a2628:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 80a2638:	696e 0063 6c61 006c 005a 2b25 3330 3a64     nic.all.Z.%+03d:
 80a2648:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2658:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2668:	0000 0000                                   ....

080a266c <_ZTV9IPAddress>:
	...
 80a2674:	1ad1 080a 1ac1 080a 1ac3 080a               ............

080a2680 <_ZTV9USBSerial>:
	...
 80a2688:	1b8d 080a 1bdd 080a 1beb 080a 1889 080a     ................
 80a2698:	1bc9 080a 1b8f 080a 1ba5 080a 1bd7 080a     ................
 80a26a8:	1bbb 080a 1b89 080a                         ........

080a26b0 <_ZTV11USARTSerial>:
	...
 80a26b8:	1d25 080a 1d75 080a 1d83 080a 1889 080a     %...u...........
 80a26c8:	1d39 080a 1d5b 080a 1d47 080a 1d6f 080a     9...[...G...o...
 80a26d8:	1d27 080a 1d2b 080a                         '...+...

080a26e0 <_ZTV7TwoWire>:
	...
 80a26e8:	1e29 080a 1e73 080a 1e4b 080a 1e2b 080a     )...s...K...+...
 80a26f8:	1e53 080a 1e5b 080a 1e63 080a 1e6b 080a     S...[...c...k...

080a2708 <_ZTVN5spark9WiFiClassE>:
	...
 80a2710:	1f43 080a 1f39 080a 1f2f 080a 1ead 080a     C...9.../.......
 80a2720:	1919 080a 1f23 080a 1f17 080a 1f0f 080a     ....#...........
 80a2730:	1f05 080a 1efb 080a 1eb7 080a               ............

080a273c <_ZTVN5spark12NetworkClassE>:
	...
 80a2744:	1f61 080a 1f6b 080a 1f75 080a 1f7f 080a     a...k...u.......
 80a2754:	1f89 080a 1f95 080a 1fa1 080a 1fad 080a     ................
 80a2764:	1fb5 080a 1fbf 080a 1fc9 080a               ............

080a2770 <_ZSt7nothrow>:
 80a2770:	0000 0000                                   ....

080a2774 <__sf_fake_stdin>:
	...

080a2794 <__sf_fake_stdout>:
	...

080a27b4 <__sf_fake_stderr>:
	...
 80a27d4:	0043                                        C.

080a27d6 <link_const_variable_data_end>:
	...

080a27d8 <link_constructors_location>:
 80a27d8:	080a01fd 	.word	0x080a01fd
 80a27dc:	080a14f1 	.word	0x080a14f1
 80a27e0:	080a1855 	.word	0x080a1855
 80a27e4:	080a1925 	.word	0x080a1925
 80a27e8:	080a1935 	.word	0x080a1935
 80a27ec:	080a196d 	.word	0x080a196d
 80a27f0:	080a1f4d 	.word	0x080a1f4d
 80a27f4:	080a2019 	.word	0x080a2019
 80a27f8:	080a210d 	.word	0x080a210d
 80a27fc:	080a2201 	.word	0x080a2201
 80a2800:	080a2285 	.word	0x080a2285
 80a2804:	080a2349 	.word	0x080a2349
 80a2808:	080a240d 	.word	0x080a240d

080a280c <link_constructors_end>:
 80a280c:	00000000 	.word	0x00000000
